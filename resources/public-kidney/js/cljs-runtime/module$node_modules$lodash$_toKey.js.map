{
"version":3,
"file":"module$node_modules$lodash$_toKey.js",
"lineCount":1,
"mappings":"AAAAA,cAAA,CAAA,iCAAA,CAAsD,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAC9F,IAAIC,SAAWH,OAAA,CAAQ,qCAAR,CAAf,CAGII,SAAW,CAAXA,CAAe,CAiBnBH,OAAOC,CAAAA,OAAP,CARAG,QAAc,CAACC,KAAD,CAAQ,CACpB,GAAoB,QAApB,EAAI,MAAOA,MAAX,EAAgCH,QAAA,CAASG,KAAT,CAAhC,CACE,MAAOA,MAET,KAAIC,OAAUD,KAAVC,CAAkB,EACtB,OAAkB,GAAX,EAACA,MAAD,EAAmB,CAAnB,CAAuBD,KAAvB,EAAiC,CAACF,QAAlC,CAA8C,IAA9C,CAAqDG,MALxC,CAbwE;",
"sources":["node_modules/lodash/_toKey.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$lodash$_toKey\"] = function(global,require,module,exports) {\nvar isSymbol = require('./isSymbol');\n\n/** Used as references for various `Number` constants. */\nvar INFINITY = 1 / 0;\n\n/**\n * Converts `value` to a string key if it's not a string or symbol.\n *\n * @private\n * @param {*} value The value to inspect.\n * @returns {string|symbol} Returns the key.\n */\nfunction toKey(value) {\n  if (typeof value == 'string' || isSymbol(value)) {\n    return value;\n  }\n  var result = (value + '');\n  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;\n}\n\nmodule.exports = toKey;\n\n};"],
"names":["shadow$provide","global","require","module","exports","isSymbol","INFINITY","toKey","value","result"]
}
