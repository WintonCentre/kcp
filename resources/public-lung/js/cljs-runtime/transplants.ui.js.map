{"version":3,"sources":["transplants/ui.cljs"],"mappings":";;AAgBA,AAACA;AAED;;;AAAKC,2BAAgD,AAACC,+BAAqBC;AAC3E;;;AAAKC,qBAA0C,AAACF,+BAAqBG;AACrE;;;AAAKC,qBAA0C,AAACJ,+BAAqBK;AACrE;;;AAAKC,wBAA6C,AAACN,+BAAqBO;AACxE;;;AAAKC,sBAA2C,AAACR,+BAAqBS;AACtE;;;AAAKC,qBAA0C,AAACV,+BAAqBW;AAErE;;;;4BAAA,5BAAMC,gEAGHC;AAHH,mMAIMA,/CACA,sDAAA,tDAACC,/CACD,uKAAA,vKAACA,/CACD,mSAAA,nSAACA,tDACD,iZAAA,1YAACA;;AAEP,AAAA;;;;sBAAA,8BAAAC,pDAAME;AAAN,AAAA,IAAAD,WAAA,AAAA;AAAA,AAAA,QAAAA;KAAA;AAAA,OAAAC,kDAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,kDAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,kDAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;;AAAA,MAAA,KAAAC,MAAA,CAAA,8DAAA,AAAA;;;;;AAAA,CAAA,oDAAA,pDAAMD,+DAGFE;AAHJ,AAIG,2DAAA,KAAA,zDAACC,kDAAKD;;;AAJT,CAAA,oDAAA,pDAAMF,+DAKFE,EAAEE;AALN,AAMG,kEAAA,3DAACD,kDAAKD,EAAEE;;;AANX,CAAA,oDAAA,pDAAMJ,+DAOFE,EAAEE,OAAOC;AAPb,AAQG,OAACC,wDAASJ,EAAEE,OAAOC;;;AARtB,CAAA,8CAAA,9CAAML;;AAAN,AAUA,AAIA;;;yBAAA,zBAAMO;AAAN,AAAA,0FAAA,mDAAA,2CAAA,uDAAA,2CAAA,0DAAA,OAAA,wEAAA,SAAA,4EAAA,+BAAA,mFAAA,kDAAA;;AAOA;;;kCAAA,lCAAMC,4EAEHC;AAFH,AAGE,IAAMC,cAAY,AAAA,iGAAcD;AAAhC,AACE,GAAI,0EAAA,1EAACE,6CAAE,AAACC,gBAAMF;AACZ,OAACG,gBAAMH;;AADT;;;AAIJ;;;wBAAA,gCAAAI,xDAAMI;AAAN,AAAA,IAAAH,aAAAD;IAAAC,iBAAA,AAAAC,4BAAAD;eAAA,AAAAE,4CAAAF,eAAA,tEAEWI;WAFX,AAAAF,4CAAAF,eAAA,lEAEoBK;AAFpB,AAGE,YAAA,AAAAC,RAAMC,wBAAO,sDAAA,mFAAA,zIAACC;IACRC,QAAM,qDAAA,mFAAA,kEAAA,1MAACC,+CAAOH;YADpB,AAAAD,RAEMZ,wBAAQ,sDAAA,mFAAA,zIAACc;IAITG,eAAa,AAAClB,gCAAiBC;oBANrC,AAAAY,hBAOMM,gCAAe,sDAAA,mFAAA,zIAACJ;AAPtB,AASE,IAAAK,qBAAe,iBAAAC,mBAAIH;AAAJ,AAAA,oBAAAG;AAAAA;;AAAiBL;;;AAAhC,AAAA,oBAAAI;AAAA,gBAAAA,ZAASJ;AAAT,AAAA,0FAAA,oGAAA,2CAAA,iDAAA,QAAA,wDAAA,KAAA,uDAAA,2CAAA,uEAAA,kBAAA,0DAAA,oBAAA,mFAAA,0GAAA,2CAAA,sEAAA,mFAAA,mDAAA,2CAAA,yDAAA,uDAAA,2CAAA,yDAAA,aAAA,iDAAA,wCAAA,mFAAA,sGAAA,2CAAA,uDAAA,2CAAA,gEAAA,cAAA,gFAAA,4UAAA,mFAAA,mDAAA,2CAAA,uDAAA,2CAAA,gEAAA,+WAAA,mFAAA,2GAAA,2CAAA,wEAAA,mCAAA,mFAAA,6GAAA,2CAAA,kDAAA,mBAAA,uDAAA,2CAAA,mEAAA,qBAAA,mFAAA,iGAAA,2CAAA,yIAAA,mFAAA,sGAAA,2CAAA,uDAAA,2CAAA,gEAAA,gBAAA,+DAAA,oDAAA,qMAAA,eAAA,mFAAA,sGAAA,2CAAA,uDAAA,2CAAA,gEAAA,gBAAA,+DAAA,uDAAA,uMAAA,gBAAA,mFAAA,sGAAA,2CAAA,uDAAA,2CAAA,gEAAA,gBAAA,+DAAA,sDAAA,wMAAA,gBAAA,mFAAA,sGAAA,2CAAA,uDAAA,2CAAA,gEAAA,gBAAA,+DAAA,sDAAA,sMAAA,uBAAA,mFAAA,sGAAA,2CAAA,uDAAA,2CAAA,gEAAA,gBAAA,+DAAA,sDAAA,qMAAA,3+OACMM,imBAECC,2JAAwBZ,sPAAsBC,wYAE9CY,wUACoB,AAACC,eAAKT,gEACP,kDAAA,yFAAA,2CAAA,tLAACrB,4OAAsC,AAAC8B,eAAKT,qYAElE,qTAAA,nSAAIE,cACF,mQAAA,tNAAK,qDAAA,gGAAA,rJAACD,+CAAOhB,yFAAOiB,sQAEpBQ,oVACAC,0eAECC,+JAAoB,uDAAA,rCAAIZ,WAAM,AAACS,eAAKT,6JAGnCQ,4bAEmB,kDAAA,lDAAC7B,iSACpB6B,+bAEmB,kDAAA,lDAAC7B,oSACpB6B,8bAEmB,kDAAA,lDAAC7B,qSACpB6B,8bAEmB,kDAAA,lDAAC7B,0SACpB6B,8bAEmB,kDAAA,lDAAC7B,oKACxB,iCAAA,fAAMwB,eACJ,iBAAAU,qBAAmB,CAACb,0CAAAA,yDAAAA,jBAAMG,qCAAAA;AAA1B,AAAA,oBAAAU;AAAA,AAAA,cAAAA,VAAWC;AAAX,AACE,IAAMC,OAAK,+CAAA,AAAAlB,yQAAA,mFAAA,kEAAA,7cAACI,+DAAQ,sDAAA,mFAAA,zIAACF;AAArB,AACE,oDAAA,mFAAA,yGAAA,2CAAA,uDAAA,2CAAA,gEAAA,gBAAA,sDAAA,qBAAA,kDAAA,nkBAACiB,+KAASC,ybAEJ,AAACC,4CAAI,WAAKC;AAAL,AAAA,0FAAA,8GAAA,2CAAA,inCAAA,3tCACMC,+JACI,kBAAIL,MACF,kDAAA,gHAAA,2CAAA,mFAAA,mKAAA,ncAACpC,mQACa,AAAC8B,eAAKP,uEACL,AAACO,eAAK,AAAA,kFAAMU,+DACd,AAACV,eAAKM,eACnB,kDAAA,gHAAA,2CAAA,mFAAA,mKAAA,sDAAA,zfAACpC,mQACa,AAAC8B,eAAKP,uEACL,AAACO,eAAK,AAAA,kFAAMU,uIAE9B,AAACV,eAAK,AAAA,kFAAMU,iBAElB,AAAA,mFAAOA;GACVL;;AAlBf;;KADF;;AAjCL,0FAqDG/B;;;AAEP,AAOA;;;;wBAAA,xBAAMsC;AAAN,AAAA,0FAAA,iEAAA,2CAAA,uDAAA,2CAAA,uDAAA,OAAA,yDAAA,OAAA,4EAAA,QAAA,uDAAA,QAAA,mEAAA,SAAA,4EAAA,yBAAA,mFAAA,mDAAA,2CAAA,uDAAA,2CAAA,yDAAA,OAAA,0DAAA,OAAA,wEAAA,MAAA,mEAAA,yBAAA,mFAAA,mDAAA,2CAAA,oDAAA,mBAAA,uDAAA,2CAAA,yDAAA,KAAA,oEAAA,aAAA,iDAAA,gDAAA;;AAUA;;;gCAAA,wCAAAC,xEAAME;AAAN,AAAA,IAAAD,aAAAD;IAAAC,iBAAA,AAAA/B,4BAAA+B;aAAA,AAAA9B,4CAAA8B,eAAA,pEAEWE;8BAFX,AAAAhC,4CAAA8B,eAAA,rFAEkBG;AAFlB,AAGE,oBAAA,AAAA7B,hBAAM8B,gCAAe,CAACD,wDAAAA,0DAAAA;AAAtB,AAAA,0FAAA,mDAAA,2CAAA,uDAAA,2CAAA,0DAAA,sDAAA,wEAAA,k4BAAA,yGAAA,2CAAA,gEAAA,qFAAA,6DAAA,IAAA,qDAAA,oBAAA,8DAAA,l1CAEG,iCAAA,AAAA,mFAAA,mDAAA,2CAAA,uDAAA,2CAAA,gEAAA,MAAA,mEAAA,oBAAA,iRAAA,yHAAA,z0BAAMC,khBAEF,AAAA,mFAAA,AAAA,mFAAIA,2GACJN,+HACH3B,0HAAgB+B,8EACOE,yPAIxB,uBAAA,vBAACC;AAAD,AAAa,6DAAA,mFAAA,zIAAC7B;;;AAGnB,AAAA;;;2BAAA,mCAAAzB,9DAAM4D;AAAN,AAAA,IAAAL,qBAAA;AAAA,AAAA,IAAAC,0BAAA,AAAA;AAAA,AAAA,IAAAC,wBAAA;;AAAA,AAAA,GAAA,CAAAA,wBAAAD;AAAA,AAAA,AAAAD,wBAAA,CAAA,UAAAE;;AAAA,eAAA,CAAAA,wBAAA;;;;AAAA;;;;AAAA,IAAAC,uBAAA,EAAA,CAAA,MAAA,AAAAH,4BAAA,AAAA,KAAAI,qBAAA,AAAAJ,yBAAA,KAAA,IAAA,OAAA;AAAA,AAAA,OAAAK,8DAAA,CAAA,UAAA,MAAAF;;;AAAA,AAAA,CAAA,gEAAA,hEAAME,2EAEHK,MAAQC;AAFX,AAAA,mHAAA,2CAAA,oDAAA,IAAA,uDAAA,2CAAA,gEAAA,KAAA,gEAAA,qCAAA,sGAAA,9eAGGlF,2dAECK,sGACCF,mBACA,oRAAA,mFAAA,iDAAA,2CAAA,uDAAA,2CAAA,uDAAA,OAAA,sEAAA,mCAAA,mFAAA,kDAAA,2CAAA,uDAAA,2CAAA,uDAAA,OAAA,sEAAA,hmCAAI,CAAA,AAAAoC,yQAAA,zPAAI,sDAAA,mFAAA,zIAACE,2qBACyCwC,ybACAA,eAClD,6CAAA,mFAAA,hIAACvB,yLAAW,AAACyB,oDAAY,WAAK/D,EAAEgE;AAAP,AAAoBA;GAAGF;;;AAVrD,CAAA,mDAAA,nDAAMN;;AAAN;AAAA,CAAA,6CAAA,WAAAC,xDAAMD;AAAN,AAAA,IAAAE,WAAA,AAAA/C,gBAAA8C;IAAAA,eAAA,AAAAE,eAAAF;AAAA,AAAA,IAAAG,qBAAA;AAAA,AAAA,OAAAA,wDAAAF,SAAAD;;;AAAA,AAYA;;;8BAAA,sCAAAQ,pEAAME;AAAN,AAAA,IAAAD,aAAAD;IAAAC,iBAAA,AAAApD,4BAAAoD;UAAA,AAAAnD,4CAAAmD,eAAA,jEAEWE;YAFX,AAAArD,4CAAAmD,eAAA,nEAEeG;YAFf,AAAAtD,4CAAAmD,eAAA,nEAEqB5C;aAFrB,AAAAP,4CAAAmD,eAAA,pEAE2BzB;WAF3B,AAAA1B,4CAAAmD,eAAA,lEAEkC7B;kBAFlC,AAAAtB,4CAAAmD,eAAA,zEAEuCI;kBAFvC,AAAAvD,4CAAAmD,eAAA,zEAEmDK;AAFnD,AAOE,IAAMC,SAAO,AAAC/D,6CAAE,AAACsB,eAAKM,MAAMiC;AAA5B,AAAA,gHAAA,2CAAA,sIAAA,iKAAA,uDAAA,2CAAA,sEAAA,IAAA,oEAAA,YAAA,gEAAA,wDAAA,6DAAA,zxBACGnF,mHAAY,uBAAA,2BAAA,jDAAK,AAAC4C,eAAKT,WAAW,AAACS,eAAKU,YAAY,AAACV,eAAKqC,0EACzC,EAAII,QAAOD,YAAY,CAAA,uDAAgBA,6UAGxCC,2DACHJ;AANhB,AAOsB,8BAAA,mFAAA,iGAAA,gHAAA,2CAAA,4DAAA,gEAAA,leAACK,4ZACqBnD,+DACCmB,6DACFJ;WACxCgC;;AAEL;;;iCAAA,jCAAMK,0EAEHpD,MAAMqD,QAAQtC;AAFjB,AAAA,0FAAA,wWAAA,oBAAA,mFAAA,sFAAA,2CAAA,wDAAA,SAAA,qGAAA,uBAAA,/tBAIG,oEAAA,AAAA,mFAAA,qDAAA,wGAAA,lTAAM,qDAAA,rDAACuC,gDAAKvC,smBAGuD,uBAAA,tBAAK,AAACN,eAAKT;;AAKjF;;;;4BAAA,5BAAMuD,gEAGHC,MAAMC,wBAAkBzD,MAAM0D,YAAYC;AAH7C,AAIE,IAAMX,cAAY,+CAAA,AAAAnD,yQAAA,mFAAA,kEAAA,7cAACI,+DAAQ,sDAAA,mFAAA,zIAACF;IACtB6D,aAAW,AAACnD,eAAKT;YADvB,AAAAH,RAEMZ,wBAAO,sDAAA,mFAAA,zIAACc;IACR8D,YAAW,AAAC3C,4CACA,WAAKH;AAAL,AACE,iqBAAA,mHAAA,2DAAA,qEAAA,gFAAA,gIAAA,7lCAAC+C,qDACA,oHAAA,2CAAA,uDAAA,qBAAA,kEAAA,3SAAI,kDAAA,lDAAC3E,6CAAE4B,mRAGL,6EAAA,mFAAA,uDAAA,vNAACgD,sBAAY,AAACC,gCAAoB/E,MAAM2E,WAAW7C,kRAE9C6C,mHACD7C,8DACE2C,gFACKV,gEACR,YAAA,XAAKY,2DAAe7C,wEAClB9B;GACV,kBAAIwE,yBAAkBD,MAAM,+CAAA,WAAAS,1DAACC;AAAD,AAAS,oDAAA,8DAAAD,3GAAC9E;GAAeqE;AAjBvE,AAAA,0FAAA,iDAAA,sGAAA,sGAAA,2CAAA,gDAAA,KAAA,kDAAA,YAAA,mFAAA,iDAAA,2CAAA,uDAAA,2CAAA,wEAAA,qBAAA,roBAwBI7F,sGACCF,wjBAMA,AAACgF,oDACA,WAAK0B,EAAEC;AAAP,AAAA,0FAAA,mDAAA,2CAAA,oDACcD,upBACNC,xEACA,AAAClD,4CAAI2B,jnBACL,6CAAA,mFAAA,hIAAC7B,+KAASqD,0DAAe,uGAAA,2CAAA,uDAAA,2CAAA,uDAAA,3SAACC,kUAA+BX;iKApCvE,sGAAA,2CAAA,gDAAA,KAAA,kDAAA,mEAAA,zdAqCM,qDAAA,rDAACY,uHAA0B,AAACC,kBAAQX,wGACrCpG,iLACA,AAACoF,4BAAa,AAAC4B,eAAKZ,+FACnBT,+BAAgBQ,WAAWF,YAAYV;;AAK/C;;;0BAAA,kCAAA0B,5DAAME;AAAN,AAAA,IAAAD,aAAAD;IAAAC,iBAAA,AAAAnF,4BAAAmF;YAAA,AAAAlF,4CAAAkF,eAAA,nEAEqB3E;aAFrB,AAAAP,4CAAAkF,eAAA,pEAE2BxD;eAF3B,AAAA1B,4CAAAkF,eAAA,tEAEkCE;YAFlC,AAAApF,4CAAAkF,eAAA,nEAE2CG;YAF3C,AAAArF,4CAAAkF,eAAA,nEAEiDI;YAFjD,AAAAtF,4CAAAkF,eAAA,nEAEuDnB;AAFvD,AAAA,0FAAA,kGAAA,2CAAA,uDAAA,2CAAA,sEAAA,qEAAA,sEAAA,KAAA,iEAAA,kCAAA,mFAAA,uGAAA,2CAAA,uDAAA,2CAAA,0DAAA,OAAA,wEAAA,SAAA,4EAAA,eAAA,mEAAA,qBAAA,mFAAA,wGAAA,2CAAA,uDAAA,2CAAA,gEAAA,0BAAA,mFAAA,gDAAA,2CAAA,qDAAA,IAAA,6DAAA,30DAGMwB,gQAA4BD,qEAAiBA,sTAC5CE,4oBAICC;AARR,AAcqB,8BAAA,mFAAA,iGAAA,gHAAA,2CAAA,4DAAA,gEAAA,leAAC/B,4ZACWnD,+DACCmB,6DACF,AAAC9B,gBAAMmE;oCAjBvC,mHAAA,mBAAA,2CAAA,4DAAA,tQAkBMqB,4GACDtB,0BAAWC,YAAYxD,MAAMmB;;AAGlC;;;4BAAA,oCAAAgE,hEAAME;AAAN,AAAA,IAAAD,aAAAD;IAAAC,iBAAA,AAAA5F,4BAAA4F;eAAA,AAAA3F,4CAAA2F,eAAA,tEAEWP;YAFX,AAAApF,4CAAA2F,eAAA,nEAEoBN;YAFpB,AAAArF,4CAAA2F,eAAA,nEAE0BpF;aAF1B,AAAAP,4CAAA2F,eAAA,pEAEgCjE;YAFhC,AAAA1B,4CAAA2F,eAAA,nEAEuC5B;AAFvC,AAAA,0FAAA,4GAAA,2CAAA,yDAAA,KAAA,6DAAA,nOAKM8B;AALN,AAOoC,8BAAA,mFAAA,iGAAA,gHAAA,2CAAA,4DAAA,gEAAA,leAACnC,4ZACqBnD,+DACCmB,6DACF,AAAC9B,gBAAMmE;WAC7DqB;;AAEH,AAAA;;;sBAAA,8BAAAvG,pDAAMiH;AAAN,AAAA,IAAA1D,qBAAA;AAAA,AAAA,IAAAC,0BAAA,AAAA;AAAA,AAAA,IAAAC,wBAAA;;AAAA,AAAA,GAAA,CAAAA,wBAAAD;AAAA,AAAA,AAAAD,wBAAA,CAAA,UAAAE;;AAAA,eAAA,CAAAA,wBAAA;;;;AAAA;;;;AAAA,IAAAC,uBAAA,EAAA,CAAA,MAAA,AAAAH,4BAAA,AAAA,KAAAI,qBAAA,AAAAJ,yBAAA,KAAA,IAAA,OAAA;AAAA,AAAA,OAAA0D,yDAAA,CAAA,UAAA,MAAAvD;;;AAAA,AAAA,CAAA,2DAAA,3DAAMuD,sEAEFhD,MAAQC;AAFZ,AAAA,mHAAA,2CAAA,oDAAA,IAAA,wDAAA,KAAA,uDAAA,2CAAA,gEAAA,qBAAA,4EAAA,YAAA,gEAAA,OAAA,sEAAA,qBAAA,sGAAA,sGAAA,mFAAA,kDAAA,2CAAA,uDAAA,2CAAA,gEAAA,KAAA,gEAAA,7sCAGIlF,6rBAMCK,sGACCF,gcACgD8E,cAChD,6CAAA,mFAAA,hIAACvB,yLAAW,AAACyB,oDAAY,WAAK/D,EAAEgE;AAAP,AAAoBA;GAAGF;;;AAZtD,CAAA,8CAAA,9CAAM+C;;AAAN;AAAA,CAAA,wCAAA,WAAAC,nDAAMD;AAAN,AAAA,IAAAE,WAAA,AAAApG,gBAAAmG;IAAAA,eAAA,AAAAnD,eAAAmD;AAAA,AAAA,IAAAlD,qBAAA;AAAA,AAAA,OAAAA,wDAAAmD,SAAAD;;;AAAA,AAcA,AAAA;;;gCAAA,wCAAAlH,xEAAMoH;AAAN,AAAA,IAAA7D,qBAAA;AAAA,AAAA,IAAAC,0BAAA,AAAA;AAAA,AAAA,IAAAC,wBAAA;;AAAA,AAAA,GAAA,CAAAA,wBAAAD;AAAA,AAAA,AAAAD,wBAAA,CAAA,UAAAE;;AAAA,eAAA,CAAAA,wBAAA;;;;AAAA;;;;AAAA,IAAAC,uBAAA,EAAA,CAAA,MAAA,AAAAH,4BAAA,AAAA,KAAAI,qBAAA,AAAAJ,yBAAA,KAAA,IAAA,OAAA;AAAA,AAAA,OAAA6D,mEAAA,CAAA,UAAA,MAAA,CAAA,UAAA,MAAA1D;;;AAAA,AAAA,CAAA,qEAAA,rEAAM0D,gFAEFI,WAAWvD,MAAQC;AAFvB,AAAA,mHAAA,2CAAA,oDAAA,IAAA,wDAAA,KAAA,uDAAA,2CAAA,gEAAA,qBAAA,4EAAA,YAAA,gEAAA,OAAA,sEAAA,qBAAA,sGAAA,iHAAA,mFAAA,kDAAA,2CAAA,uDAAA,2CAAA,gEAAA,KAAA,gEAAA,xtCAGIlF,6rBAMCK,sGACCF,mBACAqI,wbACgDvD,cAChD,6CAAA,mFAAA,hIAACvB,yLAAW,AAACyB,oDAAY,WAAK/D,EAAEgE;AAAP,AAAoBA;GAAGF;;;AAbtD,CAAA,wDAAA,xDAAMkD;;AAAN;AAAA,CAAA,kDAAA,WAAAC,7DAAMD;AAAN,AAAA,IAAAE,WAAA,AAAAvG,gBAAAsG;IAAAA,eAAA,AAAAtD,eAAAsD;IAAAE,WAAA,AAAAxG,gBAAAsG;IAAAA,eAAA,AAAAtD,eAAAsD;AAAA,AAAA,IAAArD,qBAAA;AAAA,AAAA,OAAAA,wDAAAsD,SAAAC,SAAAF;;;AAAA,AAcA;;;8BAAA,9BAAKI;AAKL;;;6BAAA,7BAAMC,kEAEHC,QAAQrH;AAFX,AAAA,0FAOGyG,0BAAWzG;;AAEd;;;kCAAA,lCAAMsH,4EAEHC;AAFH,AAGE,oBAAIA;AAAJ,0FAAA,+CACMC;;AADN,0FAAA,+CAEMC;;;AAER,AAAA;;;2BAAA,mCAAA/H,9DAAMiI;AAAN,AAAA,IAAAD,WAAA,AAAA;AAAA,AAAA,QAAAA;KAAA;AAAA,OAAAC,uDAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,uDAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;;AAAA,MAAA,KAAA9H,MAAA,CAAA,8DAAA,AAAA;;;;;AAAA,CAAA,yDAAA,zDAAM8H,oEAEFC;AAFJ,AAGG,8DAAA,vDAACC,4DAAcD;;;AAHlB,CAAA,yDAAA,zDAAMD,oEAIFG,MAAMF;AAJV,AAAA,0FAAA,qDAKU,8CAAA,2CAAA,8HAAA,2DAAA,kEAAA,eAAA,nWAAC1C,iJAAc,CAAA,qDAAc0C,sEACdA,6IAEDE;;;AARxB,CAAA,mDAAA,nDAAMH;;AAAN,AAWA;;;mCAAA,nCAAMI,8EAEH5D;AAFH,AAAA,0FAAA,iGAAA,2CAAA,uDAAA,2CAAA,0DAAA,OAAA,mEAAA,SAAA,sEAAA,qBAAA,mFAAA,iGAAA,2CAAA,uDAAA,2CAAA,0DAAA,OAAA,4EAAA,2BAAA,mFAAA,wGAAA,2CAAA,uDAAA,2CAAA,mEAAA,OAAA,iEAAA,QAAA,sEAAA,KAAA,mEAAA,0CAAA,mFAAA,tnDAGMnF,yiBACCF,yeACCkJ,2fACH7D,wJACErF,kDACH,wCAAA,2CAAA,oDAAA,qEAAA,5MAACoJ,wQAC2B;AAAA,AAAA,OAAAjH,gBAAQ,sDAAA,mFAAA,zIAACE;GADrC,4EAAA,qFAAA,mDAAA,KAAA,+DAAA,WAAA8G,jPAEwB,qBAAA,rBAACE,2EACD,AAACA,qBAAW,CAAA,QAAA;AAHpC,AAK+B,8BAAA,mFAAA,gGAAAF,1MAAC1D;;;AAEpC;;;uCAAA,vCAAM6D,sFAEHjE;AAFH,AAAA,0FAAA,kGAAA,2CAAA,uDAAA,2CAAA,yDAAA,kBAAA,2DAAA,kCAAA,mFAAA,wGAAA,2CAAA,6DAAA,3oBAGMkE,0eAECC;AALP,AAKiC,8BAAA,mFAAA,1GAAC/D;GALlC,uDAAA,2CAAA,yDAAA,kBAAA,2DAAA,oBAAA,uDAAA,OAAA,4EAAA,uBAAA,mFAAA,wGAAA,2CAAA,yDAAA,KAAA,qDAAA,WAAA,+DAAA,KAAA,0DAAA,AAAAtD,6RAAA,mFAAA,htBAUQsH,gXAIyB,sDAAA,mFAAA,zIAACpH,+YAC1B6G,yDACH7D","names":["cljs.core/enable-console-print!","transplants.ui/container","reagent.core/adapt-react-class","js/module$node_modules$react_bootstrap$cjs$index.Container","transplants.ui/col","js/module$node_modules$react_bootstrap$cjs$index.Col","transplants.ui/row","js/module$node_modules$react_bootstrap$cjs$index.Row","transplants.ui/button","js/module$node_modules$react_bootstrap$cjs$index.Button","transplants.ui/tabs","js/module$node_modules$react_bootstrap$cjs$index.Tabs","transplants.ui/tab","js/module$node_modules$react_bootstrap$cjs$index.Tab","transplants.ui/svg-styles","styles","cljs.core.dissoc","var_args","G__81891","transplants.ui/href","js/Error","k","transplants.ui.href","params","query","reitit.frontend.easy.href","transplants.ui/loading","transplants.ui/get-single-organ","mdata","organ-order","cljs.core._EQ_","cljs.core/count","cljs.core/first","p__81892","map__81893","cljs.core/--destructure-map","cljs.core.get","transplants.ui/navbar","home-url","logo","cljs.core/deref","route","re_frame.core.subscribe","organ","cljs.core.get_in","single-organ","organ-centres","temp__5751__auto__","or__4253__auto__","js/module$node_modules$react_bootstrap$cjs$index.Navbar","js/module$node_modules$react_bootstrap$cjs$index.Navbar.Brand","js/module$node_modules$react_bootstrap$cjs$index.Nav.Link","cljs.core/name","js/module$node_modules$react_bootstrap$cjs$index.Navbar.Toggle","js/module$node_modules$react_bootstrap$cjs$index.Navbar.Collapse","js/module$node_modules$react_bootstrap$cjs$index.Nav","temp__5753__auto__","centres","tool","cljs.core.into","js/module$node_modules$react_bootstrap$cjs$index.NavDropdown","cljs.core.map","centre","js/module$node_modules$react_bootstrap$cjs$index.NavDropdown.Item","transplants.ui/footer","p__81894","map__81895","transplants.ui/root-component","router","subscribe-current-route","current-route","transplants.bsio/modal","args__4870__auto__","len__4864__auto__","i__4865__auto__","argseq__4871__auto__","cljs.core/IndexedSeq","transplants.ui/card-page","seq81896","G__81897","cljs.core/next","self__4851__auto__","title","children","cljs.core.map_indexed","c","p__81898","map__81899","transplants.ui/tool-buttons","key","label","active-tool","button-type","active","re-frame.core/dispatch","transplants.ui/background-link","_centre","cljs.core.not_EQ_","transplants.ui/tools-menu","tools","include-guidance?","centre-name","orientation","organ-name","menu-data","cljs.core.assoc","cljs.core/select-keys","transplants.utils/get-tool-meta","p1__81900#","cljs.core.remove","i","group","js/module$node_modules$react_bootstrap$cjs$index.ButtonGroup","cljs.core.merge","cljs.core.partition_by","cljs.core/butlast","cljs.core/last","p__81901","map__81902","transplants.ui/nav-card","hospital","_link","width","js/module$node_modules$react_bootstrap$cjs$index.Card","js/module$node_modules$react_bootstrap$cjs$index.Card.Body","js/module$node_modules$react_bootstrap$cjs$index.Card.Title","p__81903","map__81904","transplants.ui/phone-card","js/module$node_modules$react_bootstrap$cjs$index.ListGroup.Item","transplants.ui/page","seq81905","G__81906","transplants.ui/decorated-page","seq81907","G__81908","G__81909","decoration","transplants.ui/mobile-break","transplants.ui/centre-card","_mobile","transplants.ui/centre-card-deck","mobile","js/module$node_modules$react_bootstrap$cjs$index.ListGroup","js/module$node_modules$react_bootstrap$cjs$index.CardDeck","G__81911","transplants.ui/open-icon","name","transplants.ui.open_icon","style","transplants.ui/test-day-selector","js/module$node_modules$react_bootstrap$cjs$index.Form.Label","p1__81912#","transplants.numeric-input/numeric-input","cljs.core/constantly","transplants.ui/randomise-query-panel","js/module$node_modules$react_bootstrap$cjs$index.Form","js/module$node_modules$react_bootstrap$cjs$index.Form.Group","js/module$node_modules$react_bootstrap$cjs$index.Form.Check"],"sourcesContent":["(ns transplants.ui\n  \"This should become the high level ui interface and should have all ns references factored out into \nthe low level ui.\"\n  (:require [clojure.string :refer [capitalize]]\n            [reagent.core :as rc]\n            [reitit.frontend.easy :as rfe]\n            [\"react-bootstrap\" :as bs]\n            [re-frame.core :as rf]\n            [transplants.events :as events]\n            [transplants.utils :as utils]\n            [transplants.subs :as subs]\n            [transplants.numeric-input :as ni]\n            [transplants.bsio :as bsio]\n            ;[shadow.debug :refer [?-> ?->> locals]]\n            ))\n\n(enable-console-print!)\n\n(def container \"a react/bootstrap component adapter\" (rc/adapt-react-class bs/Container))\n(def col \"a react/bootstrap component adapter\" (rc/adapt-react-class bs/Col))\n(def row \"a react/bootstrap component adapter\" (rc/adapt-react-class bs/Row))\n(def button \"a react/bootstrap component adapter\" (rc/adapt-react-class bs/Button))\n(def tabs \"a react/bootstrap component adapter\" (rc/adapt-react-class bs/Tabs))\n(def tab \"a react/bootstrap component adapter\" (rc/adapt-react-class bs/Tab))\n\n(defn svg-styles\n  \"Remove information that should not appear on a DOM element\n   from a styles map.\"\n  [styles]\n  (-> styles\n      (dissoc :label-fill)\n      (dissoc :background-color)\n      (dissoc :color)\n      (dissoc :long-label)))\n\n(defn href\n  \"Return relative url for given route. Url can be used in HTML links. Note that k is a route name defined \nin the routes table.\"\n  ([k]\n   (href k nil nil))\n  ([k params]\n   (href k params nil))\n  ([k params query]\n   (rfe/href k params query)))\n\n(comment\n  (href :transplants.views/organ {:organ \"kidney\"})\n  )\n\n(defn loading\n  \"The page is loading\"\n  []\n  [:div {:style {:display \"flex\" :flex-direction \"column\" :justify-content \"space-around\"}}\n   [:h1 \"Loading\"]]\n  )\n\n(defn get-single-organ\n  \"extract the single organ or if not single then nil from metadata\"\n  [mdata]\n  (let [organ-order (:organ-order mdata)]\n    (if (= (count organ-order) 1)\n      (first organ-order)\n      nil)))\n\n(defn navbar\n  \"Straight out of the react-bootstrap example with reitit routing patched in.\"\n  [{:keys [home-url logo]}]\n  (let [route @(rf/subscribe [::subs/current-route])\n        organ (get-in route [:path-params :organ]) ; this is nil until it has been selected\n        mdata  @(rf/subscribe [::subs/mdata])\n\n        ; organ-order gives us the list of configured organ tools, in-order. In development we may have more than one organ,\n        ; but in production each site will have only a single organ. \n        single-organ (get-single-organ mdata)\n        organ-centres @(rf/subscribe [::subs/organ-centres])\n        ]\n    (if-let [organ (or single-organ organ)] ; guard in case mdata has not been loaded\n      [:> bs/Navbar {:bg \"light\" :expand \"md\" #_#_:fixed \"top\"\n                     :style {:border-bottom \"1px solid black\" :opacity \"1\"}}\n       [:> bs/Navbar.Brand  {:href home-url} [:img {:src logo :style {:height 40} :alt \"Winton Centre\"}]]\n     ; Site name below \n       [:> bs/Nav.Link {:style {:font-size \"1em\"}\n                        :organ (name organ)\n                        :href (href :transplants.views/organ {:organ (name organ)})}\n        [:div {:style {:font-size \"2em\"}}\n         (if single-organ\n           (str (get-in mdata [single-organ :label]) \" Tool\")\n           \"Development Site\")]]\n       [:> bs/Navbar.Toggle {:aria-controls \"basic-navbar-nav\"}]\n       [:> bs/Navbar.Collapse {:id \"basic-navbar-nav\" :style {:margin-left 70}}\n\n        [:> bs/Nav {:active-key (if organ (name organ) \"home\")\n                 ;:class \"mr-auto\" :style {:height \"100%\" :vertical-align \"middle\"}\n                    }\n         [:> bs/Nav.Link {:style {:font-size \"1.4em\"}\n                          :event-key :home\n                          :href (href :transplants.views/home)} \"Home\"]\n         [:> bs/Nav.Link {:style {:font-size \"1.4em\"}\n                          :event-key :about\n                          :href (href :transplants.views/about)} \"About\"]\n         [:> bs/Nav.Link {:style {:font-size \"1.4em\"}\n                          :event-key :legal\n                          :href (href :transplants.views/legal)} \"Legal\"]\n         [:> bs/Nav.Link {:style {:font-size \"1.4em\"}\n                          :event-key :pubs\n                          :href (href :transplants.views/pubs)} \"Publications\"]\n         [:> bs/Nav.Link {:style {:font-size \"1.4em\"}\n                          :event-key :tech\n                          :href (href :transplants.views/tech)} \"Technical\"]\n         (when organ-centres\n           (when-let [centres (organ organ-centres)]\n             (let [tool (get-in @(rf/subscribe [::subs/current-route]) [:path-params :tool])]\n               (into [:> bs/NavDropdown {:style {:font-size \"1.4em\"}\n                                         :title \"Transplant Centres\" :id \"basic-nav-dropdown\"}]\n                     (map (fn [centre]\n                            [:> bs/NavDropdown.Item\n                             {:href (if tool\n                                      (href :transplants.views/organ-centre-tool\n                                            {:organ (name single-organ)\n                                             :centre (name (:key centre))\n                                             :tool (name tool)})\n                                      (href :transplants.views/organ-centre-tool\n                                            {:organ (name single-organ)\n                                             :centre (name (:key centre))\n                                             :tool \"waiting\"}))\n                              :key (name (:key centre))}\n\n                             (:name centre)])\n                          centres)))))]]]\n      [loading])))\n\n(comment \n  (keys @(rf/subscribe [::subs/organ-centres]))\n  @(rf/subscribe [::subs/organ-centre])\n  (transplants.ui/href :transplants.views/organ-centres {:organ (name :kidney)\n                                         :centre \"card\"})\n  )\n\n(defn footer\n  \"Site footer. \n   todo: Needs to be made configurable.\"\n  []\n  [:div.footer {:style {:width \"100%\" :height \"80px\" :background-color \"black\" :color \"white\"\n                :align-items \"center\" :justify-content \"center\"}}\n   [:div {:style {:margin \"20px\" :display \"flex\" :flex-direction \"row\" :align-items \"center\"}}\n    [:img {:src \"assets/crest.png\" :style {:height 40 :margin-right 20} :alt \"University of Cambridge Crest\"}] \n    \"Winton Centre\"]])\n\n(defn root-component\n  \"The root of the component tree which is mounted on the main app html element\"\n  [{:keys [router subscribe-current-route]}]\n  (let [current-route @(subscribe-current-route)]\n    [:div {:style {:display :flex :flex-direction \"column-reverse\"}}\n     (when current-route\n       [:div {:style {:margin-top \"0px\" :padding-top 0}}\n        [(-> current-route :data :view)]\n        [footer]])\n     [navbar {:router router\n              :current-route current-route\n              :home-url \"/\" ;\"https://lung-transplants.wintoncentre.uk\"\n              :logo \"/assets/crest.png\"\n              :tool-name \"Lung Transplants\"}]\n     (bsio/modal #(rf/subscribe [::subs/modal-data]))\n     ]))\n\n(defn card-page\n  \"Render an array of cards\"\n  [title & children]\n  [container {:key 1 :style {:margin-top 40;\n                             :min-height \"calc(100vh - 144px\"}}  \n   [row\n    [col\n     (if (> @(rf/subscribe [:transplants.subs/window-width]) 441)\n       [:h2 {:style {:color \"#355\" :margin-bottom 30}} title]\n       [:h5 {:style {:color \"#355\" :margin-bottom 20}} title])\n     (into [:<>] (map-indexed (fn [k c] ^{:key k} c) children))]]])\n\n(defn tool-buttons\n  \"Create buttons for each transplant tool\"\n  [{:keys [key label organ centre tool active-tool button-type]}]\n  ;(?-> tb-params ::tool-buttons)\n  ;(?-> tool ::tool-buttons)\n  ;(?-> button-colour ::tool-buttons)\n  ;(?-> button-type ::button-type)\n  (let [active (= (name tool) active-tool)]\n    [button {:id (str (name organ) \"-\" (name centre) \"-\" (name key))\n             :variant (if active button-type (str \"outline-\" button-type))\n             :style {:margin-bottom 2\n                     :margin-right 0}\n             :active active\n             :key key\n             :on-click #(rf/dispatch [::events/navigate :transplants.views/organ-centre-tool\n                                      {:organ organ\n                                       :centre centre\n                                       :tool tool}])}\n     label]))\n\n(defn background-link\n  \"Tool menu prefix rubric.\"\n  [organ _centre tool]\n  [:p\n   (when (not= tool \"guidance\")\n     [:span\n      \"For more information that will be helpful to patients, follow the link to useful information.\"])\n   \" There is also a \" [:a.centre-header-link {:target \"_blank\" :href (str (name organ) \".pdf\")} \"PDF download\"]\n   \" which explains the technical details of the tool.\"])\n\n\n\n(defn tools-menu\n  \"Render a group of tool selection buttons.\n   tools is a vector of tool keys offered for this organ\"\n  [tools include-guidance? organ centre-name orientation]\n  (let [active-tool (get-in @(rf/subscribe [::subs/current-route]) [:path-params :tool])\n        organ-name (name organ)\n        mdata @(rf/subscribe [::subs/mdata])\n        menu-data  (map\n                    (fn [tool]\n                      (assoc\n                       (if (= tool :guidance)\n                         {:label \"Useful information\"\n                          :button-type \"usefulinfo\"}\n                         (select-keys (utils/get-tool-meta mdata organ-name tool)\n                                      [:label :button-type]))\n                       :organ organ-name\n                       :tool tool\n                       :centre centre-name\n                       :active-tool active-tool\n                       :key (str organ-name \"-\" tool)\n                       :mdata mdata))\n                    (if include-guidance? tools (remove #(= :guidance %) tools)))\n        ]\n    ;(?-> active-tool ::active-tool)\n    ;(?-> tools ::tools-menu)\n    ;(?-> menu-data ::menu-data)\n    ;TODO: configure this filter!\n    [:<> \n     [row\n      [col {:xs 12 :sm 8}\n       [:h3 {:style {:padding-right 20}} \"Choose a tool:\"]\n\n    ;; :todo; There'll be a better CSS solution to keeping this on screen for both desktop and mobile\n    ;; Even better would be to configure the break points as what makes sense will be very application\n    ;; specific.\n       (map-indexed\n        (fn [i group]\n          [:div {:key i}\n           (->> group\n                (map tool-buttons)\n                (into [:> bs/ButtonGroup (merge {:style {:width \"auto\"}} orientation)]))])\n        (partition-by :button-type (butlast menu-data)))]\n      [col {:xs 12 :sm 4}\n       (tool-buttons (last menu-data))\n       [background-link organ-name centre-name active-tool]\n       ]]]))\n\n\n\n(defn nav-card\n  \"Render a desktop compatible card containing hospital-local links to tools\"\n  [{:keys [#_img-src organ centre hospital _link width tools]}]\n  [:> bs/Card {:style {:max-width width :min-width width :margin-bottom 10 :box-shadow \"1px 1px #888888\"}}\n   [:> bs/Card.Body {:style {:display \"flex\"\n                             :flex-direction \"column\"\n                             :justify-content \"space-around\"\n                             :padding-top 20}}\n    [:> bs/Card.Title {:style {:font-size \"1.2 rem\"}}\n     ;;\n     ;; Note that clicking on a title now routes you to the first tool rather than to an\n     ;; organ/centre home page.\n     ;;\n     [:a {:href \"#\" #_(apply rfe/href link) ; Disable link to an organ/centre home page\n          :on-click #(rf/dispatch [::events/navigate :transplants.views/organ-centre-tool\n                         {:organ organ\n                          :centre centre\n                          :tool (first tools)}])} \n      hospital]]\n    [tools-menu tools false organ centre {:vertical true}]\n    ]])\n\n(defn phone-card\n  \"Render a mobile compatible card - actually a list item - containing hospital-local links to tools\"\n  [{:keys [hospital _link organ centre tools]}]\n  \n  ;(println ::phone \"PHONE!!!\")\n  [:> bs/ListGroup.Item {:action true\n                         ;:href (apply rfe/href link)\n                         :on-click #(rf/dispatch [::events/navigate :transplants.views/organ-centre-tool\n                                                  {:organ organ\n                                                   :centre centre\n                                                   :tool (first tools)}])}\n   hospital])\n\n(defn page\n  \"A generic page component, rendering a title and the page's children\"\n  ([title & children]\n   [container {:key 1\n               :fluid \"xl\"\n               :style {:min-height \"calc(100vh - 165px\"\n                       :background-color \"#ffffffbb\"\n                       :max-width 2000 ;todo: adjust for side margins\n                       :margin-bottom 20}}\n    [row\n     [col\n      [:h1 {:style {:margin-top 20 :font-size \"2em\"}} title]\n      (into [:<>] (map-indexed (fn [k c] ^{:key k} c) children))]]]))\n\n(defn decorated-page\n  \"A generic page component, rendering a title and the page's children\"\n  ([decoration title & children]\n   [container {:key 1\n               :fluid \"xl\"\n               :style {:min-height \"calc(100vh - 165px\"\n                       :background-color \"#ffffffbb\"\n                       :max-width 2000 ;todo: adjust for side margins\n                       :margin-bottom 20}}\n    [row\n     [col\n      decoration\n      [:h1 {:style {:margin-top 20 :font-size \"2em\"}} title]\n      (into [:<>] (map-indexed (fn [k c] ^{:key k} c) children))]]]))\n(def mobile-break\n  \"Screens of this size or smaller are rendered with mobile oriented views.\"\n  1200 ;800\n  )\n\n(defn centre-card\n  \"A single card describing a centre\"\n  [_mobile params]\n  #_(if mobile\n    [phone-card params]\n    [nav-card params])\n  ; Always use phone format\n  [phone-card params])\n\n(defn centre-card-deck\n  \"A card deck where the cards are simple list items in mobile view, but true cards in desktop view.\"\n  [mobile]\n  (if mobile\n    [:> bs/ListGroup]\n    [:> bs/CardDeck]))\n\n(defn open-icon\n  \"wrapper for access open-icon access\"\n  ([name]\n   (open-icon nil name))\n  ([style name]\n   [:span (assoc {:class (str \"oi oi-\" name)\n                  :title name\n                  :aria-hidden \"true\"}\n                 :style style)]))\n\n; radio buttons allow fast selection between options\n(defn test-day-selector\n  \"Used to select a test day to display\"\n  [label]\n  [:> bs/Row {:style {:display \"flex\" :align-items  \"center\" :margin-bottom 20}}\n   [:> bs/Col {:style {:display \"flex\" :justify-content \"flex-end\"}}\n    [:> bs/Form.Label {:style {:font-weight \"bold\" :text-align \"right\" :margin-bottom 20 :line-height 1.2}}\n     label]]\n   [:> bs/Col\n    (ni/numeric-input {:key :test/day-input ; creates id=\"test-day-input\" on input element\n                       :value-f (fn [] @(rf/subscribe [::subs/test-day]))\n                       :min (constantly 0)\n                       :max (constantly (* 365 5))\n                       :dps -1\n                       :on-change #(rf/dispatch [::events/test-day %])})]])\n\n(defn randomise-query-panel\n  \"A simple checkbox asking whether an icon array should be randomised or ordered.\"\n  [label]\n  [:> bs/Form {:style {:margin \"0px 0px 0px 0px\"\n                       :padding \"0px 0px 0px 0px\"}}\n   [:> bs/Form.Group {:on-click #(rf/dispatch [::events/randomise-icons])\n                      :style {:margin \"0px 0px 0px 0px\"\n                              :padding \"10px 0px 0px 10px\"\n                              :color \"#000\"\n                              :background-color \"#CCC\"}}\n    [:> bs/Form.Check {:inline true\n                       :type \"checkbox\"\n                       ;:on-change identity\n                       :read-only true\n                       :checked @(rf/subscribe [::subs/randomise-icons])}]\n    [:> bs/Form.Label \n     label]]])\n\n"]}