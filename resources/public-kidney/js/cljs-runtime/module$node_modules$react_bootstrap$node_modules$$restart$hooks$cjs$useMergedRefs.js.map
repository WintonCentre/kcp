{
"version":3,
"file":"module$node_modules$react_bootstrap$node_modules$$restart$hooks$cjs$useMergedRefs.js",
"lineCount":2,
"mappings":"AAAAA,cAAA,CAAA,iFAAA,CAAsG,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAe9IC,QAASA,UAAS,CAACC,IAAD,CAAOC,IAAP,CAAa,CAC7B,IAAIC,EAAIC,OAAA,CAAQH,IAAR,CAAR,CACII,EAAID,OAAA,CAAQF,IAAR,CACR,OAAO,SAAS,CAACI,KAAD,CAAQ,CAClBH,CAAJ,EAAOA,CAAA,CAAEG,KAAF,CACHD,EAAJ,EAAOA,CAAA,CAAEC,KAAF,CAFe,CAHK,CAZ/BP,OAAQQ,CAAAA,UAAR,CAAqB,CAAA,CACrBR,QAAQC,CAAAA,SAAR,CAAoBA,SACpBD,QAAQS,CAAAA,OAAR,CAAkB,IAAK,EAEvB,KAAIC,OAASZ,OAAA,CAAQ,iCAAR,CAAb,CAEIO,QAAUA,QAAgB,CAACM,GAAD,CAAM,CAClC,MAAQA,IAAD,EAAuB,UAAvB,GAAQ,MAAOA,IAAf,CAA0C,QAAS,CAACJ,KAAD,CAAQ,CAChEI,GAAIC,CAAAA,OAAJ,CAAcL,KADkD,CAA3D,CAAoCI,GADT,CAuCpCX,QAAQS,CAAAA,OAAR,CAPAI,QAAsB,CAACX,IAAD;AAAOC,IAAP,CAAa,CACjC,MAAO,GAAIO,MAAOI,CAAAA,OAAX,EAAoB,QAAS,EAAG,CACrC,MAAOb,UAAA,CAAUC,IAAV,CAAgBC,IAAhB,CAD8B,CAAhC,CAEJ,CAACD,IAAD,CAAOC,IAAP,CAFI,CAD0B,CAzC2G;",
"sources":["node_modules/react-bootstrap/node_modules/@restart/hooks/cjs/useMergedRefs.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$react_bootstrap$node_modules$$restart$hooks$cjs$useMergedRefs\"] = function(global,require,module,exports) {\n\"use strict\";\n\nexports.__esModule = true;\nexports.mergeRefs = mergeRefs;\nexports.default = void 0;\n\nvar _react = require(\"react\");\n\nvar toFnRef = function toFnRef(ref) {\n  return !ref || typeof ref === 'function' ? ref : function (value) {\n    ref.current = value;\n  };\n};\n\nfunction mergeRefs(refA, refB) {\n  var a = toFnRef(refA);\n  var b = toFnRef(refB);\n  return function (value) {\n    if (a) a(value);\n    if (b) b(value);\n  };\n}\n/**\n * Create and returns a single callback ref composed from two other Refs.\n *\n * ```tsx\n * const Button = React.forwardRef((props, ref) => {\n *   const [element, attachRef] = useCallbackRef<HTMLButtonElement>();\n *   const mergedRef = useMergedRefs(ref, attachRef);\n *\n *   return <button ref={mergedRef} {...props}/>\n * })\n * ```\n *\n * @param refA A Callback or mutable Ref\n * @param refB A Callback or mutable Ref\n * @category refs\n */\n\n\nfunction useMergedRefs(refA, refB) {\n  return (0, _react.useMemo)(function () {\n    return mergeRefs(refA, refB);\n  }, [refA, refB]);\n}\n\nvar _default = useMergedRefs;\nexports.default = _default;\n};"],
"names":["shadow$provide","global","require","module","exports","mergeRefs","refA","refB","a","toFnRef","b","value","__esModule","default","_react","ref","current","useMergedRefs","useMemo"]
}
