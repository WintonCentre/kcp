{"version":3,"sources":["transplants/bundles.cljs"],"mappings":";AAWA;;;sCAAA,tCAAMC;AAAN,AAAA,OAAAD,gBAGG,sDAAA,mFAAA,zIAACE;;AAIJ;;;;iCAAA,jCAAMC,0EAGHC,MAAMC,OAAOC;AAHhB,sDAIM,AAACL,tDACD,4FAAA,rFAACM,wKAAQH,MAAMC,OAAOC;;AAG5B;;;;;;;;;;;4BAAA,5BAAME,gEAUHC,WAAWC;AAVd,AAWE,IAAMC,oBAEQ,+CAAA,WAAAC,1DAACC,fACD,AAACC;AADD,AAAS,QAAI,AAAA,oFAAAF,qBAAUF;yGAFvBD,tGACA,AAAA;AADd,AAIE,oBAAI,iBAAAM,oBAAKJ;AAAL,AAAA,oBAAAI;AAAQ,kGAAA,1FAAM,AAAA,oFAAOJ;;AAArBI;;;AACFJ;;AACA,OAACK,gBAAM,AAAA,sGAAgBP;;;AAE7B","names":["cljs.core/deref","transplants.bundles/get-all-bundles","re_frame.core.subscribe","transplants.bundles/get-bundle","organ","centre","tool","cljs.core.get_in","transplants.bundles/cif-0","oct-bundle","day","rv","p1__67545#","cljs.core.filter","cljs.core/last","and__4251__auto__","cljs.core/first"],"sourcesContent":["(ns transplants.bundles\n  \"Bundles are collections of data indexed by the current organ, centre and tool selection.\n   They gather together and provide access to some constant data necessary to render a tool.\n\n   The waiting tool bundle assembles data from sheets waiting-baseline-cifs, \n   waiting-baseline-vars, and waiting-inputs.\n   \n   Bundles provide the configured data needed for the risk calculations.\"\n  (:require [re-frame.core :as rf]\n            [transplants.subs :as subs]))\n\n(defn get-all-bundles\n  \"Subscribe to the collection of bundles\"\n  []\n  @(rf/subscribe [::subs/bundles]))\n;; => #'transplants.bundles/get-all-bundles\n\n\n(defn get-bundle\n  \"Subscribe to the collection of bundles, and return one indexed by the given \n   organ, centre and tool\"\n  [organ centre tool]\n  (-> (get-all-bundles)\n      (get-in [organ centre tool]))\n  )\n\n(defn cif-0\n  \"Samples an oct-bundle's baseline-cifs for the required day. \n   Select the last baseline-cif which occurs on or before the target day.\n   \n   Returns the whole map for the selected day which will contain baseline-cifs\n   under keys prefixed with :cif-.\n   \n   If the selected day is less than the day of the first baseline, return the first baseline.\n   If it's more than the last, return the last baseline.\n   \"\n  [oct-bundle day]\n  (let [rv (->> oct-bundle\n                (:baseline-cifs)\n                (filter #(<= (:days %) day))\n                (last))]\n    (if (and rv (pos? (:days rv)))\n      rv\n      (first (:baseline-cifs oct-bundle)))))\n\n(comment\n  (get-bundle :lung :new :waiting)\n\n  (get-bundle :kidney :bris :survival)\n  (get-bundle :kidney :birm :survival)\n \n\n  (cif-0 {:baseline-cifs [{:days 0 :cif 23}\n                           {:days 3 :cif 23}\n                           {:days 10 :cif 23}\n                           {:days 20 :cif 23}\n                           {:days 100 :cif 23}]} 3)\n   ;; => {:days 3, :cif 23}\n\n\n  (cif-0 {:baseline-cifs [{:days 0 :cif 23}\n                           {:days 0 :cif 25}\n                           {:days 3 :cif 23}\n                           {:days 10 :cif 23}\n                           {:days 20 :cif 23}\n                           {:days 100 :cif 23}]} 0)\n    ;; => {:days 0, :cif 23}\n\n\n  (cif-0 {:baseline-cifs [{:days 0 :cif 23}\n                           {:days 3 :cif 23}\n                           {:days 10 :cif 23}\n                           {:days 20 :cif 23}\n                           {:days 100 :cif 23}]} 10)\n    ;; => {:days 10, :cif 23}\n\n\n  (cif-0 {:baseline-cifs [{:days 0 :cif 23}\n                           {:days 3 :cif 23}\n                           {:days 10 :cif 23}\n                           {:days 20 :cif 23}\n                           {:days 100 :cif 23}]} 15)\n    ;; => {:days 10, :cif 23}\n\n\n  (cif-0 {:baseline-cifs [{:days 0 :cif 23}\n                           {:days 3 :cif 23}\n                           {:days 10 :cif 23}\n                           {:days 20 :cif 23}\n                           {:days 100 :cif 23}]} 200)\n    ;; => {:days 100, :cif 23}\n  )"]}