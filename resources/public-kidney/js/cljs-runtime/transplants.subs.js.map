{"version":3,"sources":["transplants/subs.cljs"],"mappings":";AAYA,2DAAA,3DAACA,iNAA0B,WAAKC;AAAL,AAAS,OAAA,mGAAeA;;AAEnD,2DAAA,3DAACD,mNAA2B,WAAKC;AAAL,AAAS,OAAA,qGAAgBA;;AAErD,2DAAA,3DAACD,iMAAmB,WAAKC;AAAL,AAAS,OAAA,sFAAQA;;AAIrC,2DAAA,3DAACD,oNAA2B,WAAKC;AAAL,AAAS,yDAAA,mFAAA,rIAACC,+CAAOD;;AAE7C,2DAAA,3DAACD,wMAAsB,WAAKC;AAAL,AAAS,yDAAA,mFAAA,rIAACC,+CAAOD;;AAExC,2DAAA,3DAACD,0NAA8B,WAAKC;AAAL,AAAS,yDAAA,mFAAA,rIAACC,+CAAOD;;AAEhD,2DAAA,3DAACD,uNAA6B,WAAKC;AAAL,AAAS,yDAAA,mFAAA,rIAACC,+CAAOD;;AAE/C,2DAAA,3DAACD,kMAAmB,WAAKC;AAAL,AAAS,yDAAA,mFAAA,rIAACC,+CAAOD;;AAMrC,2DAAA,3DAACD,uMAAqB,WAAKC;AAAL,AAAS,yDAAA,mFAAA,rIAACC,+CAAOD;;AAIvC,2DAAA,3DAACD,sMAAoB,WAAKC;AAAL,AAAS,yDAAA,mFAAA,rIAACC,+CAAOD;;AAEtC,2DAAA,3DAACD,wMAAsB,WAAKC;AAAL,AAAS,yDAAA,mFAAA,rIAACC,+CAAOD;;AAExC,2DAAA,3DAACD,iNAA0B,WAAKC;AAAL,AAAS,yDAAA,mFAAA,rIAACC,+CAAOD;;AAE5C,2DAAA,3DAACD,kNAA0B,WAAKC;AAAL,AAAS,yDAAA,mFAAA,rIAACC,+CAAOD;;AAE5C,2DAAA,3DAACD,iMAAmB,WAAKC;AAAL,AAAS,yDAAA,mFAAA,rIAACC,+CAAOD;;AAErC,2DAAA,3DAACD,4MAAwB,WAAKC;AAAL,AAAS,yDAAA,mFAAA,rIAACC,+CAAOD","names":["re_frame.core.reg_sub","db","cljs.core.get_in"],"sourcesContent":["(ns transplants.subs\n  (:require\n   [re-frame.core :as rf]))\n\n;;; \n;; Note that subscription keys are fully qualified in transplants.subs ns, but...\n;; db keys are global and named similarly\n;; \n;; subscripton keys are used in views (usually) to READ db values\n;; db keys are used in event handlers (always) to WRITE to the db\n;;; \n\n(rf/reg-sub ::window-width (fn [db] (:window-width db)))\n\n(rf/reg-sub ::current-route (fn [db] (:current-route db)))\n\n(rf/reg-sub ::mdata (fn [db] (:mdata db)))\n\n;(rf/reg-sub ::organ (fn [db] (:organ db)))\n\n(rf/reg-sub ::organ-centres (fn [db] (get-in db [:organ-centres])))\n\n(rf/reg-sub ::guidance (fn [db] (get-in db [:guidance])))\n\n(rf/reg-sub ::guidance-percent (fn [db] (get-in db [:guidance-percent])))\n\n(rf/reg-sub ::randomise-icons (fn [db] (get-in db [:randomise-icons])))\n\n(rf/reg-sub ::tools (fn [db] (get-in db [:tools])))\n\n;(rf/reg-sub ::tool (fn [db] (get-in db [:tool]))) ; unused\n\n;(rf/reg-sub ::centre (fn [db] (get-in db [:centre]))) ; unused\n\n(rf/reg-sub ::bundles (fn [db] (get-in db [:bundles])))\n\n;(rf/reg-sub ::numerics (fn [db] (get-in db [:numerics]))) ; unused\n\n(rf/reg-sub ::inputs (fn [db] (get-in db [:inputs])))\n\n(rf/reg-sub ::test-day (fn [db] (get-in db [:test-day])))\n\n(rf/reg-sub ::cohort-dates (fn [db] (get-in db [:cohort-dates])))\n\n(rf/reg-sub ::selected-vis (fn [db] (get-in db [:selected-vis])))\n\n(rf/reg-sub ::mdata (fn [db] (get-in db [:mdata])))\n\n(rf/reg-sub ::modal-data (fn [db] (get-in db [:modal-data])))\n\n"]}