{"version":3,"sources":["re_frame_flow/core.cljc"],"mappings":"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","names":["re-frame-flow.core/state*","cljs.core.atom","re-frame-flow.core/elements","reagent.core.atom","re-frame-flow.core/get-deps","result","G__55013","cljs.core.conj","cljs.core/first","clojure.set.union","cljs.core/set","cljs.core.map","cljs.core.remove","cljs.core/nil?","p1__55009#","cljs.core/map?","cljs.core.comp","cljs.core.dissoc","cljs.core/keys","re-frame-flow.core/kw->str","id","cljs.core/qualified-keyword?","cljs.core/namespace","cljs.core/name","re-frame-flow.core/id->node","dispatch?","re-frame-flow.core/ids->edge","id1","id2","re-frame-flow.core/create-node-and-edges","handlers","dispatches","cljs.core/reduce-kv","acc","k","v","nodes","p1__55025#","cljs.core/boolean","cljs.core/cons","edges","cljs.core.repeat","cljs.core.into","cljs.core.concat","cljs.core.merge","p__55031","map__55033","cljs.core/--destructure-map","cljs.core.get","re-frame-flow.core/get-id->node-map","kind->id->handler","fx","events","cljs.core.reduce","m","e","cljs.core.keyword","color","cljs.core._EQ_","cljs.core/last","cljs.core.assoc","cljs.core/assoc-in","re-frame.std-interceptors/fx-handler->interceptor","handler-fn","re_frame.interceptor.__GT_interceptor","context","new-context","re-frame.trace/is-trace-enabled?","*current-trace*-orig-val__55068","re-frame.trace/*current-trace*","*current-trace*-temp-val__55069","re-frame.trace/start-trace","end__42126__auto__","re-frame.interop/now","duration__42127__auto__","cljs.core.swap_BANG_","re-frame.trace/traces","cljs.core/conj","re-frame.trace/run-tracing-callbacks!","re_frame.interceptor.get_coeffect","map__55075","map__55079","event","coeffects","deps","state","cljs.core.update_in","clojure.set/union","cljs.core/deref","re-frame.registrar/kind->id->handler","new-trace__42128__auto__","cljs.core.update","cljs.core/merge","re_frame.interceptor.get_effect","re-frame.core/reg-event-fx","handler","re_frame_flow$core$reg_event_fx","interceptors","re-frame.events/register","re-frame.cofx/inject-db","re-frame.fx/do-fx","re-frame.std-interceptors/inject-global-interceptors","fexpr__55085","js/re-frame","js/re-frame.std-interceptors","js/re-frame.std-interceptors.fx-handler->interceptor","cljs.core/Var","re-frame-flow.core/clear-cache!","cljs.core/reset!","re-frame-flow.core/Graph","js/module$node_modules$dagre$index","re-frame-flow.core/dagre-graph","cljs.core/clj->js","re-frame-flow.core/react-flow-pro","reagent.core/adapt-react-class","js/module$node_modules$react_flow_renderer$dist$ReactFlow.ReactFlowProvider","re-frame-flow.core/react-flow","js/module$node_modules$react_flow_renderer$dist$ReactFlow.default","re-frame-flow.core/background","js/module$node_modules$react_flow_renderer$dist$ReactFlow.Background","re-frame-flow.core/controls","js/module$node_modules$react_flow_renderer$dist$ReactFlow.Controls","re-frame-flow.core/storage","js/goog.storage.Storage","js/goog.storage.mechanism.HTML5LocalStorage","re-frame-flow.core/safe-prefix","re-frame-flow.core/safe-key","key","var_args","G__55098","re-frame-flow.core/load","js/Error","re_frame_flow.core.load","not-found","value","cljs.reader.read_string","re-frame-flow.core/save!","cljs.core.pr_str","js/re-frame-flow","js/re-frame-flow.core","js/re-frame-flow.core.show-panel?","re-frame-flow.core/show-panel?","js/re-frame-flow.core.show-dispatches?","re-frame-flow.core/show-dispatches?","re-frame-flow.core/update-handles-color","css","head","or__4253__auto__","js/document","js/document.getElementsByTagName","style","js/document.createElement","js/document.createTextNode","re-frame-flow.core/on-node-mouse-enter","elements","hovered-node-id","_","node","ns*","name*","kw-prefix","elements*","re-frame-flow.core/on-node-mouse-leave","re-frame-flow.core/update-nodes-positions","width","height","cljs.core/vals","dispatch-node-ids","cljs.core.filter","p1__55107#","G__55111","seq__55114","cljs.core/seq","chunk__55115","count__55116","i__55117","temp__5753__auto__","cljs.core/chunked-seq?","c__4679__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","cljs.core/next","el","cljs.core.mapv","node-with-pos","js/Math.random","p1__55109#","cljs.core/PersistentVector","G__55139","re-frame-flow.core/traverse-path","re_frame_flow.core.traverse_path","childs","p1__55133#","cljs.core.mapcat","re-frame-flow.core/get-nested-path","sources","p1__55144#","G__55145","re-frame-flow.core/get-nodes","re-frame-flow.core/flow-panel","handle-keys","tag-name","entering-input?","cljs.core/contains?","and__4251__auto__","cljs.core/not","prev-fx-handlers","reagent.core.create_class","js/window.addEventListener","js/window.removeEventListener","cljs.core.not_EQ_","cljs.core.partial","re-frame-flow.trace/dispatch-trace-enabled?","re-frame-flow.core/panel-div","panel","js/document.getElementById","new-panel","js/window.focus","re-frame-flow.core/init!","reagent.dom.render"],"sourcesContent":["(ns re-frame-flow.core\n  (:require\n    [clojure.set :as set]\n    [cljs.reader :as reader]\n    [goog.storage.Storage]\n    [goog.storage.mechanism.HTML5LocalStorage]\n    [reagent.core :as r]\n    [reagent.dom :as rdom]\n    [re-frame-flow.trace :as flow-trace]\n    [re-frame.core :as rf]\n    [re-frame.cofx :as cofx]\n    [re-frame.events :as events]\n    [re-frame.fx :as fx]\n    [re-frame.interceptor :refer [->interceptor get-effect get-coeffect]]\n    [re-frame.registrar :as rg]\n    [re-frame.std-interceptors :as std-interceptors :refer [fx-handler->interceptor]]\n    [re-frame.trace :as trace :include-macros true]\n    [\"react-flow-renderer\" :default ReactFlow :refer [Background Controls ReactFlowProvider]]\n    [\"dagre\" :as dagre]))\n\n\n(def state* (atom {}))\n(def elements (r/atom {}))\n\n\n(defn- get-deps [result]\n  (cond-> #{}\n    (:dispatch result)\n    (conj (-> result :dispatch first))\n\n    (:dispatch-n result)\n    (set/union (set (map first (remove nil? (:dispatch-n result)))))\n\n    (:dispatch-later result)\n    (#(if (map? (:dispatch-later result))\n        (conj % (-> result :dispatch-later :dispatch first))\n        (set/union % (set (map (comp first :dispatch) (remove nil? (:dispatch-later result)))))))\n\n    (-> result :http :on-success)\n    (conj (-> result :http :on-success first))\n\n    (-> result :http-xhrio :on-success)\n    (conj (-> result :http-xhrio :on-success first))\n\n    (-> result :http :on-failure)\n    (conj (-> result :http :on-failure first))\n\n    (-> result :http-xhrio :on-failure)\n    (conj (-> result :http-xhrio :on-failure first))\n\n    true\n    (set/union (-> result\n                 (dissoc :dispatch :dispatch-n :dispatch-later :http :http-xhrio)\n                 (keys)\n                 (set)))))\n\n\n(defn- kw->str [id]\n  (if (qualified-keyword? id)\n    (str (namespace id) \"/\" (name id))\n    (name id)))\n\n\n(defn- id->node [id dispatch?]\n  {:id (kw->str id)\n   :style {:fontSize 14\n           :fontFamily \"monospace\"\n           :wordBreak \"break-word\"\n           :width 200}\n   :data {:label id\n          :name (name id)\n          :namespace (namespace id)\n          :dispatch dispatch?}\n   :sourcePosition \"right\"\n   :targetPosition \"left\"\n   :position {:x 0 :y 0}})\n\n\n(defn- ids->edge [id1 id2]\n  {:id (str \"e-\" (kw->str id1) \"+\" (kw->str id2))\n   :source (kw->str id1)\n   :target (kw->str id2)\n   :animated true})\n\n\n(defn- create-node-and-edges [handlers dispatches]\n  (reduce-kv\n    (fn [acc k v]\n      (let [nodes (map #(id->node % (boolean (% dispatches))) (cons k v))\n            edges (map ids->edge (repeat k) v)]\n        (into acc (concat nodes edges))))\n    []\n    (merge handlers dispatches)))\n\n\n(defn- get-id->node-map [{:keys [handlers dispatches kind->id->handler]}]\n  (let [fx     (:fx kind->id->handler)\n        events (:event kind->id->handler)]\n    (reduce\n      (fn [m e]\n        (let [id    (keyword (:id e))\n              color (cond\n                      (id dispatches) \"orange\"\n                      (id fx) \"red\"\n                      (= :db-handler (:id (last (id events)))) \"#336edc\"\n                      :else \"green\")]\n          (assoc m (:id e) (-> e\n                             (assoc-in [:style :color] color)\n                             (assoc-in [:style :border] (str \"1px solid \" color))))))\n      {}\n      (create-node-and-edges handlers dispatches))))\n\n\n(set!\n  std-interceptors/fx-handler->interceptor\n  (fn fx-handler->interceptor\n    [id handler-fn]\n    (->interceptor\n      :id :fx-handler\n      :before (fn fx-handler-before\n                [context]\n                (let [new-context\n                      (trace/with-trace\n                        {:op-type :event/handler\n                         :operation (get-coeffect context :original-event)}\n                        (let [{:keys [event] :as coeffects} (get-coeffect context)\n                              result (handler-fn coeffects event)]\n                          (let [result (dissoc result :db)\n                                deps   (get-deps result)]\n                            (swap! state* (fn [state id v]\n                                            (let [state (update-in state [:handlers id] set/union v)]\n                                              (assoc state :id->node-map (get-id->node-map\n                                                                           {:handlers (:handlers state)\n                                                                            :dispatches (:dispatches state)\n                                                                            :kind->id->handler @rg/kind->id->handler}))))\n                              id\n                              deps))\n                          (assoc context :effects result)))]\n                  (trace/merge-trace!\n                    {:tags {:effects (get-effect new-context)\n                            :coeffects (get-coeffect context)}})\n                  new-context)))))\n\n\n(set!\n  rf/reg-event-fx\n  (fn reg-event-fx\n    ([id handler]\n     (reg-event-fx id nil handler))\n    ([id interceptors handler]\n     (events/register id [cofx/inject-db\n                          fx/do-fx\n                          std-interceptors/inject-global-interceptors\n                          interceptors\n                          ;; due to hot reload warning...\n                          ((resolve 'fx-handler->interceptor) id handler)]))))\n\n\n(defn ^:dev/after-load clear-cache! []\n  (reset! state* {})\n  (reset! elements {}))\n\n;;--------------------------------------- View component ---------------------------------------\n\n(def Graph (.. dagre -graphlib -Graph))\n(def dagre-graph (Graph.))\n(.setDefaultEdgeLabel dagre-graph #(clj->js {}))\n(.setGraph dagre-graph (clj->js {:rankdir \"LR\"}))\n\n\n(def react-flow-pro (r/adapt-react-class ReactFlowProvider))\n(def react-flow (r/adapt-react-class ReactFlow))\n(def background (r/adapt-react-class Background))\n(def controls (r/adapt-react-class Controls))\n\n(def storage (goog.storage.Storage. (goog.storage.mechanism.HTML5LocalStorage.)))\n(def safe-prefix \"ertu.re-frame-flow.\")\n\n\n(defn- safe-key [key]\n  (str safe-prefix key))\n\n\n(defn load\n  ([key]\n   (load key nil))\n  ([key not-found]\n   (let [value (.get storage (safe-key key))]\n     (if (undefined? value)\n       not-found\n       (reader/read-string value)))))\n\n\n(defn save! [key value]\n  (.set storage (safe-key key) (pr-str value)))\n\n\n(defonce show-panel? (r/atom false))\n(defonce show-dispatches? (r/atom (load \"show-dispatches?\")))\n\n\n(defn- update-handles-color []\n  (let [css   \".react-flow__handle { background: white !important;\n                                     border: 1px solid #b1b1b7 !important;}\"\n        head  (or (.-head js/document)\n                (aget (js/document.getElementsByTagName \"head\") 0))\n        style (js/document.createElement \"style\")]\n    (.appendChild head style)\n    (.appendChild style (js/document.createTextNode css))))\n\n\n(defn- on-node-mouse-enter [elements hovered-node-id _ node]\n  (let [id        (.-id node)\n        ns*       ^String (.-data.namespace node)\n        name*     ^String (.-data.name node)\n        kw-prefix (if ^String (.-data.dispatch node) \"\" \":\")]\n    (reset! hovered-node-id id)\n    (swap! elements\n      (fn [elements* id v]\n        (-> elements*\n          (assoc-in [id :data :label] v)\n          (assoc-in [id :style :zIndex] 4)))\n      id\n      (if ns*\n        (str kw-prefix ns* \"/\" name*)\n        (str kw-prefix name*)))))\n\n\n(defn- on-node-mouse-leave [elements hovered-node-id _ node]\n  (let [id    (.-id node)\n        name* ^String (.-data.name node)]\n    (reset! hovered-node-id nil)\n    (swap! elements\n      (fn [elements* id v]\n        (-> elements*\n          (assoc-in [id :data :label] v)\n          (assoc-in [id :style :zIndex] 3)))\n      id\n      name*)))\n\n\n(defn- update-nodes-positions [elements]\n  (let [width     280\n        height    36\n        elements* (vals (:id->node-map @state*))\n        elements* (if @show-dispatches?\n                    elements*\n                    (let [dispatch-node-ids (->> elements* (filter (comp :dispatch :data)) (map :id) (set))]\n                      (remove #(or (-> % :data :dispatch)\n                                   (some-> % :source kw->str dispatch-node-ids)) elements*)))\n        _         (doseq [el elements*]\n                    (if (:data el)\n                      (.setNode dagre-graph (:id el) (clj->js {:width width :height height}))\n                      (.setEdge dagre-graph (:source el) (:target el))))\n        _         (.layout dagre dagre-graph)\n        elements* (mapv\n                    (fn [el]\n                      (if (:data el)\n                        (let [node-with-pos (.node dagre-graph (:id el))]\n                          (assoc el :position {:x (+ (- (.-x node-with-pos)\n                                                       (/ width 2))\n                                                    (/ (js/Math.random) 1000))\n                                               :y (- (.-y node-with-pos) (/ height 2))}))\n                        el))\n                    elements*)]\n    (reset! elements (into {} (map #(vector (:id %) %) elements*)))))\n\n\n(defn- traverse-path\n  ([m id]\n   (traverse-path m #{} id))\n  ([m state id]\n   (let [childs (id m)]\n     (if (state id)\n       []\n       (if (seq childs)\n         (let [state (conj state id)]\n           (cons id (mapcat #(traverse-path m state %) childs)))\n         [id])))))\n\n\n(defn- get-nested-path [hovered-node-id elements]\n  (let [m       (merge (:handlers @state*) (:dispatches @state*))\n        sources (->> hovered-node-id (keyword) (traverse-path m) (map kw->str) (set))]\n    (filter #(or (:data %) (sources (:source %))) elements)))\n\n\n(defn- get-nodes [elements]\n  (or (vals @elements) []))\n\n\n(defn- flow-panel []\n  (let [handle-keys      (fn [e]\n                           (let [tag-name        (.-tagName (.-target e))\n                                 entering-input? (contains? #{\"INPUT\" \"SELECT\" \"TEXTAREA\"} tag-name)]\n                             (when (and (not entering-input?)\n                                     (= (.-key e) \"g\")\n                                     (.-ctrlKey e))\n                               (swap! show-panel? not)\n                               (.preventDefault e))))\n        hovered-node-id  (r/atom nil)\n        prev-fx-handlers (atom nil)]\n    (r/create-class\n      {:display-name \"Flow Panel\"\n       :component-did-mount (fn []\n                              (js/window.addEventListener \"keydown\" handle-keys)\n                              (update-handles-color))\n       :component-will-unmount (fn []\n                                 (js/window.removeEventListener \"keydown\" handle-keys))\n       :component-did-update (fn []\n                               (when (or (nil? @prev-fx-handlers)\n                                       (not= @prev-fx-handlers (:handlers @state*)))\n                                 (reset! prev-fx-handlers (:handlers @state*))\n                                 (update-nodes-positions elements)))\n       :reagent-render (fn []\n                         [react-flow-pro\n                          [react-flow\n                           {:on-node-mouse-enter (partial on-node-mouse-enter elements hovered-node-id)\n                            :on-node-mouse-leave (partial on-node-mouse-leave elements hovered-node-id)\n                            :default-position [10 10]\n                            :style {:width \"100%\"\n                                    :height \"100vh\"\n                                    :position \"absolute\"\n                                    :top \"0\"\n                                    :left \"0\"\n                                    :background \"white\"\n                                    :opacity (if @show-panel? \"9999\" \"0\")\n                                    :z-index (if @show-panel? \"9999\" \"0\")\n                                    :visibility (if @show-panel? \"visible\" \"hidden\")}\n                            :snap-to-grid true\n                            :snap-grid [15 15]\n                            :elements (if @hovered-node-id\n                                        (get-nested-path @hovered-node-id (get-nodes elements))\n                                        (get-nodes elements))}\n                           [controls]\n                           (when (flow-trace/dispatch-trace-enabled?)\n                             [:button\n                              {:style {:bottom \"0\"\n                                       :position \"absolute\"\n                                       :margin-left \"48px\"\n                                       :margin-bottom \"12px\"\n                                       :z-index \"99999\"\n                                       :border \"1px solid grey\"\n                                       :border-radius \"2px\"\n                                       :font \"400 14px Arial\"\n                                       :padding \"2px 6px\"}\n                               :on-click (fn [_]\n                                           (save! \"show-dispatches?\" (swap! show-dispatches? not))\n                                           (update-nodes-positions elements))}\n                              (if @show-dispatches?\n                                \"Hide dispatches\"\n                                \"Show dispatches\")])\n                           [background\n                            {:color \"#aaa\"}]]])})))\n\n\n(defn- panel-div []\n  (let [id    \"--re-frame-flow--\"\n        panel (js/document.getElementById id)]\n    (if panel\n      panel\n      (let [new-panel (js/document.createElement \"div\")]\n        (.setAttribute new-panel \"id\" id)\n        (.appendChild (.-body js/document) new-panel)\n        (js/window.focus new-panel)\n        new-panel))))\n\n\n(defn init! []\n  (rdom/render [flow-panel] (panel-div)))\n"]}