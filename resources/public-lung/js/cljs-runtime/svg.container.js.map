{"version":3,"sources":["svg/container.cljs"],"mappings":"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","names":["p__82002","map__82003","cljs.core/--destructure-map","cljs.core.get","svg.container/svg-flex-container","outer","margin","inner","padding","width","height","x","y","styles","aspect-ratio","content","svg.scales/->Identity","X","svg.scales/i->o","Y","p__82004","map__82005","svg.container/svg-container"],"sourcesContent":["(ns svg.container\n  (:require [svg.scales :as scl]))\n\n(defn svg-flex-container\n\n  \"A container that can scale an svg to its parent's size while maintaining the svg aspect ratio.\n   \n   Inner and outer are rectangles represented by {:keys [width height]} maps.\n   Outer defines the SVG viewbox size. Inner + Margins = Outer unless inner is given differently.\n   \n   Margin and padding are {:keys [top right bottom left]} maps\n   x and y are Iscales that map the inner rectangle to the inner coordinate system\n   todo:\n   The inner rectangle size defaults to the outer\n   \n   \"\n  [{:keys [outer margin inner padding width height x y styles aspect-ratio]}\n   content]\n\n  (let [inner (if (nil? inner) {:width  (- (:width outer) (:left margin) (:right margin))\n                                :height (- (:height outer) (:top margin) (:bottom margin))}\n                  inner)\n        width (if (nil? width) (- (:width inner) (:left padding) (:right padding)) width)\n        height (if (nil? height) (- (:height inner) (:top padding) (:bottom padding)) height)\n        x (if (nil? x) (scl/->Identity [0 width] 10) x)\n        y (if (nil? y) (scl/->Identity [0 height] 10) y)\n        X (scl/i->o x)\n        Y (scl/i->o y)]\n\n    ;;         \n    ;; width/padding-top determines the aspect ratio to preserve at different widths\n    ;;     \n    [:div {:style {:margin      \"0 auto\"\n                   :width       \"100%\"\n                   :height      0\n                   :padding-top aspect-ratio\n                   :position    \"relative\"}}\n     [:svg {:style    {:position \"absolute\"\n                       :top      0\n                       :left     0}\n            :view-box (str \" 0 0 \" (:width outer) \" \" (:height outer))}\n\n      [:g {:key       0\n           :transform (str \"translate(\" (:left margin) \", \" (:top margin) \")\")}\n\n       [:rect {:key        1\n               :class-name (:outer styles)\n               :width      (:width inner)\n               :height     (:height inner)}]\n       ;;\n       ;; define the coordinate system\n       ;;\n       [:g {:key       2\n            :transform (str \"translate(\" (:left padding) \",\" (:top padding) \")\")}\n        (when content [content x y X Y])]]]]))\n\n(defn svg-container\n\n  \"A container that can scale an svg to its parent's size while maintaining the svg aspect ratio.\n   \n   Inner and outer are rectangles represented by {:keys [width height]} maps.\n   Outer defines the SVG viewbox size. Inner + Margins = Outer unless inner is given differently.\n   \n   Margin and padding are {:keys [top right bottom left]} maps\n   x and y are Iscales that map the inner rectangle to the inner coordinate system\n   \n   The inner rectangle size defaults to the outer\n   \n   \"\n  [{:keys [outer margin inner padding width height x y styles aspect-ratio]}\n   content]\n\n  (let [inner (if (nil? inner) {:width  (- (:width outer) (:left margin) (:right margin))\n                                :height (- (:height outer) (:top margin) (:bottom margin))}\n                  inner)\n        width (if (nil? width) (- (:width inner) (:left padding) (:right padding)) width)\n        height (if (nil? height) (- (:height inner) (:top padding) (:bottom padding)) height)\n        x (if (nil? x) (scl/->Identity [0 width] 10) x)\n        y (if (nil? y) (scl/->Identity [0 height] 10) y)\n        X (scl/i->o x)\n        Y (scl/i->o y)]\n\n    ;;         \n    ;; width/padding-top determines the aspect ratio to preserve at different widths\n    ;;     \n    [:div {:style {:margin      \"0 auto\"\n                   :width       \"100%\"\n                   :height      0\n                   :padding-top aspect-ratio\n                   :position    \"relative\"}}\n     [:svg {:style    {:position \"absolute\"\n                       :top      0\n                       :left     0}\n            :view-box (str \" 0 0 \" (:width outer) \" \" (:height outer))}\n\n      [:g {:key       0\n           :transform (str \"translate(\" (:left margin) \", \" (:top margin) \")\")}\n\n       [:rect {:key        1\n               :class-name (:outer styles)\n               :width      (:width outer)\n               :height     (:height outer)}]\n       ;;\n       ;; define the coordinate system\n       ;;\n       [:g {:key       2\n            :transform (str \"translate(\" (:left padding) \",\" (:top padding) \")\")}\n        (when content [content x y X Y])]]]]))\n"]}