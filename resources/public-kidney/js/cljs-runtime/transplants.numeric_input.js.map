{"version":3,"sources":["transplants/numeric_input.cljs"],"mappings":"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","names":["transplants.numeric-input/error?","value","or__4253__auto__","cljs.core._EQ_","js/isNaN","transplants.numeric-input/str-to-num","s","js/parseFloat","transplants.numeric-input/epsilon","transplants.numeric-input/near-integer?","n","js/Math.abs","js/Math.round","transplants.numeric-input/to-dps","dps","js/Number","var_args","G__67795","transplants.numeric-input/num-to-str","js/Error","transplants.numeric_input.num_to_str","transplants.numeric-input/validate-input","nmin","nmax","step","cljs.core/fn?","val-1","val-2","val-3","transplants.numeric-input/handle-inc","on-change","increment","v","G__67873","transplants.numeric-input/handle-typed-input","value-f","e","cljs.core/re-matches","cljs.core.not_EQ_","G__67882","transplants.numeric-input/update-value","p__67900","map__67901","cljs.core/--destructure-map","cljs.core.get","transplants.numeric-input/inc-dec-button","_min","max","js/module$node_modules$react_bootstrap$cjs$index.Button","p__67924","map__67925","transplants.numeric-input/numeric-input","key","_id","min","units","props","vec__67928","cljs.core.nth","p1__67914#","good","bad","clojure.string.split","mutate","js/module$node_modules$react_bootstrap$cjs$index.Row","js/module$node_modules$react_bootstrap$cjs$index.Col","key-code","fexpr__67938","cljs.core.assoc","js/Math.pow","cljs.core/namespace","cljs.core/name","transplants.rgb/secondary","transplants.rgb/danger"],"sourcesContent":["(ns transplants.numeric-input\n  (:require [clojure.string :refer [split]]\n            [transplants.rgb :as rgb]\n            [\"react-bootstrap\" :as bs]))\n\n(defn error? [value] (or (nil? value) (= \"\" value) (js/isNaN value)))\n\n;;\n;; Numeric values are always stored in state as strings, but processed as numerics\n;;\n(defn str-to-num\n  \"convert str to num or to ##NaN if not possible\"\n  [s]\n  (js/parseFloat s))\n(comment\n  (str-to-num \"3.5\")                                        ;=> 3.5\n  (str-to-num 3.5)                                          ;=> 3.5\n  )\n\n(def epsilon 1e-8)\n\n(defn near-integer? [n]\n  (< (js/Math.abs (- n (js/Math.round n))) epsilon))\n\n(defn to-dps\n  [n dps]\n  (cond\n    (= 0 dps)\n    ; display as integer\n    (str (js/Math.round n))\n\n    :else\n    ; display with 1dp always\n    (.toFixed (js/Number. n) dps)))\n\n\n(defn num-to-str\n  ([n]\n   (num-to-str n 1))\n  ([n dps]\n   (if (string? n)\n     n\n     (if (js/isNaN n)\n       \"\"\n       (if (near-integer? n)\n         (str (js/Math.round n))\n         (if dps\n           (to-dps n dps)\n           (to-dps n 1)))))))\n\n(comment\n  (js/isNaN 4.1)\n  (and 1 (>= 1 1))\n  (near-integer? 4.4)\n  (to-dps 4.4 0)\n  (to-dps 444.4 1)\n  (to-dps 44.4 2)\n  (to-dps 444.4 3)\n\n  (num-to-str 4.4 0)\n  (num-to-str 4.4 1)\n  (num-to-str 4.4 2))\n\n(defn validate-input [value nmin nmax step]\n  (let [value (str-to-num value)\n        nmin (if (fn? nmin) (nmin) nmin)\n        nmax (if (fn? nmax) (nmax) nmax)                   ;(if (keyword? nmax) @(input-cursor nmax) nmax)\n        val-1 (if (js/isNaN value)                          ; is value blank?\n                (if (pos? step)                             ; is it an increment?\n                  (dec nmin)                                ; yes - go to one less than minimum (we'll increment later)\n                  (if (neg? step)                           ; is it a decrement?\n                    (inc nmax)                              ; yes - got to one more than maximum (we'll decrement later)\n                    nmin                                    ; no - check: This inserts nmin into val-1\n                    ))\n                value)\n        val-2  (+ step val-1)\n        val-3 (if (< val-2 nmin)                            ; is it too small?\n                (str (num-to-str val-2) \":\" val-2)          ; yes\n                (if (> val-2 nmax)                          ; no; is it too big?\n                  (str (num-to-str val-2) \":\" val-2)        ; yes, return good and bad values, in colon separated string\n                  val-2))]\n    #_(js/console.log \"out-value \" value)\n    (if (js/isNaN value)                                    ; Case when user has deleted value using backspace.\n      nmin #_\" :0\"                                                 ; and there is no input there.\n      val-3                                                 ; Otherwise return\n      )))\n\n(comment\n  (validate-input \"4.\" 0 100 0.1)\n  (validate-input \"4.45\" 0 100 0.1)\n\n  (str-to-num \"4.3\")\n  (str-to-num \"4.\")\n  (str-to-num \"4\"))\n\n(defn handle-inc [value on-change nmin nmax dps increment] ; \n  (let [v (validate-input value nmin nmax increment)]\n    ;(js/console.log (str \"handle-inc: value \" value \" inc \" increment))\n    ;(js/console.log (str \"handle-inc: v \" v))\n    (on-change (num-to-str v dps))))\n\n\n(defn handle-typed-input [value-f nmin nmax dps on-change e]\n  (let [value (.. (-> e .-target) -value)]\n    ;(js/console.log (str \"hti: value-f \" (value-f) \" value \" value))\n    (if (re-matches #\"\\s*\\d*\\.?\\d*\\s*\" value)               ; todo: should this be d+ rather than d*?\n      (when (not=  value (value-f))\n        ;(js/console.log (str \"hti old: \" (value-f) \" new \" value \" valid \" (validate-input (str-to-num value) nmin nmax 0)))\n        ;(js/console.log (str \"hti old: \" (value-f) \" new \" value \" -> \" (num-to-str (validate-input (str-to-num value) nmin nmax 0))))\n\n        (on-change (if (not= (str-to-num value) (str-to-num (value-f)))\n                     (num-to-str (validate-input (str-to-num value) nmin nmax 0) dps)\n                     value)))\n\n      (on-change \"\"))                                        ; todo: should this be nil or ##NaN?\n    ))\n\n\n(comment\n  (validate-input (str-to-num 4.4) 0 100 0)\n  (num-to-str (validate-input (str-to-num \"4.4\") 0 100 0))\n  (validate-input 4.4 0 100 1)\n  (js/Math.round (- (/ (js/Math.log 0.01) (js/Math.log 10))))\n\n  (num-to-str (validate-input (str-to-num \"4.1\") 0 100 0) 10)\n  (re-matches #\"\\s*\\d*\\.?\\d*\\s*\" \"6\")                       ;\"6\"\n  (re-matches #\"\\s*\\d*\\.?\\d*\\s*\" \"\")                        ;\"\"\n  (re-matches #\"\\s*\\d*\\.?\\d*\\s*\" \"0.7\")                     ;\"0.7\"\n  (re-matches #\"\\s*\\d*\\.?\\d*\\s*\" \".7\")                      ;\".7\"\n  (re-matches #\"\\s*\\d*\\.?\\d*\\s*\" \"7.\")                      ;\"7.\"\n  (re-matches #\"\\s*\\d*\\.?\\d*\\s*\" \"a\"))                       nil\n\n(defn update-value [value nmin nmax dps increment on-change]\n  (handle-inc value on-change nmin nmax dps increment))\n\n(defn inc-dec-button\n  [{:keys [value-f on-change _min max nmin nmax dps increment]}]\n  (let [value (str-to-num (value-f))]\n    [:span {:class-name \"incdec\"}\n     [:> bs/Button {:class-name  (str (if (pos? increment) \"right\" \"left\") \" btn btn-default \")\n                    :variant (if (nil? (value-f)) \"outline-secondary\" \"secondary\")\n                    :aria-hidden \"true\"\n                    :disabled    (if (pos? increment)\n                                   (if (>= value (str-to-num (if (fn? max) (max) max))) \"disabled\" nil)\n                                   (if (<= value nmin) \"disabled\" nil))\n                    :on-click    #(update-value value nmin nmax dps increment on-change)}\n      (if (pos? increment) \"+\" \"\u2013\")]]))\n\n;;\n;; This will need more work if used in production.\n;;                                                             \n(defn numeric-input\n  [{:keys [key _id value-f on-change min max dps units] \n    :as props}]\n\n  ;(println \"KEY \" (type key) \" ID \" id)\n  (let [[good bad] (split (value-f) #\":\")\n        value (str-to-num good)\n        nmin (str-to-num (if (fn? min) (min) min))\n        nmax (str-to-num (if (fn? max) (max) max))\n        mutate (fn [e]\n                 (handle-typed-input\n                  value-f\n                  min\n                  max\n                  dps\n                  on-change e))]\n    [:> bs/Row {:style {:align-items \"baseline\"}}\n     [:> bs/Col {:xs 9}\n      [:div {:class       \"numeric-input\"\n             :style       {:min-width      \"100px\"\n                           :width \"max-content\"\n                           :tab-index  1\n                           :selectable true\n                           :border (str \"3px solid \" (if (nil? (value-f)) \"#ff8888\" \"#CCCCCC\"))\n                           :border-radius 5\n                           :padding 1}\n             :on-key-down #(let [key-code (.. % -nativeEvent -code)]\n                             (when (#{\"ArrowUp\" \"ArrowDown\"} key-code)\n                               (.preventDefault %))\n                             (update-value value nmin nmax dps\n                                           (cond\n                                             (= \"ArrowUp\" key-code) 1\n                                             (= \"ArrowDown\" key-code) -1\n                                             :else 0)\n                                           on-change))}\n       [:div {:style {:display \"flex\" :flex-direction \"row\" :align-items \"center\"}}\n        (inc-dec-button (assoc props :variant \"secondary\" :nmin nmin :nmax nmax :dps dps :increment (- (js/Math.pow 10 (- dps))) :value-f value-f))\n        [:input\n         {:type      \"text\"\n          :value     good\n          :id        (when key (str (namespace key) \"-\" (name key)))\n        ; :on-click mutate\n          :on-change mutate\n          :style     {:width \"58px\"\n                      :height \"38px\"\n                      :font-size \"16px\"\n                      :border-top       \"0px solid #888\"\n                      :border-left      \"2px solid #ddd\"\n                      :border-bottom       \"0px solid #ddd\"\n                      :border-right      \"2px solid #ddd\"\n                      :background-color (if (nil? (value-f))\n                                          \"#fff\"\n                                          (if (nil? bad) rgb/secondary rgb/danger))\n                      :color            \"#fff\"\n                      :padding          \"0 0 4px 0\"\n                      :text-align       \"center\"}}]\n        (inc-dec-button (assoc props :nmin nmin :nmax nmax :dps dps :increment (js/Math.pow 10 (- dps)) :value-f value-f))]]]\n     [:> bs/Col\n      ; the styling suppresses units display when the screen is too small \n      {:class-name \"col-3 d-none d-lg-block\"}\n      (when units [:div {:style {:color rgb/secondary}} units])]]))\n\n\n\n"]}