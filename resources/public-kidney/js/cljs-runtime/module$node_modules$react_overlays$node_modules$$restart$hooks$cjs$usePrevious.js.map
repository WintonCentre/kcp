{
"version":3,
"file":"module$node_modules$react_overlays$node_modules$$restart$hooks$cjs$usePrevious.js",
"lineCount":1,
"mappings":"AAAAA,cAAA,CAAA,8EAAA,CAAmG,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAG3IA,OAAQC,CAAAA,UAAR,CAAqB,CAAA,CACrBD,QAAQE,CAAAA,OAAR,CAqBAC,QAAoB,CAACC,KAAD,CAAQ,CAC1B,IAAIC,IAAM,GAAIC,MAAOC,CAAAA,MAAX,EAAmB,IAAnB,CACV,IAAID,MAAOE,CAAAA,SAAX,EAAsB,QAAS,EAAG,CAChCH,GAAII,CAAAA,OAAJ,CAAcL,KADkB,CAAlC,CAGA,OAAOC,IAAII,CAAAA,OALe,CAnB5B,KAAIH,OAASR,OAAA,CAAQ,iCAAR,CAN8H;",
"sources":["node_modules/react-overlays/node_modules/@restart/hooks/cjs/usePrevious.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$react_overlays$node_modules$$restart$hooks$cjs$usePrevious\"] = function(global,require,module,exports) {\n\"use strict\";\n\nexports.__esModule = true;\nexports.default = usePrevious;\n\nvar _react = require(\"react\");\n\n/**\n * Store the last of some value. Tracked via a `Ref` only updating it\n * after the component renders.\n *\n * Helpful if you need to compare a prop value to it's previous value during render.\n *\n * ```ts\n * function Component(props) {\n *   const lastProps = usePrevious(props)\n *\n *   if (lastProps.foo !== props.foo)\n *     resetValueFromProps(props.foo)\n * }\n * ```\n *\n * @param value the value to track\n */\nfunction usePrevious(value) {\n  var ref = (0, _react.useRef)(null);\n  (0, _react.useEffect)(function () {\n    ref.current = value;\n  });\n  return ref.current;\n}\n};"],
"names":["shadow$provide","global","require","module","exports","__esModule","default","usePrevious","value","ref","_react","useRef","useEffect","current"]
}
