{
"version":3,
"file":"module$node_modules$lodash$transform.js",
"lineCount":3,
"mappings":"AAAAA,cAAA,CAAA,oCAAA,CAAyD,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAAA,IAC7FC,UAAYH,OAAA,CAAQ,uCAAR,CADiF,CAE7FI,WAAaJ,OAAA,CAAQ,wCAAR,CAFgF,CAG7FK,WAAaL,OAAA,CAAQ,wCAAR,CAHgF,CAI7FM,aAAeN,OAAA,CAAQ,0CAAR,CAJ8E,CAK7FO,aAAeP,OAAA,CAAQ,0CAAR,CAL8E,CAM7FQ,QAAUR,OAAA,CAAQ,oCAAR,CANmF,CAO7FS,SAAWT,OAAA,CAAQ,qCAAR,CAPkF;AAQ7FU,WAAaV,OAAA,CAAQ,uCAAR,CARgF,CAS7FW,SAAWX,OAAA,CAAQ,qCAAR,CATkF,CAU7FY,aAAeZ,OAAA,CAAQ,yCAAR,CAuDnBC,OAAOC,CAAAA,OAAP,CAvBAW,QAAkB,CAACC,eAAD,CAASC,QAAT,CAAmBC,WAAnB,CAAgC,CAAA,IAC5CC,MAAQT,OAAA,CAAQM,eAAR,CADoC,CAE5CI,UAAYD,KAAZC,EAAqBT,QAAA,CAASK,eAAT,CAArBI,EAAyCN,YAAA,CAAaE,eAAb,CAE7CC,SAAA,CAAWT,YAAA,CAAaS,QAAb,CAAuB,CAAvB,CACX,IAAmB,IAAnB,EAAIC,WAAJ,CAAyB,CACvB,IAAIG,KAAOL,eAAPK,EAAiBL,eAAOM,CAAAA,WAE1BJ,YAAA,CADEE,SAAJ,CACgBD,KAAA,CAAQ,IAAIE,IAAZ,CAAmB,EADnC;AAGSR,QAAA,CAASG,eAAT,CAAJ,CACWJ,UAAA,CAAWS,IAAX,CAAA,CAAmBf,UAAA,CAAWG,YAAA,CAAaO,eAAb,CAAX,CAAnB,CAAsD,EADjE,CAIW,EATO,CAYzB,CAACI,SAAA,CAAYf,SAAZ,CAAwBE,UAAzB,EAAqCS,eAArC,CAA6C,QAAQ,CAACO,KAAD,CAAQC,KAAR,CAAeR,MAAf,CAAuB,CAC1E,MAAOC,SAAA,CAASC,WAAT,CAAsBK,KAAtB,CAA6BC,KAA7B,CAAoCR,MAApC,CADmE,CAA5E,CAGA,OAAOE,YApByC,CA1C+C;",
"sources":["node_modules/lodash/transform.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$lodash$transform\"] = function(global,require,module,exports) {\nvar arrayEach = require('./_arrayEach'),\n    baseCreate = require('./_baseCreate'),\n    baseForOwn = require('./_baseForOwn'),\n    baseIteratee = require('./_baseIteratee'),\n    getPrototype = require('./_getPrototype'),\n    isArray = require('./isArray'),\n    isBuffer = require('./isBuffer'),\n    isFunction = require('./isFunction'),\n    isObject = require('./isObject'),\n    isTypedArray = require('./isTypedArray');\n\n/**\n * An alternative to `_.reduce`; this method transforms `object` to a new\n * `accumulator` object which is the result of running each of its own\n * enumerable string keyed properties thru `iteratee`, with each invocation\n * potentially mutating the `accumulator` object. If `accumulator` is not\n * provided, a new object with the same `[[Prototype]]` will be used. The\n * iteratee is invoked with four arguments: (accumulator, value, key, object).\n * Iteratee functions may exit iteration early by explicitly returning `false`.\n *\n * @static\n * @memberOf _\n * @since 1.3.0\n * @category Object\n * @param {Object} object The object to iterate over.\n * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n * @param {*} [accumulator] The custom accumulator value.\n * @returns {*} Returns the accumulated value.\n * @example\n *\n * _.transform([2, 3, 4], function(result, n) {\n *   result.push(n *= n);\n *   return n % 2 == 0;\n * }, []);\n * // => [4, 9]\n *\n * _.transform({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {\n *   (result[value] || (result[value] = [])).push(key);\n * }, {});\n * // => { '1': ['a', 'c'], '2': ['b'] }\n */\nfunction transform(object, iteratee, accumulator) {\n  var isArr = isArray(object),\n      isArrLike = isArr || isBuffer(object) || isTypedArray(object);\n\n  iteratee = baseIteratee(iteratee, 4);\n  if (accumulator == null) {\n    var Ctor = object && object.constructor;\n    if (isArrLike) {\n      accumulator = isArr ? new Ctor : [];\n    }\n    else if (isObject(object)) {\n      accumulator = isFunction(Ctor) ? baseCreate(getPrototype(object)) : {};\n    }\n    else {\n      accumulator = {};\n    }\n  }\n  (isArrLike ? arrayEach : baseForOwn)(object, function(value, index, object) {\n    return iteratee(accumulator, value, index, object);\n  });\n  return accumulator;\n}\n\nmodule.exports = transform;\n\n};"],
"names":["shadow$provide","global","require","module","exports","arrayEach","baseCreate","baseForOwn","baseIteratee","getPrototype","isArray","isBuffer","isFunction","isObject","isTypedArray","transform","object","iteratee","accumulator","isArr","isArrLike","Ctor","constructor","value","index"]
}
