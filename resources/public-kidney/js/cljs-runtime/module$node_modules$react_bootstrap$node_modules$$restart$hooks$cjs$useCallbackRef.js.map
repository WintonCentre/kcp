{
"version":3,
"file":"module$node_modules$react_bootstrap$node_modules$$restart$hooks$cjs$useCallbackRef.js",
"lineCount":1,
"mappings":"AAAAA,cAAA,CAAA,kFAAA,CAAuG,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAG/IA,OAAQC,CAAAA,UAAR,CAAqB,CAAA,CACrBD,QAAQE,CAAAA,OAAR,CA4BAC,QAAuB,EAAG,CACxB,MAAO,GAAIC,MAAOC,CAAAA,QAAX,EAAqB,IAArB,CADiB,CA1B1B,KAAID,OAASN,OAAA,CAAQ,iCAAR,CANkI;",
"sources":["node_modules/react-bootstrap/node_modules/@restart/hooks/cjs/useCallbackRef.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$react_bootstrap$node_modules$$restart$hooks$cjs$useCallbackRef\"] = function(global,require,module,exports) {\n\"use strict\";\n\nexports.__esModule = true;\nexports.default = useCallbackRef;\n\nvar _react = require(\"react\");\n\n/**\n * A convenience hook around `useState` designed to be paired with\n * the component [callback ref](https://reactjs.org/docs/refs-and-the-dom.html#callback-refs) api.\n * Callback refs are useful over `useRef()` when you need to respond to the ref being set\n * instead of lazily accessing it in an effect.\n *\n * ```ts\n * const [element, attachRef] = useCallbackRef<HTMLDivElement>()\n *\n * useEffect(() => {\n *   if (!element) return\n *\n *   const calendar = new FullCalendar.Calendar(element)\n *\n *   return () => {\n *     calendar.destroy()\n *   }\n * }, [element])\n *\n * return <div ref={attachRef} />\n * ```\n *\n * @category refs\n */\nfunction useCallbackRef() {\n  return (0, _react.useState)(null);\n}\n};"],
"names":["shadow$provide","global","require","module","exports","__esModule","default","useCallbackRef","_react","useState"]
}
