{; List of organ metadata.
 ; Edit this to add a new organ to the tool
 :organ-meta [{:organ :lung :text "Lung" :label "Lung Transplants"}
              {:organ :kidney :text "Kidney" :label "Kidney Transplants"}]

 ; Spreadsheet columns which are useful as keys once the rows have been grouped by these keys.
 ; If two keys are given, the second is a possible sub-key.
 :sheet-meta {"centres" [:key :name]
              "tools"  [:key]
              
              "waiting-baseline-cifs" [:centre :days]
              "waiting-baseline-vars" [:baseline-factor]
              "waiting-inputs" [:factor :level]
              
              "post-transplant-baseline-cifs" [:centre :days]
              "post-transplant-baseline-vars" [:baseline-factor]
              "post-transplant-inputs" [:factor :level]
              
              "from-listing-baseline-cifs" [:centre :days]
              "from-listing-baseline-vars" [:baseline-factor]
              "from-listing-inputs" [:factor :level]
              
              "graft-baseline-cifs" [:centre :days]
              "graft-baseline-vars" [:baseline-factor]
              "graft-inputs" [:factor :level]
              
              "survival-baseline-cifs" [:centre :days]
              "survival-baseline-vars" [:baseline-factor]
              "survival-inputs" [:factor :level]
            
              "numerics" [:model :factor]
              "bmi-calculator" [:factor :modal]}
 }

(comment
  ;;;
  ;; Utilities below are to assist when filling in numerics in the :type column in the spreadsheet.
  ;; Probably need to find a better home for them.
  ;;;
  (def numerics
    "format of the numerics data used by the app"
    {{:model :waiting, :factor :bmi}
     {:min 10
      :knot3 nil
      :knot2 nil
      :knot4 nil
      :max 100
      :factor ":bmi"
      :dps 0
      :knot1 nil
      :model ":waiting"}
     {:model :waiting, :factor :bilirubin}
     {:min 0
      :knot3 nil
      :knot2 nil
      :knot4 nil
      :max 100
      :factor ":bilirubin"
      :dps 0
      :knot1 nil
      :model ":waiting"}
     {:model :from-listing, :factor :age}
     {:min 16
      :knot3 nil
      :knot2 nil
      :knot4 nil
      :max 70
      :factor ":age"
      :dps 0
      :knot1 nil
      :model ":from-listing"}
     {:model :post-transplant, :factor :cholesterol}
     {:min 1.3
      :knot3 nil
      :knot2 nil
      :knot4 nil
      :max 9
      :factor ":cholesterol"
      :dps 1
      :knot1 nil
      :model ":post-transplant"}
     {:model :post-transplant, :factor :bilirubin}
     {:min 1
      :knot3 nil
      :knot2 nil
      :knot4 nil
      :max 77
      :factor ":bilirubin"
      :dps 0
      :knot1 nil
      :model ":post-transplant"}
     {:model :post-transplant, :factor :tlc-mismatch}
     {:min -2.2
      :knot3 nil
      :knot2 nil
      :knot4 nil
      :max 4.5
      :factor ":tlc-mismatch"
      :dps 1
      :knot1 nil
      :model ":post-transplant"}
     {:model :waiting, :factor :age}
     {:min 16
      :knot3 56
      :knot2 44
      :knot4 63
      :max 70
      :factor ":age"
      :dps 0
      :knot1 21
      :model ":waiting"}
     {:model :post-transplant, :factor :age}
     {:min 16
      :knot3 56
      :knot2 46
      :knot4 63
      :max 70
      :factor ":age"
      :dps 0
      :knot1 22
      :model ":post-transplant"}
     {:model :waiting, :factor :fvc}
     {:min 0
      :knot3 2.22
      :knot2 1.63
      :knot4 3.55
      :max 5
      :factor ":fvc"
      :dps 2
      :knot1 0.94
      :model ":waiting"}
     {:model :from-listing, :factor :bmi}
     {:min 14
      :knot3 nil
      :knot2 nil
      :knot4 nil
      :max 35.7
      :factor ":bmi"
      :dps 1
      :knot1 nil
      :model ":from-listing"}
     {:model :post-transplant, :factor :fvc}
     {:min 0.35
      :knot3 nil
      :knot2 nil
      :knot4 nil
      :max 6.8
      :factor ":fvc"
      :dps 1
      :knot1 nil
      :model ":post-transplant"}})

  (defn numb
    "What should go in the type column for a :numeric input widget?"
    [model factor]
    (as-> {:model model :factor factor} x
      (get numerics x)
      (remove (comp nil? second) x)
      (into {} x)
      (assoc x :type :numeric)
      (dissoc x :model)
      (dissoc x :factor)
      (sort-by first x)
      (into {} x)
      ))
  (numb :waiting :age)
  (numb :waiting :fvc)
  (numb :waiting :bmi)
  (numb :waiting :bilirubin)
  (numb :post-transplant :age)
  (numb :post-transplant :tlc-mismatch)
  (numb :post-transplant :fvc)
  (numb :post-transplant :bilirubin)
  (numb :post-transplant :cholesterol)
  (numb :from-listing :age)
  (numb :from-listing :bmi)
  )

