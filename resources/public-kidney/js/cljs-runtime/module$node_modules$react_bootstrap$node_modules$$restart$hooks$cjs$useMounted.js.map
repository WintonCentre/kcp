{
"version":3,
"file":"module$node_modules$react_bootstrap$node_modules$$restart$hooks$cjs$useMounted.js",
"lineCount":1,
"mappings":"AAAAA,cAAA,CAAA,8EAAA,CAAmG,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAG3IA,OAAQC,CAAAA,UAAR,CAAqB,CAAA,CACrBD,QAAQE,CAAAA,OAAR,CAwBAC,QAAmB,EAAG,CACpB,IAAIC,QAAU,GAAIC,MAAOC,CAAAA,MAAX,EAAmB,CAAA,CAAnB,CAAd,CACIC,UAAY,GAAIF,MAAOC,CAAAA,MAAX,EAAmB,QAAS,EAAG,CAC7C,MAAOF,QAAQI,CAAAA,OAD8B,CAA/B,CAGhB,IAAIH,MAAOI,CAAAA,SAAX,EAAsB,QAAS,EAAG,CAChC,MAAO,SAAS,EAAG,CACjBL,OAAQI,CAAAA,OAAR,CAAkB,CAAA,CADD,CADa,CAAlC,CAIG,EAJH,CAKA,OAAOD,UAAUC,CAAAA,OAVG,CAtBtB,KAAIH,OAASP,OAAA,CAAQ,iCAAR,CAN8H;",
"sources":["node_modules/react-bootstrap/node_modules/@restart/hooks/cjs/useMounted.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$react_bootstrap$node_modules$$restart$hooks$cjs$useMounted\"] = function(global,require,module,exports) {\n\"use strict\";\n\nexports.__esModule = true;\nexports.default = useMounted;\n\nvar _react = require(\"react\");\n\n/**\n * Track whether a component is current mounted. Generally less preferable than\n * properlly canceling effects so they don't run after a component is unmounted,\n * but helpful in cases where that isn't feasible, such as a `Promise` resolution.\n *\n * @returns a function that returns the current isMounted state of the component\n *\n * ```ts\n * const [data, setData] = useState(null)\n * const isMounted = useMounted()\n *\n * useEffect(() => {\n *   fetchdata().then((newData) => {\n *      if (isMounted()) {\n *        setData(newData);\n *      }\n *   })\n * })\n * ```\n */\nfunction useMounted() {\n  var mounted = (0, _react.useRef)(true);\n  var isMounted = (0, _react.useRef)(function () {\n    return mounted.current;\n  });\n  (0, _react.useEffect)(function () {\n    return function () {\n      mounted.current = false;\n    };\n  }, []);\n  return isMounted.current;\n}\n};"],
"names":["shadow$provide","global","require","module","exports","__esModule","default","useMounted","mounted","_react","useRef","isMounted","current","useEffect"]
}
