{
"version":3,
"file":"module$node_modules$lodash$_isFlattenable.js",
"lineCount":1,
"mappings":"AAAAA,cAAA,CAAA,yCAAA,CAA8D,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAClGC,MAAAA,CAASH,OAAA,CAAQ,oCAAR,CADyF,KAElGI,YAAcJ,OAAA,CAAQ,wCAAR,CAFoF,CAGlGK,QAAUL,OAAA,CAAQ,oCAAR,CAHwF,CAMlGM,iBAAmBH,MAAA,CAASA,MAAOI,CAAAA,kBAAhB,CAAqCC,IAAAA,EAc5DP,OAAOC,CAAAA,OAAP,CALAO,QAAsB,CAACC,KAAD,CAAQ,CAC5B,MAAOL,QAAA,CAAQK,KAAR,CAAP,EAAyBN,WAAA,CAAYM,KAAZ,CAAzB,EACE,CAAC,EAAEJ,gBAAF,EAAsBI,KAAtB,EAA+BA,KAAA,CAAMJ,gBAAN,CAA/B,CAFyB,CAfwE;",
"sources":["node_modules/lodash/_isFlattenable.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$lodash$_isFlattenable\"] = function(global,require,module,exports) {\nvar Symbol = require('./_Symbol'),\n    isArguments = require('./isArguments'),\n    isArray = require('./isArray');\n\n/** Built-in value references. */\nvar spreadableSymbol = Symbol ? Symbol.isConcatSpreadable : undefined;\n\n/**\n * Checks if `value` is a flattenable `arguments` object or array.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is flattenable, else `false`.\n */\nfunction isFlattenable(value) {\n  return isArray(value) || isArguments(value) ||\n    !!(spreadableSymbol && value && value[spreadableSymbol]);\n}\n\nmodule.exports = isFlattenable;\n\n};"],
"names":["shadow$provide","global","require","module","exports","Symbol","isArguments","isArray","spreadableSymbol","isConcatSpreadable","undefined","isFlattenable","value"]
}
