{
"version":3,
"file":"module$node_modules$dagre$lib$order$build_layer_graph.js",
"lineCount":2,
"mappings":"AAAAA,cAAA,CAAA,qDAAA,CAA0E,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAqElHC,QAASA,eAAc,CAACC,CAAD,CAAI,CAEzB,IADA,IAAIC,CACJ,CAAOD,CAAEE,CAAAA,OAAF,CAAWD,CAAX,CAAeE,CAAEC,CAAAA,QAAF,CAAW,OAAX,CAAf,CAAP,CAAA,EACA,MAAOH,EAHkB,CApE3B,IAAIE,EAAIP,OAAA,CAAQ,sCAAR,CAAR,CACIS,MAAQT,OAAA,CAAQ,wCAAR,CAAuBS,CAAAA,KAEnCR,OAAOC,CAAAA,OAAP,CAgCAQ,QAAwB,CAACN,CAAD,CAAIO,IAAJ,CAAUC,YAAV,CAAwB,CAAA,IAC1CC,KAAOV,cAAA,CAAeC,CAAf,CADmC,CAE5CU,OAAuCC,CAA9B,IAAIN,KAAJ,CAAU,CAAEO,SAAU,CAAA,CAAZ,CAAV,CAA8BD,EAAAA,QAA9B,CAAuC,CAAQF,IAAR,CAAvC,CACNI,CAAAA,mBADM,CACc,QAAQ,CAACZ,CAAD,CAAI,CAAE,MAAOD,EAAEc,CAAAA,IAAF,CAAOb,CAAP,CAAT,CAD1B,CAGXE,EAAEY,CAAAA,OAAF,CAAUf,CAAEgB,CAAAA,KAAF,EAAV,CAAqB,QAAQ,CAACf,CAAD,CAAI,CAAA,IAC3Ba;AAAOd,CAAEc,CAAAA,IAAF,CAAOb,CAAP,CADoB,CAE7BgB,OAASjB,CAAEiB,CAAAA,MAAF,CAAShB,CAAT,CAEX,IAAIa,IAAKP,CAAAA,IAAT,GAAkBA,IAAlB,EAA0BO,IAAKI,CAAAA,OAA/B,EAA0CX,IAA1C,EAAkDA,IAAlD,EAA0DO,IAAKK,CAAAA,OAA/D,CACET,MAAOU,CAAAA,OAAP,CAAenB,CAAf,CAWA,CAVAS,MAAOW,CAAAA,SAAP,CAAiBpB,CAAjB,CAAoBgB,MAApB,EAA8BR,IAA9B,CAUA,CAPAN,CAAEY,CAAAA,OAAF,CAAUf,CAAA,CAAEQ,YAAF,CAAA,CAAgBP,CAAhB,CAAV,CAA8B,QAAQ,CAACqB,CAAD,CAAI,CAAA,IACpCC,EAAID,CAAErB,CAAAA,CAAF,GAAQA,CAAR,CAAYqB,CAAEE,CAAAA,CAAd,CAAkBF,CAAErB,CAAAA,CADY,CAEtCwB,KAAOf,MAAOe,CAAAA,IAAP,CAAYF,CAAZ,CAAetB,CAAf,CACPyB,KAAAA,CAAUvB,CAAEwB,CAAAA,WAAF,CAAcF,IAAd,CAAD,CAAqC,CAArC,CAAuBA,IAAKC,CAAAA,MACvChB,OAAOkB,CAAAA,OAAP,CAAeL,CAAf,CAAkBtB,CAAlB,CAAqB,CAAEyB,OAAQ1B,CAAEyB,CAAAA,IAAF,CAAOH,CAAP,CAAUI,CAAAA,MAAlBA,CAA2BA,IAA7B,CAArB,CAJwC,CAA1C,CAOA,CAAIvB,CAAE0B,CAAAA,GAAF,CAAMf,IAAN,CAAY,SAAZ,CAAJ,EACEJ,MAAOU,CAAAA,OAAP,CAAenB,CAAf,CAAkB,CAChB6B,WAAYhB,IAAKgB,CAAAA,UAAL,CAAgBvB,IAAhB,CADI,CAEhBwB,YAAajB,IAAKiB,CAAAA,WAAL,CAAiBxB,IAAjB,CAFG,CAAlB,CAjB2B,CAAjC,CAyBA,OAAOG,OA9BuC,CApCkE;",
"sources":["node_modules/dagre/lib/order/build-layer-graph.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$dagre$lib$order$build_layer_graph\"] = function(global,require,module,exports) {\nvar _ = require(\"../lodash\");\nvar Graph = require(\"../graphlib\").Graph;\n\nmodule.exports = buildLayerGraph;\n\n/*\n * Constructs a graph that can be used to sort a layer of nodes. The graph will\n * contain all base and subgraph nodes from the request layer in their original\n * hierarchy and any edges that are incident on these nodes and are of the type\n * requested by the \"relationship\" parameter.\n *\n * Nodes from the requested rank that do not have parents are assigned a root\n * node in the output graph, which is set in the root graph attribute. This\n * makes it easy to walk the hierarchy of movable nodes during ordering.\n *\n * Pre-conditions:\n *\n *    1. Input graph is a DAG\n *    2. Base nodes in the input graph have a rank attribute\n *    3. Subgraph nodes in the input graph has minRank and maxRank attributes\n *    4. Edges have an assigned weight\n *\n * Post-conditions:\n *\n *    1. Output graph has all nodes in the movable rank with preserved\n *       hierarchy.\n *    2. Root nodes in the movable layer are made children of the node\n *       indicated by the root attribute of the graph.\n *    3. Non-movable nodes incident on movable nodes, selected by the\n *       relationship parameter, are included in the graph (without hierarchy).\n *    4. Edges incident on movable nodes, selected by the relationship\n *       parameter, are added to the output graph.\n *    5. The weights for copied edges are aggregated as need, since the output\n *       graph is not a multi-graph.\n */\nfunction buildLayerGraph(g, rank, relationship) {\n  var root = createRootNode(g),\n    result = new Graph({ compound: true }).setGraph({ root: root })\n      .setDefaultNodeLabel(function(v) { return g.node(v); });\n\n  _.forEach(g.nodes(), function(v) {\n    var node = g.node(v),\n      parent = g.parent(v);\n\n    if (node.rank === rank || node.minRank <= rank && rank <= node.maxRank) {\n      result.setNode(v);\n      result.setParent(v, parent || root);\n\n      // This assumes we have only short edges!\n      _.forEach(g[relationship](v), function(e) {\n        var u = e.v === v ? e.w : e.v,\n          edge = result.edge(u, v),\n          weight = !_.isUndefined(edge) ? edge.weight : 0;\n        result.setEdge(u, v, { weight: g.edge(e).weight + weight });\n      });\n\n      if (_.has(node, \"minRank\")) {\n        result.setNode(v, {\n          borderLeft: node.borderLeft[rank],\n          borderRight: node.borderRight[rank]\n        });\n      }\n    }\n  });\n\n  return result;\n}\n\nfunction createRootNode(g) {\n  var v;\n  while (g.hasNode((v = _.uniqueId(\"_root\"))));\n  return v;\n}\n\n};"],
"names":["shadow$provide","global","require","module","exports","createRootNode","g","v","hasNode","_","uniqueId","Graph","buildLayerGraph","rank","relationship","root","result","setGraph","compound","setDefaultNodeLabel","node","forEach","nodes","parent","minRank","maxRank","setNode","setParent","e","u","w","edge","weight","isUndefined","setEdge","has","borderLeft","borderRight"]
}
