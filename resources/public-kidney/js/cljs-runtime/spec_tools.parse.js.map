{"version":3,"sources":["spec_tools/parse.cljc"],"mappings":";AAKA,AAAA,AACA,AAAA,AAEA,uCAAA,vCAAMA,sFAAqBC;AAA3B,AACE,IAAAC,eAAC,EAAI,AAACC,4BAAYF,OAAMG,gBAAMC;AAA9B,AAAA,QAAAH,6CAAAA,mDAAAA,RAAwCD,+BAAAA;;AAE1C,0CAAA,1CAAMK,4FAAkBL;AAAxB,AACE,iCAAA,iFAAA,4DAAA,8DAAA,8DAAA,uDAAA,1VAACM,iaAA8CN;;AAEjD,oCAAA,pCAAMO,gFAAYP;AAAlB,AACE,UAAK,AAACM,0BAAU,CAACE,gEAAAA,kEAAAA,4CAAgBR;;AAEnC;;;;;8BAAA,9BAAMS,oEAIHC;;AAJH,AAKE,GAGE,6CAAA,7CAACC,oIAAcD;AAHjB;;AAAA,GAOE,AAACE,mCAAmBF;AACpB,eAAO,AAACG,qBAAO,AAACC,yBAAWJ;;;;AAR7B,GAWE,cAAAK,bAASL;AACT,IAAAM,WAAY,AAACG,iCAAsBT;IAAnCO,WAAA;AAAA,AAAA,8HAAAD,SAAAC,kDAAAD,SAAAC,1LAACC,4DAAAA,+EAAAA;;AAZH,GAeE,AAACE,qBAAKV;AACN,IAAAW,WAAY,AAACF,iCAAsB,AAAChB,gBAAMO;IAA1CY,WAA8CZ;AAA9C,AAAA,8HAAAW,SAAAC,kDAAAD,SAAAC,1LAACJ,4DAAAA,+EAAAA;;AAhBH,oBAmBE,AAACK,4BAAQb;AACT,eAAO,AAACG,qBAAOH;;;;AApBjB,GAuBE,AAACc,qBAAKd;AACN,IAAAe,WAAY,AAACE,2DAAkBjB;IAA/BgB,WAAA;AAAA,AAAA,8HAAAD,SAAAC,kDAAAD,SAAAC,1LAACR,4DAAAA,+EAAAA;;AAxBH,AA2BQ,gIAAA,gDAAA,xKAACA,4DAAAA,oEAAAA,VAAWR,gDAAAA;;;;;;;;;;;AAEtB,4CAAA,5CAAMkB,gGAA0BlB;AAAhC,AACE,OAACmB,uGAAM,AAACpB,4BAAWC,GAAG,yCAAA,2CAAA,8DAAA,hJAAI,AAACE,mCAAmBF,mGAAUA;;AAE1D,4BAAA,5BAAMoB,gEAAUC;AAAhB,AACE,IAAAC,mBAAI,AAAA,kHAAQD;AAAZ,AAAA,oBAAAC;AAAAA;;AACI,IAAAC,WAASF;IAATE,eAAA,EAAA,CAAAA,YAAA,OAAA,KAAA,AAAA,oHAAAA;IAAAA,eAAA,EAAA,CAAAA,gBAAA,OAAA,KAA4B,uEAAAA,vEAACC,6CAAKJ;IAAlCG,eAAA,EAAA,CAAAA,gBAAA,OAAA,KAA4C,+DAAAA,/DAACE,8CAAMC;IAAnDH,eAAA,EAAA,CAAAA,gBAAA,OAAA,KAA2D,cAAAA,dAACI;AAA5D,AAAA,GAAA,CAAAJ,gBAAA;AAAA;;AAAiE,qBAAAA,dAACK;;;;AAExE,GAAA,QAAAC,uCAAAC,6CAAAC;AAAA;AAAA,AAAA,8BAAA,iBAAAC,6BAAA,AAAAC,6CAAA,zHAAUzB;IAAV0B,6BAAA,AAAAD,6CAAA;IAAAE,6BAAA,AAAAF,6CAAA;IAAAG,iCAAA,AAAAH,6CAAA;IAAAI,0BAAA,AAAAC,4CAAA,2CAAA,4DAAA,mGAAA,gEAAA,iBAAAC,eAAA;AAAA,AAAA,QAAAA,6CAAAA,+CAAAA;;AAAA,AAAA,YAAAC,kBAAA,AAAAC,+CAAA,mBAAA,cAAqB,WAAKC,SAASC;AAAd,AAAiBD;GAAtC,2FAAAL,wBAAAL,2BAAAE,2BAAAC,2BAAAC;;;AAEA,AAAA5B,wEAAA,2FAAA,WAAiCmC,EAAEA;AAAnC,AAAA,kDAAA,qDAAA;;AAEA,kCAAA,lCAAO7C;AAAP,AAAA,wFAAA,qDAAA,4DAAA,8DAAA,8DAAA,wDAAA,uDAAA,wDAAA;;AAGA,yBAAA,zBAAM8C;AAAN,AAAA,yFAAA,2DAAA,0DAAA,6DAAA,+DAAA,qDAAA,4DAAA,+DAAA,8DAAA,yDAAA,8DAAA,+DAAA,4DAAA,8DAAA,wDAAA,wDAAA,2DAAA,uDAAA,iEAAA,wDAAA;;AAsBA,gCAAA,hCAAMC;AAAN,AACE,8HAAIrC,nBACAsC,fACAC,vEACK,uEAAA,eAAA,tFAACC,+CAAOC,7DACbrB;;AAEN,AAAApB,wEAAA,AAAA,iFAAA,WAAwDmC,EAAEA;AAA1D,AAAA,kDAAA,oDAAoEO;;AACpE,AAAA1C,wEAAA,AAAA,kFAAA,WAAwDmC,EAAEA;AAA1D,AAAA,kDAAA,oDAAoEQ;;AACpE,AAAA3C,wEAAA,AAAA,uFAAA,WAAwDmC,EAAEA;AAA1D,AAAA,kDAAA,4EAAA,qDAAA,7EAAoES;;AACpE,AAAA5C,wEAAA,AAAA,yFAAA,WAAwDmC,EAAEA;AAA1D,AAAA,kDAAA,6EAAA,qDAAA,9EAAoEU;;AACpE,AAAA7C,wEAAA,AAAA,gFAAA,WAAwDmC,EAAEA;AAA1D,AAAA,kDAAA,yEAAA,qDAAA,1EAAoEW;;AACpE,AAAA9C,wEAAA,AAAA,yFAAA,WAAwDmC,EAAEA;AAA1D,AAAA,kDAAA,6EAAA,qDAAA,9EAAoEY;;AACpE,AAAA/C,wEAAA,AAAA,wFAAA,WAAwDmC,EAAEA;AAA1D,AAAA,kDAAA,6EAAA,qDAAA,9EAAoEa;;AACpE,AAAAhD,wEAAA,AAAA,uFAAA,WAAwDmC,EAAEA;AAA1D,AAAA,kDAAA,6EAAA,qDAAA,9EAAoEc;;AACpE,AAAAjD,wEAAA,AAAA,mFAAA,WAAwDmC,EAAEA;AAA1D,AAAA,kDAAA,2EAAA,qDAAA,5EAAoEe;;AACpE,AAAAlD,wEAAA,AAAA,sFAAA,WAAwDmC,EAAEA;AAA1D,AAAA,kDAAA,4EAAA,qDAAA,7EAAoEgB;;AACpE,AAAAnD,wEAAA,AAAA,wFAAA,WAAwDmC,EAAEA;AAA1D,AAAA,kDAAA,6EAAA,qDAAA,9EAAoEiB;;AACpE,AAAApD,wEAAA,AAAA,uFAAA,WAAwDmC,EAAEA;AAA1D,AAAA,kDAAA,4EAAA,qDAAA,7EAAoEkB;;AACpE,AAAArD,wEAAA,AAAA,oFAAA,WAAwDmC,EAAEA;AAA1D,AAAA,kDAAA,2EAAA,qDAAA,5EAAoEmB;;AACpE,AAAAtD,wEAAA,AAAA,kGAAA,WAAwDmC,EAAEA;AAA1D,AAAA,kDAAA,kFAAA,qDAAA,nFAAoEoB;;AACpE,AAAAvD,wEAAA,AAAA,yGAAA,WAAwDmC,EAAEA;AAA1D,AAAA,kDAAA,qFAAA,qDAAA,tFAAoEqB;;AACpE,AAAAxD,wEAAA,AAAA,uFAAA,WAAwDmC,EAAEA;AAA1D,AAAA,kDAAA,6EAAA,qDAAA,9EAAoEsB;;AACpE,AAAAzD,wEAAA,AAAA,qGAAA,WAAwDmC,EAAEA;AAA1D,AAAA,kDAAA,oFAAA,qDAAA,rFAAoEuB;;AACpE,AAAA1D,wEAAA,AAAA,4GAAA,WAAwDmC,EAAEA;AAA1D,AAAA,kDAAA,uFAAA,qDAAA,xFAAoEzC;;AACpE,AAAAM,wEAAA,AAAA,sFAAA,WAAwDmC,EAAEA;AAA1D,AAAA,kDAAA,4EAAA,qDAAA,7EAAoEM;;AACpE,AAAAzC,wEAAA,AAAA,qGAAA,WAAwDmC,EAAEA;AAA1D,AAAA,kDAAA,mFAAA,qDAAA,pFAAoEwB;;AACpE,AAAA3D,wEAAA,AAAA,0GAAA,WAAwDmC,EAAEA;AAA1D,AAAA,kDAAA,sFAAA,qDAAA,vFAAoEyB;;AACpE,AAAA5D,wEAAA,AAAA,kFAAA,WAAwDmC,EAAEA;AAA1D,AAAA,kDAAA,0EAAA,qDAAA,3EAAoE0B;;AAGpE,AAAA7D,wEAAA,AAAA,mFAAA,WAAwDmC,EAAEA;AAA1D,AAAA,kDAAA,0EAAA,qDAAA,3EAAoE2B;;AACpE,AAAA9D,wEAAA,AAAA,wFAAA,WAAwDmC,EAAEA;AAA1D,AAAA,kDAAA,oDAAoE4B;;AACpE,AAAA/D,wEAAA,AAAA,yFAAA,WAAwDmC,EAAEA;AAA1D,AAAA,kDAAA,oDAAoE6B;;AACpE,AAAAhE,wEAAA,AAAA,iFAAA,WAAwDmC,EAAEA;AAA1D,AAAA,kDAAA,oDAAoE8B;;AACpE,AAAAjE,wEAAA,AAAA,uFAAA,WAAwDmC,EAAEA;AAA1D,AAAA,kDAAA,oDAAoE+B;;AACpE,AAAAlE,wEAAA,AAAA,kFAAA,WAAwDmC,EAAEA;AAA1D,AAAA,kDAAA,oDAAoEgC;;AACpE,AAAAnE,wEAAA,AAAA,iFAAA,WAAwDmC,EAAEA;AAA1D,AAAA,kDAAA,oDAAoEjC;;AACpE,AAAAF,wEAAA,AAAA,iFAAA,WAAwDmC,EAAEA;AAA1D,AAAA,kDAAA,oDAAoEiC;;AACpE,AAAApE,wEAAA,AAAA,iFAAA,WAAwDmC,EAAEA;AAA1D,AAAA,kDAAA,oDAAoEkC;;AACpE,AAAArE,wEAAA,AAAA,+EAAA,WAAwDmC,EAAEA;AAA1D,AAAA,kDAAA,oDAAoEmC;;AACpE,AAAAtE,wEAAA,AAAA,qFAAA,WAAwDmC,EAAEA;AAA1D,AAAA,kDAAA,2EAAA,qDAAA,5EAAoEoC;;AACpE,AAAAvE,wEAAA,AAAA,iFAAA,WAAwDmC,EAAEA;AAA1D,AAAA,kDAAA,0EAAA,qDAAA,3EAAoEqC;;AACpE,AAAAxE,wEAAA,AAAA,kFAAA,WAAwDmC,EAAEA;AAA1D,AAAA,kDAAA,0EAAA,qDAAA,3EAAoEsC;;AAEpE,AAAAzE,wEAAA,AAAA,kFAAA,WAAwDmC,EAAEA;AAA1D,AAAA,kDAAA,oDAAoEuC;;AACpE,AAAA1E,wEAAA,AAAA,oFAAA,WAAwDmC,EAAEA;AAA1D,AAAA,kDAAA,oDAAoEwC;;AACpE,AAAA3E,wEAAA,AAAA,+FAAA,WAAwDmC,EAAEA;AAA1D,AAAA,kDAAA,iFAAA,qDAAA,lFAAoEyC;;AACpE,AAAA5E,wEAAA,AAAA,8FAAA,WAAwDmC,EAAEA;AAA1D,AAAA,kDAAA,oDAAoEnD;;AAIpE,AAAAgB,wEAAA,8FAAA,WAAmDmC,EAAEA;AAArD,AAAA;;AAEA,AAAAnC,wEAAA,AAAA,2FAAA,WAAgDmC,EAAE0C;AAAlD,AACE,IAAAC,aAAgD,AAACO,2BAAgBR;IAAjEC,iBAAA,AAAAC,4BAAAD;UAAA,AAAAhD,4CAAAgD,eAAA,jEAAcE;UAAd,AAAAlD,4CAAAgD,eAAA,jEAAkBG;aAAlB,AAAAnD,4CAAAgD,eAAA,pEAAsBI;aAAtB,AAAApD,4CAAAgD,eAAA,pEAA6BK;mBAA7B,AAAArD,4CAAAgD,eAAA,1EAAoCM;AAApC,AACE,IAAAE,WAAA,2CAAA,qDAAA,mDAAA,2GAAA,bACqBF,iGACL,AAAChE,cAAI,AAACmE,sDAAOP,IAAIC,sDAAIC,OAAOC;IAF5CG,eAAA,kBAGQ,iBAAAxE,mBAAIkE;AAAJ,AAAA,oBAAAlE;AAAAA;;AAAQoE;;qOAHhBI,/NAGwB,8CAAAA,SAAA,vDAACE,oJAAiB,AAACpE,cAAI,AAACmE,+CAAOP,IAAIE;AAH3D,AAAA,oBAIQ,iBAAApE,mBAAImE;AAAJ,AAAA,oBAAAnE;AAAAA;;AAAQqE;;;AAAQ,qDAAAG,aAAA,3DAACE,wJAAiB,AAACpE,cAAI,AAACmE,+CAAON,IAAIE;;AAJ3DG;;;AAMJ,AAAAtF,wEAAA,AAAA,uFAAA,WAA8CmC,EAAE0C;AAAhD,AACE,IAAMY,QAAM,AAACC,6CAAK,AAACC,6CAAKjF,0CAAyBkF,kBAAQ,kDAAA,lDAACC,sDAAY,AAACC,eAAKjB;AAA5E,AAAA,kDAAA,qDAAA,mFAAA,kSAAA,lBACmBY,jGAAM,4CAAA,5CAACM,jDAAW,AAACC,hEAAU,AAAChF,6CAAK9B,3DAAU,AAAC+G,wUACtDR;;AAEb,AAAAzF,wEAAA,AAAA,0FAAA,WAA+CmC,EAAE0C;AAAjD,AACE,IAAMY,QAAM,AAACC,6CAAKhF,0CAAyB,AAACoF,eAAKjB;IAC3CqB,wOAAWT,jGAAM,4CAAA,5CAACM,jDAAW,AAACC,hEAAU,AAAChF,6CAAK9B,3DAAU,AAAC+G;AAD/D,AAAA,kDAAA,qDAAA,mFAAA,iEAAA,dAEeC,oGACJT;;AAEb,AAAAzF,wEAAA,AAAA,6FAAA,WAAiDmC,EAAE0C;AAAnD,AACE,OAAC5D,8CAAMkF,2BAAgB,AAACJ,4CAAIxG,4BAAW,AAACuG,eAAKjB;;AAE/C,AAAA7E,wEAAA,AAAA,+FAAA,WAAiDmC,EAAE0C;AAAnD,AACE,IAAAuB,aAAqB,AAACnF,8CAAMqF,mBAAS,6CAAA,7CAACC,iDAAO1B;IAA7CuB,iBAAA,AAAArB,4BAAAqB;WAAA,AAAAtE,4CAAAsE,eAAA,lEAAcC;AAAd,AAAA,kDAAA,wIAAA,pDACU,AAAC9G,4BAAW,AAACqG,iBAAOf,4DAE3B,8BAAA,yDAAA,8BAAA,kDAAA,AAAA,rKACE,AAACZ,qBAAKoC,kEACN,AAAChC,qBAAKgC;;;AAKb,AAAArG,wEAAA,AAAA,kGAAA,WAAmDmC,EAAE0C;AAArD,AACE,IAAA2B,aAAqB,AAACvF,8CAAMqF,mBAAS,6CAAA,7CAACC,iDAAO1B;IAA7C2B,iBAAA,AAAAzB,4BAAAyB;WAAA,AAAA1E,4CAAA0E,eAAA,lEAAcH;AAAd,AAAA,kDAAA,sJAAA,lEACU,AAAC3F,0CAAyB,AAACkF,iBAAOf,4DAEzC,8BAAA,yDAAA,8BAAA,kDAAA,AAAA,rKACE,AAACZ,qBAAKoC,kEACN,AAAChC,qBAAKgC;;;AAGb,AAAArG,wEAAA,AAAA,gGAAA,aAAAyG,FAAkDtE;AAAlD,AAAA,IAAAuE,aAAAD;YAAA,AAAAE,4CAAAD,WAAA,IAAA,nEAAqDvE;QAArD,AAAAwE,4CAAAD,WAAA,IAAA,/DAAuDE;QAAvD,AAAAD,4CAAAD,WAAA,IAAA,/DAAyDG;AAAzD,AAAA,kDAAA,qDAAA,yDAAA,+HAAA,7CAES,AAACnG,0CAAyBkG,yFACxB,AAAClG,0CAAyBmG;;AAErC,AAAA7G,wEAAA,AAAA,sFAAA,WAA6CmC,EAAE0C;AAA/C,AACE,IAAMiC,SAAO,4BAAA,AAAA,kFAAA,eAAIjC,fAAKkC,9GAAWxH;AAAjC,AACE,oBAAI,AAAA,mFAAOuH;AAAQA;;AAAnB,kDAAA,qDAAA;;;AAUJ,AAAA9G,wEAAA,AAAA,6FAAA,aAAAgH,FAAiD7E;AAAjD,AAAA,IAAA8E,aAAAD;IAAAE,aAAA,AAAA/F,cAAA8F;IAAAE,eAAA,AAAAlI,gBAAAiI;IAAAA,iBAAA,AAAAE,eAAAF;YAAAC,RAAoDhF;aAApD+E,TAAwDG;AAAxD,AACE,IAAM5B,QAAM,AAACC,6CAAKhF,0CAAyB2G;IACrCnB,QAAM,6CAAA,7CAACR,kGAAWD;AADxB,AAAA,kDAAA,qDAAA,mFAAA,qEAAA,dAEiBS,oGACNT;;AAEb,AAAAzF,wEAAA,AAAA,mGAAA,WAAmDmC,EAAE0C;AAArD,AACE,IAAMyC,OAAK,0CAAA,iBAAIzC,jBAAKe,1CAAOlF;AAA3B,AAAA,kDAAA,qDAAA,2DAAA,oFAEU4G;;AAEZ,AAAAtH,wEAAA,AAAA,wFAAA,WAA8CmC,EAAE0C;AAAhD,AACE,OAAC5D,8CAAMkF,2BAAgB,AAACJ,4CAAIxG,4BAAW,AAACuG,eAAKjB","names":["spec-tools.parse/type-dispatch-value","type","fexpr__65684","cljs.core/sequential?","cljs.core/first","cljs.core/identity","spec-tools.parse/collection-type?","cljs.core/contains?","spec-tools.parse/leaf-type?","spec-tools.parse/non-leaf-types","spec-tools.parse/parse-spec","x","cljs.core._EQ_","cljs.core/qualified-keyword?","cljs.spec.alpha/form","cljs.spec.alpha/get-spec","cljs.core/Symbol","G__65686","G__65687","spec-tools.parse/parse-form","spec-tools.impl/normalize-symbol","cljs.core/seq?","G__65688","G__65689","cljs.spec.alpha/spec?","cljs.core/ifn?","G__65690","G__65691","spec-tools.form/resolve-form","spec-tools.parse/parse-spec-with-spec-ref","cljs.core.merge","spec-tools.parse/get-keys","parse-data","or__4253__auto__","G__65694","cljs.core.keep","cljs.core.apply","cljs.core/concat","cljs.core/seq","cljs.core/set","js/spec-tools","js/spec-tools.parse","js/spec-tools.parse.parse-form","method-table__4747__auto__","cljs.core.atom","prefer-table__4748__auto__","method-cache__4749__auto__","cached-hierarchy__4750__auto__","hierarchy__4751__auto__","cljs.core.get","fexpr__65695","cljs.core/MultiFn","cljs.core.symbol","dispatch","_","spec-tools.parse/types","spec-tools.parse/type-symbols","cljs.core/methods","cljs.core/keys","cljs.core.filter","cljs.core/symbol?","cljs.core/any?","cljs.core/some?","cljs.core/number?","cljs.core/integer?","cljs.core/int?","cljs.core/pos-int?","cljs.core/neg-int?","cljs.core/nat-int?","cljs.core/float?","cljs.core/double?","cljs.core/boolean?","cljs.core/string?","cljs.core/ident?","cljs.core/simple-ident?","cljs.core/qualified-ident?","cljs.core/keyword?","cljs.core/simple-keyword?","cljs.core/simple-symbol?","cljs.core/qualified-symbol?","cljs.core/uuid?","cljs.core/inst?","cljs.core/seqable?","cljs.core/indexed?","cljs.core/map?","cljs.core/vector?","cljs.core/list?","cljs.core/char?","cljs.core/set?","cljs.core/nil?","cljs.core/false?","cljs.core/true?","cljs.core/zero?","cljs.core/coll?","cljs.core/empty?","cljs.core/associative?","form","map__65705","cljs.core/--destructure-map","req","opt","req-un","opt-un","key->spec","spec-tools.impl/parse-keys","G__65706","cljs.core.concat","cljs.core.assoc","specs","cljs.core.mapv","cljs.core.comp","cljs.core/second","cljs.core.partition","cljs.core/rest","cljs.core.map","cljs.core.distinct","cljs.core/vec","types","spec-tools.impl/deep-merge","map__65707","into","cljs.core/hash-map","cljs.core.drop","map__65708","p__65709","vec__65710","cljs.core.nth","k","v","parsed","cljs.core/last","p__65713","vec__65714","seq__65715","first__65716","cljs.core/next","values","spec"],"sourcesContent":["(ns spec-tools.parse\n  (:require [spec-tools.impl :as impl]\n            [clojure.spec.alpha :as s]\n            [spec-tools.form :as form]))\n\n(declare parse-form)\n(declare non-leaf-types)\n\n(defn type-dispatch-value [type]\n  ((if (sequential? type) first identity) type))\n\n(defn collection-type? [type]\n  (contains? #{:map :map-of :set :vector :tuple} type))\n\n(defn leaf-type? [type]\n  (not (contains? (non-leaf-types) type)))\n\n(defn parse-spec\n  \"Parses info out of a spec. Spec can be passed as a name, Spec or a form.\n  Returns either `nil` or a map, with keys `:type` and other extra keys\n  (like `:keys` for s/keys specs).\"\n  [x]\n  (cond\n\n    ;; unknown\n    (= ::s/unknown x)\n    nil\n\n    ;; spec name\n    (qualified-keyword? x)\n    (recur (s/form (s/get-spec x)))\n\n    ;; symbol\n    (symbol? x)\n    (parse-form (impl/normalize-symbol x) nil)\n\n    ;; a from\n    (seq? x)\n    (parse-form (impl/normalize-symbol (first x)) x)\n\n    ;; a spec\n    (s/spec? x)\n    (recur (s/form x))\n\n    ;; a predicate\n    (ifn? x)\n    (parse-form (form/resolve-form x) nil)\n\n    ;; default\n    :else (parse-form x nil)))\n\n(defn parse-spec-with-spec-ref [x]\n  (merge (parse-spec x) (if (qualified-keyword? x) {:spec x})))\n\n(defn get-keys [parse-data]\n  (or (::keys parse-data)\n      (some->> parse-data ::items (keep get-keys) (apply concat) (seq) (set))))\n\n(defmulti parse-form (fn [dispatch _] dispatch) :default ::default)\n\n(defmethod parse-form ::default [_ _] {:type nil})\n\n(defn- non-leaf-types []\n  #{:map :map-of :and :or :nilable :tuple :set :vector})\n\n(defn types []\n  #{:long\n    :double\n    :boolean\n    :string\n    :keyword\n    :symbol\n    :uuid\n    :uri\n    :bigdec\n    :date\n    :ratio\n    :map\n    :map-of\n    :and\n    :or\n    :set\n    :tuple\n    :nilable\n    :vector\n    :spec})\n\n(defn type-symbols []\n  (-> parse-form\n      methods\n      keys\n      (->> (filter symbol?))\n      set))\n\n(defmethod parse-form 'clojure.core/any?               [_ _] {:spec any?})\n(defmethod parse-form 'clojure.core/some?              [_ _] {:spec some?})\n(defmethod parse-form 'clojure.core/number?            [_ _] {:spec number?, :type :double})\n(defmethod parse-form 'clojure.core/integer?           [_ _] {:spec integer?, :type :long})\n(defmethod parse-form 'clojure.core/int?               [_ _] {:spec int?, :type :long})\n(defmethod parse-form 'clojure.core/pos-int?           [_ _] {:spec pos-int?, :type :long})\n(defmethod parse-form 'clojure.core/neg-int?           [_ _] {:spec neg-int?, :type :long})\n(defmethod parse-form 'clojure.core/nat-int?           [_ _] {:spec nat-int?, :type :long})\n(defmethod parse-form 'clojure.core/float?             [_ _] {:spec float?, :type :double})\n(defmethod parse-form 'clojure.core/double?            [_ _] {:spec double?, :type :double})\n(defmethod parse-form 'clojure.core/boolean?           [_ _] {:spec boolean?, :type :boolean})\n(defmethod parse-form 'clojure.core/string?            [_ _] {:spec string?, :type :string})\n(defmethod parse-form 'clojure.core/ident?             [_ _] {:spec ident? :type :keyword})\n(defmethod parse-form 'clojure.core/simple-ident?      [_ _] {:spec simple-ident?, :type :keyword})\n(defmethod parse-form 'clojure.core/qualified-ident?   [_ _] {:spec qualified-ident?, :type :keyword})\n(defmethod parse-form 'clojure.core/keyword?           [_ _] {:spec keyword?, :type :keyword})\n(defmethod parse-form 'clojure.core/simple-keyword?    [_ _] {:spec simple-keyword?, :type :keyword})\n(defmethod parse-form 'clojure.core/qualified-keyword? [_ _] {:spec qualified-keyword? :type :keyword})\n(defmethod parse-form 'clojure.core/symbol?            [_ _] {:spec symbol?, :type :symbol})\n(defmethod parse-form 'clojure.core/simple-symbol?     [_ _] {:spec simple-symbol?, :type :symbol})\n(defmethod parse-form 'clojure.core/qualified-symbol?  [_ _] {:spec qualified-symbol?, :type :symbol})\n(defmethod parse-form 'clojure.core/uuid?              [_ _] {:spec uuid?, :type :uuid})\n#?(:clj (defmethod parse-form 'clojure.core/uri?       [_ _] {:spec uri?, :type :uri}))\n#?(:clj (defmethod parse-form 'clojure.core/decimal?   [_ _] {:spec decimal?, :type :bigdec}))\n(defmethod parse-form 'clojure.core/inst?              [_ _] {:spec inst?, :type :date})\n(defmethod parse-form 'clojure.core/seqable?           [_ _] {:spec seqable?})\n(defmethod parse-form 'clojure.core/indexed?           [_ _] {:spec indexed?})\n(defmethod parse-form 'clojure.core/map?               [_ _] {:spec map?})\n(defmethod parse-form 'clojure.core/vector?            [_ _] {:spec vector?})\n(defmethod parse-form 'clojure.core/list?              [_ _] {:spec list?})\n(defmethod parse-form 'clojure.core/seq?               [_ _] {:spec seq?})\n(defmethod parse-form 'clojure.core/char?              [_ _] {:spec char?})\n(defmethod parse-form 'clojure.core/set?               [_ _] {:spec set?})\n(defmethod parse-form 'clojure.core/nil?               [_ _] {:spec nil?})\n(defmethod parse-form 'clojure.core/false?             [_ _] {:spec false?, :type :boolean})\n(defmethod parse-form 'clojure.core/true?              [_ _] {:spec true?, :type :boolean})\n(defmethod parse-form 'clojure.core/zero?              [_ _] {:spec zero?, :type :long})\n#?(:clj (defmethod parse-form 'clojure.core/rational?  [_ _] {:spec rational?, :type :long}))\n(defmethod parse-form 'clojure.core/coll?              [_ _] {:spec coll?})\n(defmethod parse-form 'clojure.core/empty?             [_ _] {:spec empty?})\n(defmethod parse-form 'clojure.core/associative?       [_ _] {:spec associative?, :type nil})\n(defmethod parse-form 'clojure.core/sequential?        [_ _] {:spec sequential?})\n#?(:clj (defmethod parse-form 'clojure.core/ratio?     [_ _] {:spec ratio?, :type :ratio}))\n#?(:clj (defmethod parse-form 'clojure.core/bytes?     [_ _] {:spec bytes?}))\n\n(defmethod parse-form :clojure.spec.alpha/unknown [_ _])\n\n(defmethod parse-form 'clojure.spec.alpha/keys [_ form]\n  (let [{:keys [req opt req-un opt-un key->spec]} (impl/parse-keys form)]\n    (cond-> {:type :map\n             ::key->spec key->spec\n             ::keys (set (concat req opt req-un opt-un))}\n            (or req req-un) (assoc ::keys-req (set (concat req req-un)))\n            (or opt opt-un) (assoc ::keys-opt (set (concat opt opt-un))))))\n\n(defmethod parse-form 'clojure.spec.alpha/or [_ form]\n  (let [specs (mapv (comp parse-spec-with-spec-ref second) (partition 2 (rest form)))]\n    {:type [:or (->> specs (map :type) (distinct) (keep identity) (vec))]\n     ::items specs}))\n\n(defmethod parse-form 'clojure.spec.alpha/and [_ form]\n  (let [specs (mapv parse-spec-with-spec-ref (rest form))\n        types (->> specs (map :type) (distinct) (keep identity) (vec))]\n    {:type [:and types]\n     ::items specs}))\n\n(defmethod parse-form 'clojure.spec.alpha/merge [_ form]\n  (apply impl/deep-merge (map parse-spec (rest form))))\n\n(defmethod parse-form 'clojure.spec.alpha/every [_ form]\n  (let [{:keys [into]} (apply hash-map (drop 2 form))]\n    {::item (parse-spec (second form))\n     :type\n     (cond\n       (map? into) :map-of\n       (set? into) :set\n       :else :vector)}))\n\n; every-ks\n\n(defmethod parse-form 'clojure.spec.alpha/coll-of [_ form]\n  (let [{:keys [into]} (apply hash-map (drop 2 form))]\n    {::item (parse-spec-with-spec-ref (second form))\n     :type\n     (cond\n       (map? into) :map-of\n       (set? into) :set\n       :else :vector)}))\n\n(defmethod parse-form 'clojure.spec.alpha/map-of [_ [_ k v]]\n  {:type :map-of\n   ::key (parse-spec-with-spec-ref k)\n   ::value (parse-spec-with-spec-ref v)})\n\n(defmethod parse-form 'spec-tools.core/spec [_ form]\n  (let [parsed (-> form last :spec parse-spec)]\n    (if (:type parsed) parsed {:type :spec})))\n\n; *\n; +\n; ?\n; alt\n; cat\n; &\n; keys*\n\n(defmethod parse-form 'clojure.spec.alpha/tuple [_ [_ & values]]\n  (let [specs (mapv parse-spec-with-spec-ref values)\n        types (mapv :type specs)]\n    {:type [:tuple types]\n     ::items specs}))\n\n(defmethod parse-form 'clojure.spec.alpha/nilable [_ form]\n  (let [spec (-> form second parse-spec-with-spec-ref)]\n    {:type :nilable\n     ::item spec}))\n\n(defmethod parse-form 'spec-tools.core/merge [_ form]\n  (apply impl/deep-merge (map parse-spec (rest form))))\n"]}