shadow$provide.module$node_modules$graphlib$lib$alg$prim=function(global,require,module,exports){var _=require("module$node_modules$graphlib$lib$lodash"),Graph=require("module$node_modules$graphlib$lib$graph"),PriorityQueue=require("module$node_modules$graphlib$lib$data$priority_queue");module.exports=function(g,weightFunc){function updateNeighbors(edge){var w=edge.v===v$jscomp$0?edge.w:edge.v,pri=pq.priority(w);void 0!==pri&&(edge=weightFunc(edge),edge<pri&&(parents[w]=v$jscomp$0,pq.decrease(w,edge)))}
var result=new Graph,parents={},pq=new PriorityQueue;if(0===g.nodeCount())return result;_.each(g.nodes(),function(v){pq.add(v,Number.POSITIVE_INFINITY);result.setNode(v)});pq.decrease(g.nodes()[0],0);for(var init=!1;0<pq.size();){var v$jscomp$0=pq.removeMin();if(_.has(parents,v$jscomp$0))result.setEdge(v$jscomp$0,parents[v$jscomp$0]);else{if(init)throw Error("Input graph is not connected: "+g);init=!0}g.nodeEdges(v$jscomp$0).forEach(updateNeighbors)}return result}}
//# sourceMappingURL=module$node_modules$graphlib$lib$alg$prim.js.map
