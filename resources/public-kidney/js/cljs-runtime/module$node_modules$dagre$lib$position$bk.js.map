{
"version":3,
"file":"module$node_modules$dagre$lib$position$bk.js",
"lineCount":13,
"mappings":"AAAAA,cAAA,CAAA,yCAAA,CAA8D,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CA0CtGC,QAASA,mBAAkB,CAACC,CAAD,CAAIC,QAAJ,CAAc,CACvC,IAAIC,UAAY,EAoChBC,EAAEC,CAAAA,MAAF,CAASH,QAAT,CAlCAI,QAAmB,CAACC,SAAD,CAAYC,KAAZ,CAAmB,CAAA,IAIlCC,GAAK,CAJ6B,CAOlCC,QAAU,CAPwB,CAQlCC,gBAAkBJ,SAAUK,CAAAA,MARM,CASlCC,SAAWT,CAAEU,CAAAA,IAAF,CAAON,KAAP,CAEbJ,EAAEW,CAAAA,OAAF,CAAUP,KAAV,CAAiB,QAAQ,CAACQ,CAAD,CAAIC,CAAJ,CAAO,CAAA,IAC1BC,EAAIC,yBAAA,CAA0BlB,CAA1B,CAA6Be,CAA7B,CADsB,CAE5BI,GAAKF,CAAA,CAAIjB,CAAEoB,CAAAA,IAAF,CAAOH,CAAP,CAAUI,CAAAA,KAAd,CAAsBX,eAE7B,IAAIO,CAAJ,EAASF,CAAT,GAAeH,QAAf,CACET,CAAEW,CAAAA,OAAF,CAAUP,KAAMe,CAAAA,KAAN,CAAYb,OAAZ,CAAqBO,CAArB,CAAwB,CAAxB,CAAV,CAAsC,QAAQ,CAACO,QAAD,CAAW,CACvDpB,CAAEW,CAAAA,OAAF,CAAUd,CAAEwB,CAAAA,YAAF,CAAeD,QAAf,CAAV,CAAoC,QAAQ,CAACE,CAAD,CAAI,CAAA,IAC1CC;AAAS1B,CAAEoB,CAAAA,IAAF,CAAOK,CAAP,CADiC,CAE5CE,KAAOD,MAAOL,CAAAA,KACX,GAAAM,IAAA,CAAOnB,EAAP,EAAaW,EAAb,CAAkBQ,IAAlB,CAAL,EACMD,MAAOE,CAAAA,KADb,EACsB5B,CAAEoB,CAAAA,IAAF,CAAOG,QAAP,CAAiBK,CAAAA,KADvC,EAEEC,WAAA,CAAY3B,SAAZ,CAAuBuB,CAAvB,CAA0BF,QAA1B,CAL4C,CAAhD,CADuD,CAAzD,CAWA,CADAd,OACA,CADUO,CACV,CADc,CACd,CAAAR,EAAA,CAAKW,EAhBuB,CAAhC,CAoBA,OAAOZ,MA/B6B,CAkCtC,CACA,OAAOL,UAtCgC,CAyCzC4B,QAASA,mBAAkB,CAAC9B,CAAD,CAAIC,QAAJ,CAAc,CAGvC8B,QAASA,KAAI,CAACC,KAAD,CAAQC,QAAR,CAAkBC,QAAlB,CAA4BC,eAA5B,CAA6CC,eAA7C,CAA8D,CACzE,IAAIrB,CACJZ,EAAEW,CAAAA,OAAF,CAAUX,CAAEkC,CAAAA,KAAF,CAAQJ,QAAR,CAAkBC,QAAlB,CAAV,CAAuC,QAAQ,CAAClB,CAAD,CAAI,CACjDD,CAAA,CAAIiB,KAAA,CAAMhB,CAAN,CACAhB,EAAEoB,CAAAA,IAAF,CAAOL,CAAP,CAAUa,CAAAA,KAAd,EACEzB,CAAEW,CAAAA,OAAF,CAAUd,CAAEwB,CAAAA,YAAF,CAAeT,CAAf,CAAV,CAA6B,QAAQ,CAACU,CAAD,CAAI,CACvC,IAAIa,MAAQtC,CAAEoB,CAAAA,IAAF,CAAOK,CAAP,CACRa,MAAMV,CAAAA,KAAV,GACKU,KAAMjB,CAAAA,KADX,CACmBc,eADnB,EACsCG,KAAMjB,CAAAA,KAD5C,CACoDe,eADpD;AAEEP,WAAA,CAAY3B,SAAZ,CAAuBuB,CAAvB,CAA0BV,CAA1B,CAJqC,CAAzC,CAH+C,CAAnD,CAFyE,CAF3E,IAAIb,UAAY,EAwChBC,EAAEC,CAAAA,MAAF,CAASH,QAAT,CArBAI,QAAmB,CAACkC,KAAD,CAAQP,KAAR,CAAe,CAAA,IAC5BQ,aAAe,CAAC,CADY,CAE9BC,YAF8B,CAG9BR,SAAW,CAEb9B,EAAEW,CAAAA,OAAF,CAAUkB,KAAV,CAAiB,QAAQ,CAACjB,CAAD,CAAI2B,cAAJ,CAAoB,CACnB,QAAxB,GAAI1C,CAAEoB,CAAAA,IAAF,CAAOL,CAAP,CAAUa,CAAAA,KAAd,GACMJ,CACJ,CADmBxB,CAAEwB,CAAAA,YAAF,CAAeT,CAAf,CACnB,CAAIS,CAAab,CAAAA,MAAjB,GACE8B,YAGA,CAHezC,CAAEoB,CAAAA,IAAF,CAAOI,CAAA,CAAa,CAAb,CAAP,CAAwBH,CAAAA,KAGvC,CAFAU,IAAA,CAAKC,KAAL,CAAYC,QAAZ,CAAsBS,cAAtB,CAAsCF,YAAtC,CAAoDC,YAApD,CAEA,CADAR,QACA,CADWS,cACX,CAAAF,YAAA,CAAeC,YAJjB,CAFF,CASAV,KAAA,CAAKC,KAAL,CAAYC,QAAZ,CAAsBD,KAAMrB,CAAAA,MAA5B,CAAoC8B,YAApC,CAAkDF,KAAM5B,CAAAA,MAAxD,CAV2C,CAA7C,CAaA,OAAOqB,MAlByB,CAqBlC,CACA,OAAO9B,UA1CgC,CA6CzCgB,QAASA,0BAAyB,CAAClB,CAAD;AAAIe,CAAJ,CAAO,CACvC,GAAIf,CAAEoB,CAAAA,IAAF,CAAOL,CAAP,CAAUa,CAAAA,KAAd,CACE,MAAOzB,EAAEwC,CAAAA,IAAF,CAAO3C,CAAEwB,CAAAA,YAAF,CAAeT,CAAf,CAAP,CAA0B,QAAQ,CAACU,CAAD,CAAI,CAC3C,MAAOzB,EAAEoB,CAAAA,IAAF,CAAOK,CAAP,CAAUG,CAAAA,KAD0B,CAAtC,CAF8B,CAQzCC,QAASA,YAAW,CAAC3B,SAAD,CAAYa,CAAZ,CAAeE,CAAf,CAAkB,CACpC,GAAIF,CAAJ,CAAQE,CAAR,CAAW,CACT,IAAI2B,IAAM7B,CACVA,EAAA,CAAIE,CACJA,EAAA,CAAI2B,GAHK,CAOX,CADIC,GACJ,CADiB3C,SAAA,CAAUa,CAAV,CACjB,IACEb,SAAA,CAAUa,CAAV,CADF,CACiB8B,GADjB,CAC8B,EAD9B,CAGAA,IAAA,CAAW5B,CAAX,CAAA,CAAgB,CAAA,CAXoB,CActC6B,QAASA,YAAW,CAAC5C,SAAD,CAAYa,CAAZ,CAAeE,CAAf,CAAkB,CACpC,GAAIF,CAAJ,CAAQE,CAAR,CAAW,CACT,IAAI2B,IAAM7B,CACVA,EAAA,CAAIE,CACJA,EAAA,CAAI2B,GAHK,CAKX,MAAOzC,EAAE4C,CAAAA,GAAF,CAAM7C,SAAA,CAAUa,CAAV,CAAN,CAAoBE,CAApB,CAN6B,CAiBtC+B,QAASA,kBAAiB,CAAChD,CAAD,CAAIC,QAAJ,CAAcC,SAAd,CAAyB+C,UAAzB,CAAqC,CAAA,IACzDC,KAAO,EADkD,CAE3DC,MAAQ,EAFmD,CAG3DC,IAAM,EAKRjD,EAAEW,CAAAA,OAAF,CAAUb,QAAV,CAAoB,QAAQ,CAACM,KAAD,CAAQ,CAClCJ,CAAEW,CAAAA,OAAF,CAAUP,KAAV,CAAiB,QAAQ,CAACQ,CAAD,CAAIM,KAAJ,CAAW,CAClC6B,IAAA,CAAKnC,CAAL,CAAA,CAAUA,CACVoC,MAAA,CAAMpC,CAAN,CAAA,CAAWA,CACXqC,IAAA,CAAIrC,CAAJ,CAAA,CAASM,KAHyB,CAApC,CADkC,CAApC,CAQAlB,EAAEW,CAAAA,OAAF,CAAUb,QAAV;AAAoB,QAAQ,CAACM,KAAD,CAAQ,CAClC,IAAI8C,QAAU,CAAC,CACflD,EAAEW,CAAAA,OAAF,CAAUP,KAAV,CAAiB,QAAQ,CAACQ,CAAD,CAAI,CAC3B,IAAIuC,GAAKL,UAAA,CAAWlC,CAAX,CACT,IAAIuC,EAAG3C,CAAAA,MAAP,CAAe,CACb2C,EAAA,CAAKnD,CAAEoD,CAAAA,MAAF,CAASD,EAAT,CAAa,QAAQ,CAACrC,CAAD,CAAI,CAAE,MAAOmC,IAAA,CAAInC,CAAJ,CAAT,CAAzB,CACL,KAAIuC,IAAMF,EAAG3C,CAAAA,MAAT6C,CAAkB,CAAlBA,EAAuB,CAA3B,CACSxC,EAAIyC,IAAKC,CAAAA,KAAL,CAAWF,EAAX,CAAb,KAA6BG,EAA7B,CAAkCF,IAAKG,CAAAA,IAAL,CAAUJ,EAAV,CAAlC,CAAiDxC,CAAjD,EAAsD2C,EAAtD,CAA0D,EAAE3C,CAA5D,CAA+D,CAC7D,IAAIC,WAAIqC,EAAA,CAAGtC,CAAH,CACJmC,MAAA,CAAMpC,CAAN,CAAJ,GAAiBA,CAAjB,EACIsC,OADJ,CACcD,GAAA,CAAInC,UAAJ,CADd,EAEI,CAAC6B,WAAA,CAAY5C,SAAZ,CAAuBa,CAAvB,CAA0BE,UAA1B,CAFL,GAGEkC,KAAA,CAAMlC,UAAN,CAEA,CAFWF,CAEX,CADAoC,KAAA,CAAMpC,CAAN,CACA,CADWmC,IAAA,CAAKnC,CAAL,CACX,CADqBmC,IAAA,CAAKjC,UAAL,CACrB,CAAAoC,OAAA,CAAUD,GAAA,CAAInC,UAAJ,CALZ,CAF6D,CAHlD,CAFY,CAA7B,CAFkC,CAApC,CAqBA,OAAO,CAAQiC,IAAR,CAAqBC,KAArB,CArCsD,CAwC/DU,QAASA,qBAAoB,CAAC7D,CAAD,CAAIC,QAAJ,CAAciD,IAAd,CAAoBC,KAApB,CAA2BW,UAA3B,CAAuC,CAUlEC,QAASA,QAAO,CAACC,SAAD;AAAYC,aAAZ,CAA2B,CAIzC,IAHA,IAAIC,MAAQC,MAAOC,CAAAA,KAAP,EAAZ,CACIC,KAAOH,KAAMI,CAAAA,GAAN,EADX,CAEIC,QAAU,EACd,CAAOF,IAAP,CAAA,CACME,OAAA,CAAQF,IAAR,CAAJ,CACEL,SAAA,CAAUK,IAAV,CADF,EAGEE,OAAA,CAAQF,IAAR,CAEA,CAFgB,CAAA,CAEhB,CADAH,KAAMM,CAAAA,IAAN,CAAWH,IAAX,CACA,CAAAH,KAAA,CAAQA,KAAMO,CAAAA,MAAN,CAAaR,aAAA,CAAcI,IAAd,CAAb,CALV,CAQA,CAAAA,IAAA,CAAOH,KAAMI,CAAAA,GAAN,EAbgC,CAVuB,IAM9DI,GAAK,EANyD,CAOhEP,OAASQ,eAAA,CAAgB3E,CAAhB,CAAmBC,QAAnB,CAA6BiD,IAA7B,CAAmCY,UAAnC,CAPuD,CAQhEc,WAAad,UAAA,CAAa,YAAb,CAA4B,aAsC3CC,QAAA,CAlBAc,QAAc,CAACR,IAAD,CAAO,CACnBK,EAAA,CAAGL,IAAH,CAAA,CAAWF,MAAOW,CAAAA,OAAP,CAAeT,IAAf,CAAqBjE,CAAAA,MAArB,CAA4B,QAAQ,CAAC2E,GAAD,CAAMC,CAAN,CAAS,CACtD,MAAOvB,KAAKwB,CAAAA,GAAL,CAASF,GAAT,CAAcL,EAAA,CAAGM,CAAEjE,CAAAA,CAAL,CAAd,CAAwBoD,MAAOe,CAAAA,IAAP,CAAYF,CAAZ,CAAxB,CAD+C,CAA7C,CAER,CAFQ,CADQ,CAkBrB,CAAeb,MAAO3C,CAAAA,YAAa2D,CAAAA,IAApB,CAAyBhB,MAAzB,CAAf,CACAJ,QAAA,CAZAqB,QAAc,CAACf,IAAD,CAAO,CACnB,IAAIgB;AAAMlB,MAAOmB,CAAAA,QAAP,CAAgBjB,IAAhB,CAAsBjE,CAAAA,MAAtB,CAA6B,QAAQ,CAAC2E,GAAD,CAAMC,CAAN,CAAS,CACtD,MAAOvB,KAAK4B,CAAAA,GAAL,CAASN,GAAT,CAAcL,EAAA,CAAGM,CAAE/D,CAAAA,CAAL,CAAd,CAAwBkD,MAAOe,CAAAA,IAAP,CAAYF,CAAZ,CAAxB,CAD+C,CAA9C,CAEPO,MAAOC,CAAAA,iBAFA,CAAV,CAIIpE,KAAOpB,CAAEoB,CAAAA,IAAF,CAAOiD,IAAP,CACPgB,IAAJ,GAAYE,MAAOC,CAAAA,iBAAnB,EAAwCpE,IAAKwD,CAAAA,UAA7C,GAA4DA,UAA5D,GACEF,EAAA,CAAGL,IAAH,CADF,CACaZ,IAAKwB,CAAAA,GAAL,CAASP,EAAA,CAAGL,IAAH,CAAT,CAAmBgB,GAAnB,CADb,CANmB,CAYrB,CAAelB,MAAOsB,CAAAA,UAAWN,CAAAA,IAAlB,CAAuBhB,MAAvB,CAAf,CAGAhE,EAAEW,CAAAA,OAAF,CAAUqC,KAAV,CAAiB,QAAQ,CAACpC,CAAD,CAAI,CAC3B2D,EAAA,CAAG3D,CAAH,CAAA,CAAQ2D,EAAA,CAAGxB,IAAA,CAAKnC,CAAL,CAAH,CADmB,CAA7B,CAIA,OAAO2D,GAtD2D,CA0DpEC,QAASA,gBAAe,CAAC3E,CAAD,CAAIC,QAAJ,CAAciD,IAAd,CAAoBY,UAApB,CAAgC,CAAA,IAClD4B,WAAa,IAAIC,KADiC,CAEpDC,WAAa5F,CAAE6F,CAAAA,KAAF,EAFuC,CAGpDC,MAAQC,GAAA,CAAIH,UAAWI,CAAAA,OAAf,CAAwBJ,UAAWK,CAAAA,OAAnC,CAA4CnC,UAA5C,CAEV3D,EAAEW,CAAAA,OAAF,CAAUb,QAAV,CAAoB,QAAQ,CAACM,KAAD,CAAQ,CAClC,IAAIkB,CACJtB;CAAEW,CAAAA,OAAF,CAAUP,KAAV,CAAiB,QAAQ,CAACQ,CAAD,CAAI,CAC3B,IAAImF,MAAQhD,IAAA,CAAKnC,CAAL,CACZ2E,WAAWS,CAAAA,OAAX,CAAmBD,KAAnB,CACA,IAAIzE,CAAJ,CAAO,CAAA,IACD2E,MAAQlD,IAAA,CAAKzB,CAAL,CADP,CAEH4E,QAAUX,UAAWR,CAAAA,IAAX,CAAgBkB,KAAhB,CAAuBF,KAAvB,CACZR,WAAWY,CAAAA,OAAX,CAAmBF,KAAnB,CAA0BF,KAA1B,CAAiCzC,IAAKwB,CAAAA,GAAL,CAASa,KAAA,CAAM9F,CAAN,CAASe,CAAT,CAAYU,CAAZ,CAAT,CAAyB4E,OAAzB,EAAoC,CAApC,CAAjC,CAHK,CAKP5E,CAAA,CAAIV,CARuB,CAA7B,CAFkC,CAApC,CAcA,OAAO2E,WAnB+C,CAyBxDa,QAASA,2BAA0B,CAACvG,CAAD,CAAIwG,GAAJ,CAAS,CAC1C,MAAOrG,EAAEsG,CAAAA,KAAF,CAAQtG,CAAEuG,CAAAA,MAAF,CAASF,GAAT,CAAR,CAAuB,QAAS,CAAC9B,EAAD,CAAK,CAC1C,IAAIO,IAAMM,MAAOoB,CAAAA,iBAAjB,CACItB,IAAME,MAAOC,CAAAA,iBAEjBrF,EAAEyG,CAAAA,KAAF,CAAQlC,EAAR,CAAY,QAAS,CAACmC,CAAD,CAAI9F,CAAJ,CAAO,CACtB+F,CAAAA,CAAkB9G,CA0HjBoB,CAAAA,IAAF,CA1HsBL,CA0HtB,CAAUgG,CAAAA,KA1HTD,CAA0B,CAE9B7B,IAAA,CAAMxB,IAAKwB,CAAAA,GAAL,CAAS4B,CAAT,CAAaC,CAAb,CAAwB7B,GAAxB,CACNI,IAAA,CAAM5B,IAAK4B,CAAAA,GAAL,CAASwB,CAAT,CAAaC,CAAb,CAAwBzB,GAAxB,CAJoB,CAA5B,CAOA,OAAOJ,IAAP,CAAaI,GAX6B,CAArC,CADmC,CAuB5C2B,QAASA,iBAAgB,CAACR,GAAD;AAAMS,OAAN,CAAe,CAAA,IAClCC,YAAc/G,CAAEuG,CAAAA,MAAF,CAASO,OAAT,CADoB,CAEpCE,WAAahH,CAAEkF,CAAAA,GAAF,CAAM6B,WAAN,CAFuB,CAGpCE,WAAajH,CAAE8E,CAAAA,GAAF,CAAMiC,WAAN,CAEf/G,EAAEW,CAAAA,OAAF,CAAU,CAAC,GAAD,CAAM,GAAN,CAAV,CAAsB,QAAQ,CAACuG,IAAD,CAAO,CACnClH,CAAEW,CAAAA,OAAF,CAAU,CAAC,GAAD,CAAM,GAAN,CAAV,CAAsB,QAAQ,CAACwG,KAAD,CAAQ,CAAA,IAChCC,UAAYF,IAAZE,CAAmBD,KADa,CAElC5C,GAAK8B,GAAA,CAAIe,SAAJ,CAF6B,CAGlCC,KACF,IAAI9C,EAAJ,GAAWuC,OAAX,CAAA,CAEA,IAAIQ,OAAStH,CAAEuG,CAAAA,MAAF,CAAShC,EAAT,CAGb,EAFA8C,KAEA,CAFkB,GAAV,GAAAF,KAAA,CAAgBH,UAAhB,CAA6BhH,CAAEkF,CAAAA,GAAF,CAAMoC,MAAN,CAA7B,CAA6CL,UAA7C,CAA0DjH,CAAE8E,CAAAA,GAAF,CAAMwC,MAAN,CAElE,IACEjB,GAAA,CAAIe,SAAJ,CADF,CACmBpH,CAAEuH,CAAAA,SAAF,CAAYhD,EAAZ,CAAgB,QAAQ,CAACmC,CAAD,CAAI,CAAE,MAAOA,EAAP,CAAWW,KAAb,CAA5B,CADnB,CALA,CAJoC,CAAtC,CADmC,CAArC,CALsC,CAsBxCG,QAASA,QAAO,CAACnB,GAAD,CAAMrD,KAAN,CAAa,CAC3B,MAAOhD,EAAEuH,CAAAA,SAAF,CAAYlB,GAAIoB,CAAAA,EAAhB,CAAoB,QAAQ,CAACC,MAAD,CAAS9G,CAAT,CAAY,CAC7C,GAAIoC,KAAJ,CACE,MAAOqD,IAAA,CAAIrD,KAAM2E,CAAAA,WAAN,EAAJ,CAAA,CAAyB/G,CAAzB,CAEH2D;MAAAA,CAAKvE,CAAEoD,CAAAA,MAAF,CAASpD,CAAE4H,CAAAA,GAAF,CAAMvB,GAAN,CAAWzF,CAAX,CAAT,CACT,QAAQ2D,MAAA,CAAG,CAAH,CAAR,CAAgBA,MAAA,CAAG,CAAH,CAAhB,EAAyB,CALkB,CAAxC,CADoB,CA4C7BqB,QAASA,IAAG,CAACiC,OAAD,CAAUC,OAAV,CAAmBnE,UAAnB,CAA+B,CACzC,MAAO,SAAQ,CAAC9D,CAAD,CAAIe,CAAJ,CAAOE,CAAP,CAAU,CACnBiH,CAAAA,CAASlI,CAAEoB,CAAAA,IAAF,CAAOL,CAAP,CACToH,EAAAA,CAASnI,CAAEoB,CAAAA,IAAF,CAAOH,CAAP,CAIbmH,EAAA,CAAOF,CAAOnB,CAAAA,KAAd,CAAsB,CACtB,IAAI5G,CAAE4C,CAAAA,GAAF,CAAMmF,CAAN,CAAc,UAAd,CAAJ,CACE,OAAQA,CAAOG,CAAAA,QAASP,CAAAA,WAAhB,EAAR,EACA,KAAK,GAAL,CAAU,IAAAN,MAAQ,CAACU,CAAOnB,CAAAA,KAAhBS,CAAwB,CAAG,MACrC,MAAK,GAAL,CAAUA,KAAA,CAAQU,CAAOnB,CAAAA,KAAf,CAAuB,CAFjC,CAKES,KAAJ,GACEY,CADF,EACStE,UAAA,CAAa0D,KAAb,CAAqB,CAACA,KAD/B,CAGAA,MAAA,CAAQ,CAERY,EAAA,GAAQF,CAAOtG,CAAAA,KAAP,CAAeqG,OAAf,CAAyBD,OAAjC,EAA4C,CAC5CI,EAAA,GAAQD,CAAOvG,CAAAA,KAAP,CAAeqG,OAAf,CAAyBD,OAAjC,EAA4C,CAE5CI,EAAA,EAAOD,CAAOpB,CAAAA,KAAd,CAAsB,CACtB,IAAI5G,CAAE4C,CAAAA,GAAF,CAAMoF,CAAN,CAAc,UAAd,CAAJ,CACE,OAAQA,CAAOE,CAAAA,QAASP,CAAAA,WAAhB,EAAR,EACA,KAAK,GAAL,CAAUN,KAAA,CAAQW,CAAOpB,CAAAA,KAAf,CAAuB,CAAG,MACpC,MAAK,GAAL,CAAUS,KAAA,CAAQ,CAACW,CAAOpB,CAAAA,KAAhB;AAAwB,CAFlC,CAKES,KAAJ,GACEY,CADF,EACStE,UAAA,CAAa0D,KAAb,CAAqB,CAACA,KAD/B,CAKA,OAAOY,EAjCgB,CADgB,CAxX3C,IAAIjI,EAAIP,OAAA,CAAQ,sCAAR,CAAR,CACI+F,MAAQ/F,OAAA,CAAQ,wCAAR,CAAuB+F,CAAAA,KADnC,CAEI2C,KAAO1I,OAAA,CAAQ,oCAAR,CAOXC,OAAOC,CAAAA,OAAP,CAAiB,CACfyI,UA6UFA,QAAkB,CAACvI,CAAD,CAAI,CACpB,IAAIC,SAAWqI,IAAKE,CAAAA,gBAAL,CAAsBxI,CAAtB,CAAf,CACIE,UAAYC,CAAEsI,CAAAA,KAAF,CACd1I,kBAAA,CAAmBC,CAAnB,CAAsBC,QAAtB,CADc,CAEd6B,kBAAA,CAAmB9B,CAAnB,CAAsBC,QAAtB,CAFc,CADhB,CAKIuG,IAAM,EALV,CAMIkC,gBACJvI,EAAEW,CAAAA,OAAF,CAAU,CAAC,GAAD,CAAM,GAAN,CAAV,CAAsB,QAAQ,CAACuG,IAAD,CAAO,CACnCqB,gBAAA,CAA4B,GAAT,GAAArB,IAAA,CAAepH,QAAf,CAA0BE,CAAEuG,CAAAA,MAAF,CAASzG,QAAT,CAAmB0I,CAAAA,OAAnB,EAC7CxI,EAAEW,CAAAA,OAAF,CAAU,CAAC,GAAD;AAAM,GAAN,CAAV,CAAsB,QAAQ,CAACwG,KAAD,CAAQ,CACtB,GAAd,GAAIA,KAAJ,GACEoB,gBADF,CACqBvI,CAAE4H,CAAAA,GAAF,CAAMW,gBAAN,CAAwB,QAAQ,CAACE,KAAD,CAAQ,CACzD,MAAOzI,EAAEuG,CAAAA,MAAF,CAASkC,KAAT,CAAgBD,CAAAA,OAAhB,EADkD,CAAxC,CADrB,CAMA,KAAI1F,WAA4DkC,CAArC,GAAT,GAAAkC,IAAA,CAAerH,CAAEwB,CAAAA,YAAjB,CAAgCxB,CAAEyF,CAAAA,UAAYN,EAAAA,IAA/C,CAAoDnF,CAApD,CACbmD,WAAAA,CAAQH,iBAAA,CAAkBhD,CAAlB,CAAqB0I,gBAArB,CAAuCxI,SAAvC,CAAkD+C,UAAlD,CACRyB,WAAAA,CAAKb,oBAAA,CAAqB7D,CAArB,CAAwB0I,gBAAxB,CACPvF,UAAMD,CAAAA,IADC,CACKC,UAAMA,CAAAA,KADX,CAC4B,GAD5B,GACkBmE,KADlB,CAEK,IAAd,GAAIA,KAAJ,GACE5C,UADF,CACOvE,CAAEuH,CAAAA,SAAF,CAAYhD,UAAZ,CAAgB,QAAQ,CAACmC,CAAD,CAAI,CAAE,MAAO,CAACA,CAAV,CAA5B,CADP,CAGAL,IAAA,CAAIa,IAAJ,CAAWC,KAAX,CAAA,CAAoB5C,UAdgB,CAAtC,CAFmC,CAArC,CAoBA,KAAImE,cAAgBtC,0BAAA,CAA2BvG,CAA3B;AAA8BwG,GAA9B,CACpBQ,iBAAA,CAAiBR,GAAjB,CAAsBqC,aAAtB,CACA,OAAOlB,QAAA,CAAQnB,GAAR,CAAaxG,CAAE6F,CAAAA,KAAF,EAAU1C,CAAAA,KAAvB,CA9Ba,CA9UL,CAEKpD,kBAFL,CAGK+B,kBAHL,CAIFD,WAJE,CAKFiB,WALE,CAMIE,iBANJ,CAOOa,oBAPP,CAQGmD,gBARH,CASaT,0BATb,CAUNoB,OAVM,CAZqF;",
"sources":["node_modules/dagre/lib/position/bk.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$dagre$lib$position$bk\"] = function(global,require,module,exports) {\n\"use strict\";\n\nvar _ = require(\"../lodash\");\nvar Graph = require(\"../graphlib\").Graph;\nvar util = require(\"../util\");\n\n/*\n * This module provides coordinate assignment based on Brandes and K\u00f6pf, \"Fast\n * and Simple Horizontal Coordinate Assignment.\"\n */\n\nmodule.exports = {\n  positionX: positionX,\n  findType1Conflicts: findType1Conflicts,\n  findType2Conflicts: findType2Conflicts,\n  addConflict: addConflict,\n  hasConflict: hasConflict,\n  verticalAlignment: verticalAlignment,\n  horizontalCompaction: horizontalCompaction,\n  alignCoordinates: alignCoordinates,\n  findSmallestWidthAlignment: findSmallestWidthAlignment,\n  balance: balance\n};\n\n/*\n * Marks all edges in the graph with a type-1 conflict with the \"type1Conflict\"\n * property. A type-1 conflict is one where a non-inner segment crosses an\n * inner segment. An inner segment is an edge with both incident nodes marked\n * with the \"dummy\" property.\n *\n * This algorithm scans layer by layer, starting with the second, for type-1\n * conflicts between the current layer and the previous layer. For each layer\n * it scans the nodes from left to right until it reaches one that is incident\n * on an inner segment. It then scans predecessors to determine if they have\n * edges that cross that inner segment. At the end a final scan is done for all\n * nodes on the current rank to see if they cross the last visited inner\n * segment.\n *\n * This algorithm (safely) assumes that a dummy node will only be incident on a\n * single node in the layers being scanned.\n */\nfunction findType1Conflicts(g, layering) {\n  var conflicts = {};\n\n  function visitLayer(prevLayer, layer) {\n    var\n      // last visited node in the previous layer that is incident on an inner\n      // segment.\n      k0 = 0,\n      // Tracks the last node in this layer scanned for crossings with a type-1\n      // segment.\n      scanPos = 0,\n      prevLayerLength = prevLayer.length,\n      lastNode = _.last(layer);\n\n    _.forEach(layer, function(v, i) {\n      var w = findOtherInnerSegmentNode(g, v),\n        k1 = w ? g.node(w).order : prevLayerLength;\n\n      if (w || v === lastNode) {\n        _.forEach(layer.slice(scanPos, i +1), function(scanNode) {\n          _.forEach(g.predecessors(scanNode), function(u) {\n            var uLabel = g.node(u),\n              uPos = uLabel.order;\n            if ((uPos < k0 || k1 < uPos) &&\n                !(uLabel.dummy && g.node(scanNode).dummy)) {\n              addConflict(conflicts, u, scanNode);\n            }\n          });\n        });\n        scanPos = i + 1;\n        k0 = k1;\n      }\n    });\n\n    return layer;\n  }\n\n  _.reduce(layering, visitLayer);\n  return conflicts;\n}\n\nfunction findType2Conflicts(g, layering) {\n  var conflicts = {};\n\n  function scan(south, southPos, southEnd, prevNorthBorder, nextNorthBorder) {\n    var v;\n    _.forEach(_.range(southPos, southEnd), function(i) {\n      v = south[i];\n      if (g.node(v).dummy) {\n        _.forEach(g.predecessors(v), function(u) {\n          var uNode = g.node(u);\n          if (uNode.dummy &&\n              (uNode.order < prevNorthBorder || uNode.order > nextNorthBorder)) {\n            addConflict(conflicts, u, v);\n          }\n        });\n      }\n    });\n  }\n\n\n  function visitLayer(north, south) {\n    var prevNorthPos = -1,\n      nextNorthPos,\n      southPos = 0;\n\n    _.forEach(south, function(v, southLookahead) {\n      if (g.node(v).dummy === \"border\") {\n        var predecessors = g.predecessors(v);\n        if (predecessors.length) {\n          nextNorthPos = g.node(predecessors[0]).order;\n          scan(south, southPos, southLookahead, prevNorthPos, nextNorthPos);\n          southPos = southLookahead;\n          prevNorthPos = nextNorthPos;\n        }\n      }\n      scan(south, southPos, south.length, nextNorthPos, north.length);\n    });\n\n    return south;\n  }\n\n  _.reduce(layering, visitLayer);\n  return conflicts;\n}\n\nfunction findOtherInnerSegmentNode(g, v) {\n  if (g.node(v).dummy) {\n    return _.find(g.predecessors(v), function(u) {\n      return g.node(u).dummy;\n    });\n  }\n}\n\nfunction addConflict(conflicts, v, w) {\n  if (v > w) {\n    var tmp = v;\n    v = w;\n    w = tmp;\n  }\n\n  var conflictsV = conflicts[v];\n  if (!conflictsV) {\n    conflicts[v] = conflictsV = {};\n  }\n  conflictsV[w] = true;\n}\n\nfunction hasConflict(conflicts, v, w) {\n  if (v > w) {\n    var tmp = v;\n    v = w;\n    w = tmp;\n  }\n  return _.has(conflicts[v], w);\n}\n\n/*\n * Try to align nodes into vertical \"blocks\" where possible. This algorithm\n * attempts to align a node with one of its median neighbors. If the edge\n * connecting a neighbor is a type-1 conflict then we ignore that possibility.\n * If a previous node has already formed a block with a node after the node\n * we're trying to form a block with, we also ignore that possibility - our\n * blocks would be split in that scenario.\n */\nfunction verticalAlignment(g, layering, conflicts, neighborFn) {\n  var root = {},\n    align = {},\n    pos = {};\n\n  // We cache the position here based on the layering because the graph and\n  // layering may be out of sync. The layering matrix is manipulated to\n  // generate different extreme alignments.\n  _.forEach(layering, function(layer) {\n    _.forEach(layer, function(v, order) {\n      root[v] = v;\n      align[v] = v;\n      pos[v] = order;\n    });\n  });\n\n  _.forEach(layering, function(layer) {\n    var prevIdx = -1;\n    _.forEach(layer, function(v) {\n      var ws = neighborFn(v);\n      if (ws.length) {\n        ws = _.sortBy(ws, function(w) { return pos[w]; });\n        var mp = (ws.length - 1) / 2;\n        for (var i = Math.floor(mp), il = Math.ceil(mp); i <= il; ++i) {\n          var w = ws[i];\n          if (align[v] === v &&\n              prevIdx < pos[w] &&\n              !hasConflict(conflicts, v, w)) {\n            align[w] = v;\n            align[v] = root[v] = root[w];\n            prevIdx = pos[w];\n          }\n        }\n      }\n    });\n  });\n\n  return { root: root, align: align };\n}\n\nfunction horizontalCompaction(g, layering, root, align, reverseSep) {\n  // This portion of the algorithm differs from BK due to a number of problems.\n  // Instead of their algorithm we construct a new block graph and do two\n  // sweeps. The first sweep places blocks with the smallest possible\n  // coordinates. The second sweep removes unused space by moving blocks to the\n  // greatest coordinates without violating separation.\n  var xs = {},\n    blockG = buildBlockGraph(g, layering, root, reverseSep),\n    borderType = reverseSep ? \"borderLeft\" : \"borderRight\";\n\n  function iterate(setXsFunc, nextNodesFunc) {\n    var stack = blockG.nodes();\n    var elem = stack.pop();\n    var visited = {};\n    while (elem) {\n      if (visited[elem]) {\n        setXsFunc(elem);\n      } else {\n        visited[elem] = true;\n        stack.push(elem);\n        stack = stack.concat(nextNodesFunc(elem));\n      }\n\n      elem = stack.pop();\n    }\n  }\n\n  // First pass, assign smallest coordinates\n  function pass1(elem) {\n    xs[elem] = blockG.inEdges(elem).reduce(function(acc, e) {\n      return Math.max(acc, xs[e.v] + blockG.edge(e));\n    }, 0);\n  }\n\n  // Second pass, assign greatest coordinates\n  function pass2(elem) {\n    var min = blockG.outEdges(elem).reduce(function(acc, e) {\n      return Math.min(acc, xs[e.w] - blockG.edge(e));\n    }, Number.POSITIVE_INFINITY);\n\n    var node = g.node(elem);\n    if (min !== Number.POSITIVE_INFINITY && node.borderType !== borderType) {\n      xs[elem] = Math.max(xs[elem], min);\n    }\n  }\n\n  iterate(pass1, blockG.predecessors.bind(blockG));\n  iterate(pass2, blockG.successors.bind(blockG));\n\n  // Assign x coordinates to all nodes\n  _.forEach(align, function(v) {\n    xs[v] = xs[root[v]];\n  });\n\n  return xs;\n}\n\n\nfunction buildBlockGraph(g, layering, root, reverseSep) {\n  var blockGraph = new Graph(),\n    graphLabel = g.graph(),\n    sepFn = sep(graphLabel.nodesep, graphLabel.edgesep, reverseSep);\n\n  _.forEach(layering, function(layer) {\n    var u;\n    _.forEach(layer, function(v) {\n      var vRoot = root[v];\n      blockGraph.setNode(vRoot);\n      if (u) {\n        var uRoot = root[u],\n          prevMax = blockGraph.edge(uRoot, vRoot);\n        blockGraph.setEdge(uRoot, vRoot, Math.max(sepFn(g, v, u), prevMax || 0));\n      }\n      u = v;\n    });\n  });\n\n  return blockGraph;\n}\n\n/*\n * Returns the alignment that has the smallest width of the given alignments.\n */\nfunction findSmallestWidthAlignment(g, xss) {\n  return _.minBy(_.values(xss), function (xs) {\n    var max = Number.NEGATIVE_INFINITY;\n    var min = Number.POSITIVE_INFINITY;\n\n    _.forIn(xs, function (x, v) {\n      var halfWidth = width(g, v) / 2;\n\n      max = Math.max(x + halfWidth, max);\n      min = Math.min(x - halfWidth, min);\n    });\n\n    return max - min;\n  });\n}\n\n/*\n * Align the coordinates of each of the layout alignments such that\n * left-biased alignments have their minimum coordinate at the same point as\n * the minimum coordinate of the smallest width alignment and right-biased\n * alignments have their maximum coordinate at the same point as the maximum\n * coordinate of the smallest width alignment.\n */\nfunction alignCoordinates(xss, alignTo) {\n  var alignToVals = _.values(alignTo),\n    alignToMin = _.min(alignToVals),\n    alignToMax = _.max(alignToVals);\n\n  _.forEach([\"u\", \"d\"], function(vert) {\n    _.forEach([\"l\", \"r\"], function(horiz) {\n      var alignment = vert + horiz,\n        xs = xss[alignment],\n        delta;\n      if (xs === alignTo) return;\n\n      var xsVals = _.values(xs);\n      delta = horiz === \"l\" ? alignToMin - _.min(xsVals) : alignToMax - _.max(xsVals);\n\n      if (delta) {\n        xss[alignment] = _.mapValues(xs, function(x) { return x + delta; });\n      }\n    });\n  });\n}\n\nfunction balance(xss, align) {\n  return _.mapValues(xss.ul, function(ignore, v) {\n    if (align) {\n      return xss[align.toLowerCase()][v];\n    } else {\n      var xs = _.sortBy(_.map(xss, v));\n      return (xs[1] + xs[2]) / 2;\n    }\n  });\n}\n\nfunction positionX(g) {\n  var layering = util.buildLayerMatrix(g);\n  var conflicts = _.merge(\n    findType1Conflicts(g, layering),\n    findType2Conflicts(g, layering));\n\n  var xss = {};\n  var adjustedLayering;\n  _.forEach([\"u\", \"d\"], function(vert) {\n    adjustedLayering = vert === \"u\" ? layering : _.values(layering).reverse();\n    _.forEach([\"l\", \"r\"], function(horiz) {\n      if (horiz === \"r\") {\n        adjustedLayering = _.map(adjustedLayering, function(inner) {\n          return _.values(inner).reverse();\n        });\n      }\n\n      var neighborFn = (vert === \"u\" ? g.predecessors : g.successors).bind(g);\n      var align = verticalAlignment(g, adjustedLayering, conflicts, neighborFn);\n      var xs = horizontalCompaction(g, adjustedLayering,\n        align.root, align.align, horiz === \"r\");\n      if (horiz === \"r\") {\n        xs = _.mapValues(xs, function(x) { return -x; });\n      }\n      xss[vert + horiz] = xs;\n    });\n  });\n\n  var smallestWidth = findSmallestWidthAlignment(g, xss);\n  alignCoordinates(xss, smallestWidth);\n  return balance(xss, g.graph().align);\n}\n\nfunction sep(nodeSep, edgeSep, reverseSep) {\n  return function(g, v, w) {\n    var vLabel = g.node(v);\n    var wLabel = g.node(w);\n    var sum = 0;\n    var delta;\n\n    sum += vLabel.width / 2;\n    if (_.has(vLabel, \"labelpos\")) {\n      switch (vLabel.labelpos.toLowerCase()) {\n      case \"l\": delta = -vLabel.width / 2; break;\n      case \"r\": delta = vLabel.width / 2; break;\n      }\n    }\n    if (delta) {\n      sum += reverseSep ? delta : -delta;\n    }\n    delta = 0;\n\n    sum += (vLabel.dummy ? edgeSep : nodeSep) / 2;\n    sum += (wLabel.dummy ? edgeSep : nodeSep) / 2;\n\n    sum += wLabel.width / 2;\n    if (_.has(wLabel, \"labelpos\")) {\n      switch (wLabel.labelpos.toLowerCase()) {\n      case \"l\": delta = wLabel.width / 2; break;\n      case \"r\": delta = -wLabel.width / 2; break;\n      }\n    }\n    if (delta) {\n      sum += reverseSep ? delta : -delta;\n    }\n    delta = 0;\n\n    return sum;\n  };\n}\n\nfunction width(g, v) {\n  return g.node(v).width;\n}\n\n};"],
"names":["shadow$provide","global","require","module","exports","findType1Conflicts","g","layering","conflicts","_","reduce","visitLayer","prevLayer","layer","k0","scanPos","prevLayerLength","length","lastNode","last","forEach","v","i","w","findOtherInnerSegmentNode","k1","node","order","slice","scanNode","predecessors","u","uLabel","uPos","dummy","addConflict","findType2Conflicts","scan","south","southPos","southEnd","prevNorthBorder","nextNorthBorder","range","uNode","north","prevNorthPos","nextNorthPos","southLookahead","find","tmp","conflictsV","hasConflict","has","verticalAlignment","neighborFn","root","align","pos","prevIdx","ws","sortBy","mp","Math","floor","il","ceil","horizontalCompaction","reverseSep","iterate","setXsFunc","nextNodesFunc","stack","blockG","nodes","elem","pop","visited","push","concat","xs","buildBlockGraph","borderType","pass1","inEdges","acc","e","max","edge","bind","pass2","min","outEdges","Number","POSITIVE_INFINITY","successors","blockGraph","Graph","graphLabel","graph","sepFn","sep","nodesep","edgesep","vRoot","setNode","uRoot","prevMax","setEdge","findSmallestWidthAlignment","xss","minBy","values","NEGATIVE_INFINITY","forIn","x","halfWidth","width","alignCoordinates","alignTo","alignToVals","alignToMin","alignToMax","vert","horiz","alignment","delta","xsVals","mapValues","balance","ul","ignore","toLowerCase","map","nodeSep","edgeSep","vLabel","wLabel","sum","labelpos","util","positionX","buildLayerMatrix","merge","adjustedLayering","reverse","inner","smallestWidth"]
}
