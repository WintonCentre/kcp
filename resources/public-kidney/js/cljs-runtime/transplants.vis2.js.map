{"version":3,"sources":["transplants/vis2.cljs"],"mappings":"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","names":["transplants.vis2/residual","fs","cljs.core.apply","cljs.core/+","transplants.vis2/fs-mapped","outcomes","cljs.core.assoc","cljs.core/map","cljs.core/vector","cljs.core.into","transplants.vis2/fs-in-order","plot-order","fsm","cljs.core.map","data-key","transplants.vis2/int-fs-series","ordered-fs","pc-fs","p1__68759#","int-fs","int-pc-fs","p1__68760#","cljs.core.mapv","js/Math.round","err-pc-fs","p1__68761#","p2__68762#","sum-int-pc-fs","sum-err-pc-fs","cmp","cljs.core/>","cljs.core/<","adjust","cljs.core.reduce","p__68775","p__68776","vec__68778","cljs.core.nth","vec__68781","i","me","j","e","cljs.core/zipmap","cljs.core.range","cljs.core.update","cljs.core/first","cljs.core/dec","cljs.core/inc","cljs.core.reductions","transplants.vis2/fs-time-series","t-fs","p__68788","vec__68789","t","transplants.vis2/aspect-ratio","width","height","js/Math.floor","var_args","G__68802","transplants.vis2/svg-outcome-legend","js/Error","p__68807","map__68808","cljs.core/--destructure-map","cljs.core.get","data-styles","p1__68796#","transplants.vis2.svg_outcome_legend","cljs.core/constantly","string-value-f","position-f","styles","cljs.core.merge","transplants.ui/svg-styles","transplants.vis2/outcome-tr","k","transplants.rgb/secondary","cljs.core.map_indexed","b","clojure.string/replace","p__68819","map__68820","transplants.vis2/test-rig","day","beta-keys","fmaps","s0","sum-betas","F","env","factors","cljs.core/keys","js/module$node_modules$react_bootstrap$cjs$index.Row","js/module$node_modules$react_bootstrap$cjs$index.Col","transplants.ui/test-day-selector","js/module$node_modules$react_bootstrap$cjs$index.Table","S0_i","transplants.model/to-precision","cljs.core/second","transplants.model/S0-for-day","F_i","sb","cljs.core/count","cljs.core.conj","p__68826","vec__68827","factor","fmap","cljs.core/last","transplants.factors/selected-beta-x","transplants.vis2/bar-style","map__68834","fill","stroke","opacity","stroke-width","cljs-css-modules.runtime/inject-style!","garden.core/css","transplants.vis2/styles","transplants.vis2/pairwise-stagger","threshold","p__68841","vec__68842","vec__68845","staggers","f1","f2","and__4251__auto__","p1__68838#","or__4253__auto__","transplants.vis2/label-staggers","cljs.core.partition_all","transplants.vis2/multiline-bin-label","bin-label","x0","font-size","row","line","p__68852","map__68853","transplants.vis2/draw-bin-labels","bin-labels","spacing","offset","X","bar-index","G__68854","p__68855","map__68856","transplants.vis2/draw-bars","time-series","bar-width","data-keys","Y","vec__68857","map__68860","G__68861","_","cum-fs","cif","cum-cif","y0","h","G__68862","cljs.core/not","js/isNaN","p__68864","map__68865","transplants.vis2/draw-percents","data-count","vec__68866","map__68869","G__68870","x-mid","p1__68863#","G__68871","y-mid","cljs.core/odd?","transplants.vis2/tool-metadata","organ","tool","cljs.core.get_in","medley.core.deep_merge","p__68872","map__68873","transplants.vis2/stacked-bar-chart","tool-mdata","params","temp__5751__auto__","p__68875","map__68876","transplants.vis2/bar-chart","base-outcome-keys","sample-days","transplants.utils/year->day","transplants.utils/day->year","fs-by-year","svg.container/svg-container","svg.space/space","p1__68874#","fs-by-year-in-plot-order","p__68878","map__68879","transplants.vis2/stacked-area-chart","year-series","quarter-series","q-offset","bar-positions","vec__68880","map__68883","time","G__68884","quarter-positions","p__68885","vec__68886","map__68889","quarter","transplants.utils/day->week","G__68890","q-polygon-data","iter__4652__auto__","s__68892","cljs.core/LazySeq","temp__5753__auto__","cljs.core/seq","cljs.core/chunked-seq?","c__4650__auto__","size__4651__auto__","b__68894","cljs.core/chunk-buffer","i__68893","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__68891","cljs.core/chunk-rest","cljs.core/cons","cljs.core/rest","dk","tops","s__68896","xs__6308__auto__","iterys__4648__auto__","s__68898","b__68900","i__68899","iter__68897","fs__4649__auto__","cljs.core.concat","iter__68895","s__68902","s__68904","b__68906","i__68905","iter__68903","iter__68901","bp-dks","bp-dk","cljs.core._EQ_","cljs.core/select-keys","cljs.core.juxt","cljs.core/reverse","s__68908","b__68910","i__68909","iter__68907","s__68912","b__68914","i__68913","vec__68915","iter__68911","vec__68918","s__68922","b__68924","i__68923","vec__68925","iter__68921","vec__68928","x","y","G__68931","bp","vec__68932","map__68935","G__68936","p1__68877#","G__68937","p__68939","map__68940","transplants.vis2/area-chart","year-days","quarter-days","transplants.utils/week->day","fs-by-quarter","svg-width","svg-height","p1__68938#","fs-by-quarter-in-plot-order","p__68941","map__68942","transplants.vis2/h-and-s","key","scale","transplants.vis2/ordinal->outcome","ordinal","cum-int-fs","cum","transplants.vis2/ordinal-mdata","index","outcome-key","transplants.vis2/side-by-side-icon-array","_plot-order","_data-styles","labels","icon-order","p1__68943#","_x","_y","_X","_Y","s__68945","b__68947","i__68946","vec__68948","map__68951","iter__68944","vec__68964","map__68967","label-index","label","time-index","s__68953","b__68955","i__68954","iter__68952","s__68969","b__68971","i__68970","iter__68968","outcome","s__68957","s__68959","b__68961","i__68960","iter__68958","iter__68956","s__68973","s__68975","b__68977","i__68976","iter__68974","iter__68972","G__68962","G__68963","G__68978","G__68979","transplants.vis2/stacked-icon-array","transplants.ui/col","s__68983","b__68985","i__68984","vec__68986","map__68989","iter__68982","vec__69002","map__69005","transplants.ui/row","cljs.core/sequential?","cljs.core/str","p1__68980#","s__68991","b__68993","i__68992","iter__68990","s__69007","b__69009","i__69008","iter__69006","s__68995","s__68997","b__68999","i__68998","iter__68996","iter__68994","s__69011","s__69013","b__69015","i__69014","iter__69012","iter__69010","G__69000","G__69001","G__69016","G__69017","transplants.vis2/move-item","a-vector","item","a","p1__69018#","cljs.core/not-any?","cljs.core.sort_by","el","transplants.vis2/move-to-start","transplants.vis2/move-to-end","p__69019","map__69020","transplants.vis2/icon-array","plot-order*","window-width","re_frame.core.subscribe","mobile?","cljs.core/deref","transplants.ui/mobile-break","transplants.vis2/table-render","years","s__69022","b__69024","i__69023","iter__69021","s__69026","b__69028","i__69027","iter__69025","style","fexpr__69029","fexpr__69042","long-label","s__69031","b__69033","i__69032","vec__69034","map__69037","iter__69030","vec__69038","map__69041","s__69044","b__69046","i__69045","vec__69047","map__69050","iter__69043","vec__69051","map__69054","transplants.vis2/text-render","s__69056","b__69058","i__69057","iter__69055","s__69060","b__69062","i__69061","iter__69059","s__69074","b__69076","i__69075","iter__69073","fexpr__69063","fexpr__69068","fexpr__69077","fexpr__69082","vec__69064","map__69067","vec__69069","map__69072","vec__69078","map__69081","vec__69083","map__69086","p__69087","map__69088","transplants.vis2/table","p__69089","map__69090","transplants.vis2/text","transplants.vis2/test-render","s__69092","b__69094","i__69093","iter__69091","s__69096","b__69098","i__69097","iter__69095","s__69110","b__69112","i__69111","iter__69109","fexpr__69099","fexpr__69104","fexpr__69113","fexpr__69118","vec__69100","map__69103","vec__69105","map__69108","vec__69114","map__69117","vec__69119","map__69122","p__69123","map__69124","transplants.vis2/test-gen","cljs.core/chunk-first"],"sourcesContent":["(ns transplants.vis2\n  (:require [\"react-bootstrap\" :as bs]\n            [re-frame.core :as rf]\n            [transplants.model :as model]\n            [transplants.subs :as subs]\n            [transplants.factors :as fac]\n            [transplants.ui :as ui]\n            [transplants.utils :as utils]\n            [transplants.rgb :as rgb]\n            [clojure.string :as str :refer [replace]]\n            [svg.space :refer [space]]\n            [svg.container :as svgc]\n            [cljs-css-modules.macro :refer-macros [defstyle]]\n            [medley.core :as medl]\n            [shadow.debug :refer [locals ?> ?-> ?->>]]))\n\n;;\n;; Plot data prep utilities\n;; \n(defn residual\n  \"The Fs are the probabilities of leaving the list due to the various outcomes - see David's \n   paper at doc/David/transplant-non-simulation.pdf for detail.\n\n   In Cox results we can always calculate a residual amount to make the Fs total to 100% on each day.\n   As we may need to plot this residual and decorate it, we should calculate it and make it explicit.\n\n   Given a seq of Fs for one day, return the residual for that day\"\n  [fs]\n  (- 1 (apply + fs)))\n\n(defn fs-mapped\n  \"We will be plotting outcomes including residuals in some plot order specified in the metadata.\n   `outcomes` is a seq of baseline-cif outcome headers (less any cif- prefix, and as keywords)\n   `fs` are initially in that same order.\n   Both outcomes and fs are assumed to be in spreadsheet baseline-cif column order.\n   Return fs converted to a map keyed by outcome and with an additional residual outcome.\"\n  [outcomes fs]\n  (assoc (->> [outcomes fs]\n              (apply map vector)\n              (into {}))\n         :residual (residual fs)))\n\n(defn fs-in-order\n  \"order by outcome is a map of outcome-key to plot order.\n   fsk are a seq of [outcome-key fs] key-values like '([:residual 0.30000000000000004] [:transplant 0.3] [:death 0.4]).\n   plot-order is like [:transplant :residual :death]\n   Result would be (0.3 0.30000000000000004 0.4)\"\n  [plot-order fsm]\n  ;(locals)\n  (map\n   (fn [data-key]\n     (fsm data-key))\n   plot-order))\n\n#_(defn fs-series\n    \"convert an ordered fs to a map containing the original ordered-fs and its partial sums\"\n    [ordered-fs]\n    {:fs ordered-fs :cum-fs (reductions + ordered-fs)})\n\n(defn int-fs-series\n  \"convert an ordered fs to a map containing the original ordered-fs and its partial sums.\n   Include integer valued percentage approximations for fs and cum-fs adjusted so the sum of the \n   int-fs is 100. The alogithm seeks to minimise the error introduced by the adjustment.\"\n  [ordered-fs]\n  (let [pc-fs (map #(* 100 %) ordered-fs)\n        int-fs (loop [int-pc-fs (mapv #(js/Math.round %) pc-fs)]\n                 (let [err-pc-fs (map #(- %1 %2) int-pc-fs pc-fs)\n                       sum-int-pc-fs (apply + int-pc-fs)\n                       sum-err-pc-fs (- sum-int-pc-fs 100)]\n                   (if (zero? sum-err-pc-fs)\n                     int-pc-fs\n                     (let [cmp (if (pos? sum-err-pc-fs) > <)\n                           adjust (reduce (fn [[i me] [j e]]\n                                            (if (cmp e me)\n                                              [j e]\n                                              [i me]))\n                                          [0 0]\n                                          (zipmap (range) err-pc-fs))]\n                       (recur (update int-pc-fs (first adjust) (if (pos? sum-err-pc-fs) dec inc)))))))]\n    ;(locals)\n    {:fs ordered-fs\n     :cum-fs (reductions + ordered-fs)\n     :int-fs int-fs\n     :cum-int-fs (reductions + int-fs)}))\n\n(defn fs-time-series\n  \"Take a time series of Fs with Fs in spreadsheet column order.\n   Add residuals, and reorder them into a plot data series, adding cumulative values to facilitate\n   a stacked plot.\"\n  [outcomes plot-order t-fs]\n  (map\n   (fn [[t fs]]\n     ;(locals)\n     [t (->> fs\n             (fs-mapped outcomes)\n             (fs-in-order plot-order)\n             (int-fs-series))])\n   t-fs))\n\n(comment\n  (residual [0.1])\n  ;; => 0.9\n  (residual [0.1 0.2 0.2])\n  ;; => 0.5\n\n  ;; (def outcomes '(:transplant :death))\n  ;; (def fs [0.3 0.4])\n  ;; (def plot-order {:death 1, :residual 2, :transplant 3})\n  ;; (def data-keys [:death, :residual, :transplant])\n  ;; (def fsk [[:transplant 0.3] [:residual 0.30000000000000004] [:death 0.4]])\n  ;; (def t-fs [[1 [0.2 0.1]]\n  ;;            [3 [0.3 0.15]]\n  ;;            [4 [0.4 0.2]]])\n\n  (fs-mapped '(:transplant :death) [0.3 0.4])\n  ;; => {:transplant 0.3, :death 0.4, :residual 0.30000000000000004}\n\n\n  (fs-in-order\n   [:death, :residual, :transplant]\n   (fs-mapped '(:transplant :death) [0.3 0.4]))\n  ;; => (0.4 0.30000000000000004 0.3)\n\n  ;(fs-series '(0.4 0.30000000000000004 0.3))\n  ;; => {:fs (0.4 0.30000000000000004 0.3), :cum-fs (0.4 0.7000000000000001 1)}\n\n  (fs-time-series [:transplant :death]\n                  [:death, :residual, :transplant]\n                  [[1 [0.2 0.1]]\n                   [3 [0.3 0.15]]\n                   [4 [0.4 0.2]]])\n  ;; => ([1 {:fs (0.1 0.7 0.2), :cum-fs (0.1 0.7999999999999999 1)}] \n  ;;     [3 {:fs (0.15 0.55 0.3), :cum-fs (0.15 0.7000000000000001 1)}] \n  ;;     [4 {:fs (0.2 0.3999999999999999 0.4), :cum-fs (0.2 0.5999999999999999 0.9999999999999999)}])\n\n  (int-fs-series (repeat 3 (/ 1 3)))\n  ;; => {:fs (0.3333333333333333 0.3333333333333333 0.3333333333333333),\n  ;;     :cum-fs (0.3333333333333333 0.6666666666666666 1),\n  ;;     :int-fs [34 33 33],\n  ;;     :cum-int-fs (34 67 100)}\n\n  (int-fs-series (repeat 7 (/ 1 7)))\n    ;; => {:fs\n    ;;     (0.14285714285714285\n    ;;      0.14285714285714285\n    ;;      0.14285714285714285\n    ;;      0.14285714285714285\n    ;;      0.14285714285714285\n    ;;      0.14285714285714285\n    ;;      0.14285714285714285),\n    ;;     :cum-fs\n    ;;     (0.14285714285714285\n    ;;      0.2857142857142857\n    ;;      0.42857142857142855\n    ;;      0.5714285714285714\n    ;;      0.7142857142857142\n    ;;      0.857142857142857\n    ;;      0.9999999999999998),\n    ;;     :int-fs [15 14 14 14 14 14 14],\n    ;;     :cum-int-fs (15 29 43 57 71 85 99)}\n\n  0)\n\n;; visualisation commons\n(defn aspect-ratio\n  \"Calculate an aspect ratio as a padding CSS %. \n   See https://www.w3schools.com/howto/howto_css_aspect_ratio.asp\"\n  [width height]\n  (str (js/Math.floor (* 100 (/ height width))) \"%\"))\n\n(defn svg-outcome-legend\n  \"Take a seq of outcome keys in plot order and render a styled legend.\n   The 3-arity version allows an option map where a value and a custom position can be\n   specified - both are functions of the integer plot-order of the series.\"\n  ([plot-order data-styles]\n   (svg-outcome-legend plot-order data-styles\n                       {:string-value-f (constantly \"\")\n                        :position-f #(str \"translate(0 \" (+ 30 (* 80 %)) \")\")}))\n\n  ([plot-order data-styles {:keys [width height string-value-f position-f]\n                            :or {width 255 height 60}}]\n   (into [:<>]\n         (map (fn [i data-key]\n                (let [styles (data-styles data-key)]\n                  [:g {:transform (position-f i)\n                       :key (str data-key \"-\" i)}\n                   [:rect (merge  {:x 0 :y 0 :width width :height height}\n                                  (ui/svg-styles styles)\n                                  #_(dissoc styles :label-fill))]\n                   [:text {:x 10 :y 40\n                           :fill (:label-fill styles)\n                           :font-size 25}\n                    (str (:label styles) (string-value-f i))]]))\n              (range)\n              plot-order))))\n\n(comment\n  (def plot-order \"fixture\" [:arthur :brian :charlie])\n  (def data-styles \"fixture\" {:width 200 :height 50 :string-value-f (constantly \"Hello\") :position-f (constantly [10 20])})\n  (svg-outcome-legend plot-order data-styles)\n;; => [:<>\n;;     [:g\n;;      {:transform \"translate(0 30)\", :key \":arthur-0\"}\n;;      [:rect {:x 0, :y 0, :width 275, :height 60}]\n;;      [:text {:x 10, :y 40, :fill nil, :font-size 30} \"\"]]\n;;     [:g\n;;      {:transform \"translate(0 110)\", :key \":brian-1\"}\n;;      [:rect {:x 0, :y 0, :width 275, :height 60}]\n;;      [:text {:x 10, :y 40, :fill nil, :font-size 30} \"\"]]\n;;     [:g\n;;      {:transform \"translate(0 190)\", :key \":charlie-2\"}\n;;      [:rect {:x 0, :y 0, :width 275, :height 60}]\n;;      [:text {:x 10, :y 40, :fill nil, :font-size 30} \"\"]]]\n\n  (svg-outcome-legend plot-order data-styles #(str \"translate(0 \" (+ -35 (* 50 %)) \"),scale(0.7)\")))\n\n;; test-rig\n\n(defn outcome-tr\n  \"Render an outcomes row header for the test-rig\"\n  [k outcomes]\n  [:tr {:key k :style {:background-color rgb/secondary :color \"#fff\"}}\n   [:th]\n   (map-indexed (fn [k b] [:th {:key k} (replace b #\"-reasons\" \"\")]) outcomes)])\n\n#_(comment\n    (def organ :lung)\n    (def centre :new)\n    (def tool :waiting)\n    (def day 100)\n    (def inputs {})\n    (def bundle\n\n      @(rf/subscribe [::subs/bundles]))\n    0)\n\n(defn test-rig\n  \"expose calcluation in test\"\n  [{:keys [day beta-keys outcomes fmaps s0 sum-betas F] :as env}]\n  (let [factors (keys fmaps)]\n    #_[:div \"Not yet\"]\n    [:> bs/Row {:style {:margin-top 20}}\n     (when factors\n       [:> bs/Col\n        ;; todo: add text configuration\n        [ui/test-day-selector \"Results for test day:\"]\n        [:> bs/Row\n         [:> bs/Col\n          [:> bs/Table {:striped true\n                        :bordered true\n                        :hover true}\n           [:thead [outcome-tr 1005 outcomes]]\n           (into [:tbody\n\n                  ;;  Show Baseline S0s for selected day\n                  [:tr {:key 1001}\n                   [:td [:b \"S\" [:sub \"0\"]]]\n                   (map-indexed\n                    (fn [i S0_i]\n                      [:td {:key i} (model/to-precision (- 1 S0_i) 4)])\n                    (second (model/S0-for-day s0 day)))]                    ;;  Show Baseline S0s for selected day\n                  [:tr {:key 1002}\n                   [:td [:b \"F\"]]\n                   (map-indexed\n                    (fn [i F_i]\n                      [:td {:key i} (model/to-precision F_i 4)])\n                    (second (model/S0-for-day F day)))]\n\n                    ;; Show sum-beta-xs for selected inputs\n                  [:tr {:key 1003}\n                   [:td [:b {:style {:font-size 20}} \"\ud835\udf2e \ud835\udefd\" [:sub [:i \"\ud835\udc8c\"]] \"\ud835\udccd\" [:sub [:i \"\ud835\udc8c\"]]]]\n                   (map-indexed\n                    (fn [i sb]\n                      [:td {:key i} (model/to-precision sb 4)])\n                    sum-betas)]\n\n                  [:tr {:key 1004 :style {:background-color rgb/secondary :color \"#fff\"}}\n                   [:th \"Factor\" [:sub [:i \"\ud835\udc8c\"]]]\n                   [:th {:col-span (str (count outcomes))}\n                    [:b {:style {:font-size 20}} \"\ud835\udefd\" [:sub [:i \"\ud835\udc8c\"]] \"\ud835\udccd\" [:sub [:i \"\ud835\udc8c\"]]]\n                    #_[:i \"Beta * x\"]]]\n\n                  (outcome-tr 1006 outcomes)\n                  (conj\n                   (map-indexed\n                    (fn [i [factor fmap]]\n                              ; Show individual beta-x contribution\n                      [:tr {:key i}\n                       [:td {:key i} factor]\n                       (when fmap\n                         (map-indexed\n                          (fn [j b]\n                            [:td {:key j} (model/to-precision (last (fac/selected-beta-x env factor fmap b)) 4)])\n                          beta-keys))])\n                    fmaps))])]]]])]))\n\n;;;\n;; svg styles\n;;;\n(defn bar-style\n  \"Add default values to outcome styles\"\n  [styles]\n  (let [{:keys [fill stroke opacity stroke-width]\n         :or {fill \"#41af6b\"\n              stroke \"#fff\"\n              stroke-width 1\n              opacity 0.7}} styles]\n    {:fill fill :stroke stroke :stroke-width stroke-width :opacity opacity}))\n\n(defstyle styles\n  [\".inner\" {:fill   \"none\"\n             :stroke-opacity 1\n             :stroke-width 0\n             :stroke \"#fa0\"}]\n  [\".outer\" {:fill   \"#CCC\"\n             :stroke-opacity 1\n             :stroke \"#ccc\"}]\n\n  [\".transplant\" (bar-style {:fill \"#41af6b\"})]\n  [\".all-reasons\" (bar-style {:fill \"#4866cb\"})]\n  [\".removal\" (bar-style {:fill \"#4b4d48\"})]\n  [\".residual\" (bar-style {:fill \"#4866cb\" #_\"#007BFF\"})]\n  [\".death\" (bar-style {:fill \"#000000\"})]\n  [\".post-transplant\" (bar-style {:fill \"#008888\"})]\n  [\".from-listing\" (bar-style {:fill \"#4444AA\"})]\n  [\".Survived\" (bar-style {:fill \"#664488\"})]\n  [\".graft\" (bar-style {:fill \"#00AA44\"})]\n  [\".annotation\" {:font-size \"13pt\"}]\n  [\".arrow\" {:stroke       \"#000\"\n             :stroke-width \"1.5px\"}])\n\n(defn pairwise-stagger\n  \"returns a monoid for a given stagger threshold. The monoid calculates an array of booleans which indicates\n   whether labels should be staggered by looking at heights of labels in adjacent pairs.\"\n  [threshold]\n  (fn\n    [staggers [i [f1 f2]]]\n    (if (and f2 (< (+ f1 f2) threshold))\n      (-> staggers\n          (assoc i true)\n          (assoc (inc i) true))\n      (update staggers i #(or % nil)))))\n\n(defn label-staggers\n  \"Take a sequence of values (the fs) to be plotted in a stacked bar chart. We want to label the bars with its\n   f-value which indicates the height of its bar. Bar heights can be smaller than the height of readable text, \n   and as it's possible for 2 adjacent bars to be next to each other, their labels can overlap unless we stagger\n   them left to right. \n\n   This function returns a vector indicating which of the f labels should be staggered. \n\"\n  [threshold fs]\n  ;(tap> fs)\n  (reduce (pairwise-stagger threshold)\n          []\n          (zipmap (range) (partition-all 2 1 fs))))\n\n(comment\n  (label-staggers 4 [7 23 0 3])\n\n\n\n  (label-staggers 7 [5 3 3 5])\n  ;; => [nil true true nil]\n\n  (label-staggers 7 [5 3 3 5 8 1])\n  ;; => [nil true true nil nil nil]\n\n  (label-staggers 10 [5 3 3 5 8 1])\n  ;; => [true true true true true true]\n\n  (label-staggers 7 [5 3 3 5 8 1 1])\n  ;; => [nil true true nil nil true true]\n  ;;   \n  (label-staggers 7 [5 3 3 5 8])\n  ;; => [nil true true nil nil]\n\n  (label-staggers 7 [1 1 1 1]) ;this never happens but if it did it would need a 4 position horizontal stagger\n  ;; => [true true true true]\n\n  ((pairwise-stagger 7) [] [0 [5 3]])\n  ;; => [nil]\n\n  ((pairwise-stagger 7) [nil] [1 [3 3]])\n  ;; => [nil true true]\n\n  ((pairwise-stagger 7) [nil true true] [2 [3 5]])\n  ;; => [nil nil true]\n  ((pairwise-stagger 7) [nil true true] [3 [5 nil]])\n  0)\n;; => nil\n;; \n\n;; currently unused\n#_(defn get-mustache\n    \"Lookup x in a form that may be a mustached template or a simple vector or a combination of both. \n   If the form is a string, return it\n   If the form is a vector, then return the xth element.\n   If the form is a map then it should have a :template and :data. Optionally also an :indexed value.\n   If get on the indexed value x returns non-nil, then return that value. This allows special values to be returned by index\n   even when other values require a template.\n   If the mdata map has no indexed field or x yields nil, then the :data value is assumed to be a mustached field name\n   in the :template. Render the template with that fied replaced by x\"\n    [mdata x]\n    (cond\n      (string? mdata)\n      mdata\n\n      (vector? mdata)\n      (mdata x)\n\n      (map? mdata)\n      (let [{:keys [indexed template data]} mdata]\n        (cond\n          (and indexed (get indexed x))\n          (get indexed x)\n\n          (and template data)\n          (mus/render template {data x})\n\n          :else (locals)))\n      :else mdata))\n\n;; currently unused\n#_(defn right-arrow\n    \"Render a right-arrow\"\n    [{:keys [x y fill scale stroke stroke-width]}]\n    [:path {:fill fill\n            :stroke stroke\n            :stroke-width stroke-width\n            :d \"M5 0v2h-5v1h5v2l3-2.53-3-2.47z\"\n            :transform (when (and x y scale)\n                         (str \"translate(\" x \" \" y \")scale(\" scale \")\"))}])\n\n;; currently unused\n#_(defn arrow\n    \"render an svg component that draws a white right arrow.\"\n    [{:keys [index count x-offset y-offset spacing]}]\n  ;(locals)\n    (when (< 0 index count)\n      (right-arrow {:x (+ x-offset (* index spacing))\n                    :y y-offset\n                    :fill \"#fff\"\n                    :scale \"3.5,6\"\n                    :stroke \"#fff\"\n                    :stroke-width 2})))\n\n(defn multiline-bin-label\n  \"render a multiline bin label\"\n  [bin-label x0 font-size]\n  (:into [:g]\n         (map-indexed\n          (fn [row line]\n            [:text {:key line\n                    :x (+ x0 (:x-offset bin-label))\n                    :y (+ (:y-offset bin-label) (* 35 row)) :font-size font-size}\n             line])\n          (:line bin-label))))\n\n(defn draw-bin-labels\n  [{:keys [bin-labels spacing offset font-size X]}]\n;  (locals)\n  (into [:g {:key 1}]\n        (map-indexed (fn [bar-index bin-label]\n                       (let [x0 (- (X (+ (* spacing #_(:time-index bin-label) (inc bar-index)))) (X offset))]\n                         (multiline-bin-label bin-label x0 font-size)))\n                     bin-labels)))\n\n(defn draw-bars\n  [{:keys [bin-labels spacing offset time-series bar-width data-keys data-styles X Y]}]\n\n  (into [:g {:key 2}]\n        (map-indexed (fn [bar-index bin-label]\n                       ;(locals)\n                       (let [;bar-index (:time-index bin-label)\n                             x0 (- (X (+ (* spacing (inc bar-index)))) (X offset))\n                             [_ {:keys [fs cum-fs]}] (nth time-series (:time-index bin-label))]\n                         [:g (into [:<> {:key (str \"bar-\" bar-index)}]\n                                   (map (fn [data-key cif cum-cif]\n                                          (let [styles (data-styles data-key)\n                                                y0 (- (Y cum-cif) (Y cif))\n                                                h (- (Y cum-cif) (Y (- cum-cif cif)))]\n                                            (when (not (js/isNaN y0))\n                                              [:g\n                                               [:rect (merge {:key data-key\n                                                              :x x0\n                                                              :y y0\n                                                              :width bar-width\n                                                              :height h\n                                                              :data-title cif}\n                                                             (ui/svg-styles styles)\n                                                             #_(dissoc styles :label-fill))]])))\n                                        data-keys\n                                        fs\n                                        cum-fs))]))\n                     bin-labels)))\n\n(defn draw-percents\n  [{:keys [bin-labels spacing offset time-series data-count bar-width data-keys data-styles X Y]}]\n  (into [:g {:key 3 :style {:opacity 1}}]\n        (map (fn [bar-index bin-label]\n\n                ;draw single bar and label\n               (let [[_ {:keys [fs cum-fs int-fs]}]\n                     (nth time-series (:time-index bin-label))\n                     x0 (- (X (+ (* spacing (inc bar-index)))) (X offset) 10)\n                     x-mid (+ x0 (/ bar-width 2) -0)\n                     staggers (label-staggers 0.12 (map #(if (nil? %) 0 %) fs))]\n                 (into [:g {:key bar-index}]\n                       (conj\n                        (map (fn [i data-key cif cum-cif int-fs]\n                               (let [styles (data-styles data-key)\n\n                                     y0 (if (> data-count 1)\n                                          (- (Y cum-cif) (Y cif)) (Y cif))\n                                     h (if (> data-count 1)\n                                         (- (Y cum-cif) (Y (- cum-cif cif)))\n                                         (- (Y 0) (Y cif)))\n                                     y-mid (+ y0 (/ h 2))]\n                                 (when true ;(> cif 0.005)\n                                   [:g\n                                    {:transform (str \"translate(\"\n                                                     (if (staggers i)\n                                                       (if (odd? i) 18 -54)\n                                                       (if (< cif 1) -20 -30))\n                                                     \" 10)\")}\n                                    [:rect (merge {:x (- x-mid 5)\n                                                   :width (cond\n                                                            (>= cif 1) 90\n                                                            (< cif 0.10) 70\n                                                            :else 70)\n                                                   :y (- y-mid 30)\n                                                   :height 40\n                                                   :rx 10}\n                                                  (ui/svg-styles styles)\n                                                  #_(dissoc styles :label-fill))]\n                                    [:text {:x x-mid :y y-mid :font-size 30 :fill (:label-fill styles)}\n                                     (str int-fs \"%\")]])))\n                             (range)\n                             data-keys\n                             fs\n                             cum-fs\n                             int-fs)))))\n             (range)\n             bin-labels)))\n\n\n(defn tool-metadata\n  [env organ tool]\n  ;(locals)\n  (get-in env [:mdata organ :tools tool]) ;; provisional\n\n  ;; Bear in mind that we will want to provide a default configuration template somehow.\n  ;; It's not entirely clear to me what is the best way to do this, but a deep-merge between the\n  ;; default configuration and the custom metadata is one possibility.\n  ;;\n  ;; The default configuration could be hard-coded into the initial database, or it could be read in\n  ;; from an external edn first.\n  (medl/deep-merge (get-in env [:mdata organ :tools :default])\n                   (get-in env [:mdata organ :tools tool]))\n\n  ;; One other issue to sort out here is that we've used organs names and tool names as keys into the\n  ;; configuration. It would be better if the confguartion were free to specify the domains (like :lung) and the\n  ;; particular tools (like :waiting). Keys like :lung and :waiting should be configured too.\n  )\n\n\n(defn stacked-bar-chart\n  \"Draw a stacked bar chart.\n   x is a Linear scale defined in svg.scales.Linear containing\n    :in - an input range of numbers to plot on the x-axis.\n    :out - an equivalent x coordinate in he SVG window.\n   X is a function mapping between the two\n   y and Y are similar for the Y axis\n   sample-days are indices into the cif data-series at which bars should be drawn.\n   outcomes are the cif data-series\"\n  #_[X Y time-series data-keys tool-mdata data-styles]\n  [{:keys [data-keys tool-mdata] :as params}]\n;  (locals)\n  (let [params (assoc params\n                      :bin-labels (get-in tool-mdata [:bars :labels])\n                      :spacing (get-in tool-mdata [:bars :spacing])\n                      :offset (if-let [offset (get-in tool-mdata [:bars :offset])]\n                                offset\n                                1.5)\n                      :data-count (count data-keys)\n                      :bar-width (get-in tool-mdata [:bars :width])\n                      :font-size (get-in tool-mdata [:bars :font-size]))]\n    [:g {:key 1}\n     [:rect {:key        1\n             :class-name (:inner styles)\n             :x 0\n             :y 0\n             :width      1000\n             :height     600}]\n\n     [:g {:key \"bin-labels\"}\n      [draw-bin-labels params]]\n     [:g {:key \"bars\"}\n      [draw-bars params]]\n     [:g {:key \"percents\"}\n      [draw-percents params]]]))\n\n(defn bar-chart\n  \"Draw the bar chart\"\n  [{:keys [organ tool base-outcome-keys s0 F] :as env}]\n  (let [sample-days (map\n                     utils/year->day\n                     (range (inc (utils/day->year (first (last s0))))))\n        fs-by-year (map (fn [day] (model/S0-for-day F day)) sample-days)\n        tool-mdata (tool-metadata env organ tool)\n        data-styles (get tool-mdata :outcomes)\n        plot-order (:plot-order tool-mdata)]\n    ;(locals)\n    [:> bs/Row\n     [:> bs/Col {:style {:margin-top 10}}\n      ;(:pre-section tool-mdata)\n\n      [svgc/svg-container (-> (space {:outer {:width (get-in tool-mdata [:bars :svg-width])\n                                              :height (get-in tool-mdata [:bars :svg-height])}\n                                      :margin (get-in tool-mdata [:bars :svg-margin])\n                                      :padding (get-in tool-mdata [:bars :svg-padding])\n                                      :x-domain [0 14]\n                                      :x-ticks 10\n                                      :y-domain [1 0]\n                                      :y-ticks 10})\n                              (assoc :styles styles)\n                              (#(assoc % :aspect-ratio (aspect-ratio (:width (:inner %)) (:height (:inner %))))))\n\n       (fn [_ _ X Y]\n         (let [fs-by-year-in-plot-order (fs-time-series base-outcome-keys plot-order fs-by-year)]\n          ;(locals)\n           [:g\n            (svg-outcome-legend plot-order data-styles)\n            [:g {:transform \"translate(280 0)\"}\n             [stacked-bar-chart (assoc env\n                                       :X X\n                                       :Y Y\n                                       :data-keys plot-order\n                                       :time-series fs-by-year-in-plot-order\n                                       :tool-mdata tool-mdata\n                                       :data-styles data-styles)]]]))]\n      [:section {:style {:margin-top 10}}\n       (:post-section tool-mdata)]]]))\n\n(defn stacked-area-chart\n  \"Draw a stacked bar chart.\n   x is a Linear scale defined in svg.scales.Linear containing\n    :in - an input range of numbers to plot on the x-axis.\n    :out - an equivalent x coordinate in he SVG window.\n   X is a function mapping between the two\n   y and Y are similar for the Y axis\n   sample-days are indices into the cif data-series at which bars should be drawn.\n   outcomes are the cif data-series\"\n  [{:keys [X Y year-series quarter-series data-keys tool-mdata data-styles]}]\n\n  (let [data-count (count data-keys)\n        ;; \n        ;; for 3 years\n        bar-width (get-in tool-mdata [:area :width])\n        spacing (get-in tool-mdata [:area :spacing])\n        bin-labels (get-in tool-mdata [:area :labels])\n        font-size (get-in tool-mdata [:area :font-size])\n        offset 1.85\n        q-offset 1.86\n        bar-positions (into []\n                            (map (fn [bin-label]\n                                   (let [bar-index (:time-index bin-label)\n                                         [time {:keys [fs cum-fs]}] (nth year-series bar-index)]\n                                     (into []\n                                           (map (fn [data-key cif cum-cif]\n                                                  (let [styles (data-styles data-key)\n                                                        x0 (- (X (+ (* spacing (inc bar-index)))) (X offset))\n                                                        x-mid (+ x0 (/ bar-width 2) (- (X 0.2)))\n                                                        y0 (- (Y cum-cif) (Y cif))]\n                                                    {:key data-key\n                                                     :time time\n                                                     :x (+ x-mid 15)\n                                                     :y0 y0\n                                                     :y1 (Y cum-cif)\n                                                     :styles (ui/svg-styles styles)\n                                                     #_(dissoc styles :label-fill)}))\n                                                data-keys\n                                                fs\n                                                cum-fs))))\n                                 bin-labels))\n\n           ;;todo: these are no longer quarter year intervals. Rename\n        quarter-positions (into []\n                                (map (fn [[time {:keys [fs cum-fs]}]]\n                                       (let [quarter (utils/day->week time)]\n                                         (into []\n                                               (map (fn [data-key cif cum-cif]\n                                                      (let [styles (data-styles data-key)\n                                                            x0 (- (X (+ (* spacing (inc (/ quarter 52))))) (X q-offset))\n                                                            x-mid (+ x0 (/ bar-width 2) (- (X 0.2)))\n                                                            y0 (- (Y cum-cif) (Y cif))]\n                                                        {:key data-key\n                                                         :time time\n                                                         :x (+ x-mid 15)\n                                                         :y0 y0\n                                                         :y1 (Y cum-cif)\n                                                         :styles (ui/svg-styles styles) #_(dissoc styles :label-fill)}))\n                                                    data-keys\n                                                    fs\n                                                    cum-fs))))\n                                     quarter-series))\n\n        q-polygon-data (into {} (for [dk data-keys]\n                                  [dk  (let [tops (for [bp-dks quarter-positions\n                                                        bp-dk bp-dks\n                                                        :when (= dk (:key bp-dk))]\n                                                    (select-keys bp-dk [:x :y0 :y1]))]\n                                         (concat (map (juxt :x :y0) tops)\n                                                 (map (juxt :x :y1) (reverse tops))))]))]\n    [:g {:key 1}\n     [:rect {:key        1\n             :class-name (:inner styles)\n             :x 0\n             :y 0\n             :width      1000\n             :height     600}]\n     ;;\n     ;; Plot areas\n     ;;\n     [:g\n      (into [:g {:opacity 1}]\n            (for [dk data-keys]\n              [:polygon {:key dk\n                         :points (for [[x y] (dk q-polygon-data)]\n                                   (str x \",\" y \" \"))\n                         :style (ui/svg-styles (data-styles dk))\n                         #_(dissoc  (data-styles dk) :label-fill)}]))\n\n        ; draw labels at yearly intervals\n      (into [:g {:key 2}]\n            (map (fn [bin-label]\n                   (let [bar-index (:time-index bin-label)\n                         x0 (- (X (+ (* spacing (inc bar-index)))) (X offset))\n                         #_#_[time {:keys [fs cum-fs]}] (nth year-series bar-index)]\n                     [:g\n                      (multiline-bin-label bin-label x0 font-size)\n                      #_(into [:g {:key (str \"area-chart-\" bar-index)}]\n                              (map (fn [cif cum-cif]\n                                     (let [x-mid (+ x0 (/ bar-width 2) (- (X 0.2)))\n                                           y0 (- (Y cum-cif) (Y cif))]\n\n                                       #_(when (not (js/isNaN y0))\n                                           (multiline-bin-label bin-label x0 font-size))))\n                                   fs\n                                   cum-fs))]))\n                 bin-labels))\n\n       ;;\n       ;; Plot label lines\n       ;;\n      (into [:g]\n            (map\n             (fn [bp]\n               (let [x (:x (first bp))]\n                 [:line {:x1 x :x2 x :y1 (Y 0) :y2 (Y 1)\n                         :style {:stroke \"#fff\" :stroke-width 3}}])))\n            bar-positions)]\n\n   ; draw labels\n     (into [:g {:key 3 :style {:opacity 1}}]\n           (map (fn [bin-label]\n                ;draw single bar and label\n                  (let [bar-index (:time-index bin-label)\n                        x0 (- (X (+ (* spacing (inc bar-index)))) (X offset) 10)\n                        x-mid (+ x0 (/ bar-width 2) -0)\n                        [time {:keys [fs cum-fs int-fs]}] (nth year-series bar-index)\n                        staggers (label-staggers 0.12 (map #(if (nil? %) 0 %) fs))]\n                    ;(locals)\n                    (into [:g {:key time}]\n                          (conj\n                           (map (fn [i data-key cif cum-cif int-fs]\n                                  (let [styles (data-styles data-key)\n\n                                        y0 (if (> data-count 1)\n                                             (- (Y cum-cif) (Y cif)) (Y cif))\n                                        h (if (> data-count 1)\n                                            (- (Y cum-cif) (Y (- cum-cif cif)))\n                                            (- (Y 0) (Y cif)))\n                                        y-mid (+ y0 (/ h 2))]\n                                    (when true ;(> cif 0.005)\n                                      [:g\n                                       {:transform (str \"translate(\"\n                                                        (if (staggers i)\n                                                          (if (odd? i) 18 -54)\n                                                          (if (< cif 1) -20 -30))\n                                                        \" 10)\")}\n                                       [:rect (merge {:x (- x-mid 5)\n                                                      :width (cond\n                                                               (>= cif 1) 90\n                                                               (< cif 0.10) 70\n                                                               :else 70)\n                                                      :y (- y-mid 30)\n                                                      :height 40\n                                                      :rx 10}\n                                                     (ui/svg-styles styles)\n                                                     #_(dissoc styles :label-fill))]\n                                       [:text {:x x-mid :y y-mid :font-size 30 :fill (:label-fill styles)}\n                                        (str int-fs \"%\")]])))\n                                (range)\n                                data-keys\n                                fs\n                                cum-fs\n                                int-fs)))))\n                bin-labels))]))\n\n(defn area-chart\n  \"Draw the area chart\"\n  [{:keys [organ tool base-outcome-keys s0 F] :as env}]\n  (let [year-days (map\n                   utils/year->day\n                   (range (inc (utils/day->year (first (last s0))))))\n        fs-by-year (map (fn [day] (model/S0-for-day F day)) year-days)\n        quarter-days (map\n                      utils/week->day\n                      (range (inc (utils/day->week (first (last s0))))))\n        fs-by-quarter (map (fn [day] (model/S0-for-day F day)) quarter-days)\n        tool-mdata (tool-metadata env organ tool)\n        data-styles (get tool-mdata :outcomes)\n        plot-order (:plot-order tool-mdata)\n        svg-width 1060\n        svg-height 660]\n    ;(?-> tool-mdata ::area-chart)\n    ;(locals)\n    [:> bs/Row\n     [:> bs/Col {:style {:margin-top 10}}\n      [svgc/svg-container\n       (-> (space {:outer {:width (get-in tool-mdata [:area :svg-width])\n                           :height (get-in tool-mdata [:area :svg-height])}\n                   :aspect-ratio (aspect-ratio svg-width svg-height)\n                   :margin (get-in tool-mdata [:area :svg-margin]) #_{:top 0 :right 10 :bottom 0 :left 0}\n                   :padding #_(get-in tool-mdata [:area :svg-padding]) #_{:top 40 :right 20 :bottom 60 :left 20}\n                   {:top 40, :right 20, :bottom 100, :left 20}\n                   :x-domain [0 14]\n                   :x-ticks 10\n                   :y-domain [1 0]\n                   :y-ticks 10})\n           (assoc :styles styles)\n           (#(assoc % :aspect-ratio (aspect-ratio (:width (:inner %)) (:height (:inner %))))))\n\n       (fn [_ _ X Y]\n         (let [fs-by-year-in-plot-order (fs-time-series base-outcome-keys plot-order fs-by-year)\n               fs-by-quarter-in-plot-order (fs-time-series base-outcome-keys plot-order fs-by-quarter)]\n           [:g\n            (svg-outcome-legend plot-order data-styles)\n            [:g {:transform \"translate(280 0)\"}\n             #_[:rect {:x 0 :y 0 :width (X 10) :height (Y 1)\n                       :style {:fill \"#EEF8\" :border \"3px solid #CCC\"}}]\n             (stacked-area-chart {:X X\n                                  :Y Y\n                                  :year-series fs-by-year-in-plot-order\n                                  :quarter-series fs-by-quarter-in-plot-order\n                                  :data-keys plot-order\n                                  :tool-mdata tool-mdata\n                                  :data-styles data-styles})]]))]\n      [:section {:style {:margin-top 25}}\n       (:post-section tool-mdata)]]]))\n\n(defn h-and-s\n  \"render a head and shoulders icon\"\n  [{:keys [key fill scale]\n    :or {fill \"red\" scale \"0.2\"}}]\n  [:g {:key key\n       :transform (str \"scale(\" scale \")\") :style {:fill fill}}\n   [:path {:d (str \"M4 0c-1.1 0-2 1.12-2 2.5s.9 2.5 2 2.5 2-1.12 2-2.5-.9-2.5-2-2.5z\"\n                   \"m-2.09 5c-1.06.05-1.91.92-1.91 2v1h8v-1c0-1.08-.84-1.95-1.91-2-.54.61-1.28 1-2.09 1-.81 0-1.55-.39-2.09-1z\")}]])\n\n(defn ordinal->outcome\n  \"Deternine the outcome from the icon position\"\n  [ordinal cum-int-fs]\n  (reduce\n   (fn [i cum]\n     (if (>= ordinal cum) (inc i) i))\n   0\n   cum-int-fs))\n\n(defn ordinal-mdata\n  \"Determines an icon style based on the icon ordinal position in the array\"\n  [ordinal cum-int-fs tool-mdata]\n  (let [index (ordinal->outcome ordinal cum-int-fs)\n        plot-order (:plot-order tool-mdata)\n        outcome-key (if plot-order\n                      (plot-order index)\n                      nil)]\n    (get-in tool-mdata [:outcomes outcome-key])))\n\n(comment\n\n  (ordinal->outcome 0 [10 20 30 40 50])\n  ;; => 0\n  (ordinal->outcome 9 [10 20 30 40 50])\n  ;; => 0\n\n  (ordinal->outcome 10 [10 20 30 40 50])\n  ;; => 0\n\n  (ordinal->outcome 11 [10 20 30 40 50])\n\n  (ordinal->outcome 50 [10 20 30 40 50])\n  ;; => 4\n\n  (ordinal->outcome 51 [10 20 30 40 50])\n  ;; => 5\n  )\n\n(defn side-by-side-icon-array\n  \"Render stacked icon arrays - one for each timeperiod of interest - called a year at the moment.\"\n  [_plot-order year-series tool-mdata _data-styles]\n  (let [plot-order (:plot-order tool-mdata)\n        labels (get-in tool-mdata [:icons :labels])\n        ;randomise-icons @(rf/subscribe [::subs/randomise-icons])\n        icon-order (into [] (range 100))]\n;    (locals)\n\n    #_[ui/randomise-query-panel \"Randomise order?\"]\n    [:div\n     ;[ui/randomise-query-panel \"Randomise order?\"]\n\n     [svgc/svg-container (-> (space {:outer {:width (get-in tool-mdata [:icons :svg-width])\n                                             :height (+ 40 (get-in tool-mdata [:icons :svg-height]))}\n                                     :margin (get-in tool-mdata [:icons :svg-margin])\n                                     :padding (get-in tool-mdata [:icons :svg-padding])\n                                     :x-ticks 10\n                                     :y-domain [300 0]\n                                     :y-ticks 10})\n                             (assoc :styles styles)\n                             (#(assoc % :aspect-ratio (aspect-ratio (:width (:inner %)) (:height (:inner %))))))\n\n      (fn [_x _y _X _Y]\n        (into [:g {:transform \"translate(20,40),scale(1.42)\"}]\n              (for [label-index (range (count labels))\n                    :let [label (nth labels label-index)\n                          time-index (:time-index label)\n                          [_ {:keys [int-fs cum-int-fs]}] (nth year-series time-index)]]\n\n                [:g {:key (str \"lab-\" label-index)\n                     :transform \"translate (0, 10)\"}\n                 [:g {:key 1}\n                  (for [k (range (count plot-order))\n                        :let [outcome-key (plot-order k)\n                              outcome (get-in tool-mdata [:outcomes outcome-key])]]\n                    [:g {:key (str \"outk-\" k)\n                         :transform (str \"translate (\" (* label-index 250) \", \" (- (* k 25) 20) \")\")}\n                     [h-and-s {:scale 2 :fill (:fill outcome)}]\n                     [:text {:transform \"translate (40,15)\"} (str (int-fs k) \" \" (:label outcome))]])]\n\n                 [:g {:key 2 :transform (str \"translate(\" (* label-index 250) \", 90)\")}\n                  (for [i (range 10)\n                        j (range 10)\n                        :let [ordinal (icon-order (+ j (* 10 i)))]]\n                    [:g {:key (str \"i-\" j \"-\" i)\n                         :transform (str \"translate(\" (* j 22) \" \" (* i 22) \")\")}\n                     [h-and-s\n                      {:scale 2 :fill (:fill (ordinal-mdata ordinal cum-int-fs tool-mdata))}]])]\n\n                 [:g {:key 3 :transform (str \"translate(\" (* label-index 250) \", 340)\")}\n                  [:text {:font-size \"1.2em\"\n                          :x 20} (get-in label [:line 0])]]])))]]))\n;\n(defn stacked-icon-array\n  \"Render stacked icon arrays - one for each timeperiod of interest - called a year at the moment.\"\n  [year-series tool-mdata _]\n  (let [svg-width (get-in tool-mdata [:icons :svg-width])\n        svg-height (get-in tool-mdata [:icons :svg-height])\n        plot-order (:plot-order tool-mdata)\n        labels (get-in tool-mdata [:icons :labels])\n        ;randomise-icons @(rf/subscribe [::subs/randomise-icons])\n        icon-order (into [] (range 100))]\n;    (locals)\n    [ui/col {:sm 12\n             :style {:padding 0\n                     #_#_:background-color \"#CCC\"}}\n     (for [i (range (count labels))\n           :let [label (nth labels i)\n                 time-index (:time-index label)\n                 [_ {:keys [int-fs cum-int-fs]}] (nth year-series time-index)]]\n       [ui/row {:style {:padding \"0px 0px\"}\n                :key (str \"year-\" time-index)}\n        [ui/col {:key 1}\n\n         [:h5 {:style {:margin-top 20}}\n          (let [line (:line label)]\n            (if (sequential? line) (map str line) line))]\n\n         ;[ui/randomise-query-panel \"Randomise order?\"]\n         [svgc/svg-container (-> (space {:outer {:width (get-in tool-mdata [:icons :svg-width])\n                                                 :height (get-in tool-mdata [:icons :svg-height])}\n                                         :aspect-ratio (aspect-ratio svg-width svg-height)\n                                         :margin (get-in tool-mdata [:icons :svg-margin]) #_{:top 0 :right 10 :bottom 0 :left 0}\n                                         :padding (get-in tool-mdata [:icons :svg-padding]) #_{:top 40 :right 20 :bottom 60 :left 20}\n                                         :x-domain [0 300]\n                                         :x-ticks 10\n                                         :y-domain [300 0]\n                                         :y-ticks 10})\n                                 (assoc :styles styles)\n                                 (#(assoc % :aspect-ratio (aspect-ratio (:width (:inner %)) (:height (:inner %))))))\n          #_(assoc (space {:outer {:width svg-width\n                                   :height svg-height}\n                           :aspect-ratio (aspect-ratio svg-width svg-height)\n                           :margin (get-in tool-mdata [:icons :svg-margin])\n                           :padding (get-in tool-mdata [:icons :svg-padding])\n                           :x-domain [0 300]\n                           :x-ticks 10\n                           :y-domain [0 300]\n                           :y-ticks 10})\n                   :styles styles)\n\n          (fn [_ _ _ _]\n            [:g {:transform \"translate(10,15),scale(1.9)\"}\n             [:g {:key 1}\n              (for [k (range (count plot-order))\n                    :let [outcome-key (plot-order k)\n                          outcome (get-in tool-mdata [:outcomes outcome-key])]]\n                [:g {:key (str \"outk-\" k)\n                     :transform (str \"translate (\" 10 \", \" (+ (* k 25) 20) \")\")}\n                 [h-and-s {:scale 2 :fill (:fill outcome)}]\n                 [:text {:transform \"translate(30,15)\"} (str (int-fs k) \" \" (:label outcome))]])]\n             #_(svg-outcome-legend plot-order data-styles\n                                   {:width 380\n                                    :string-value-f (fn [i] (str \": \" (int-fs i) \"%\"))\n                                    :position-f #(str \"translate(15 \" (+ 20 (* 60 %)) \"),scale(0.7)\")})\n             (for [i (range 10)\n                   j (range 10)\n                   :let [ordinal (icon-order (+ j (* 10 i)))]]\n               [:g {:key (str \"i-\" j \"-\" i)\n                    :transform (str \"translate(\" (+ 300 (* j 22)) \" \" (+ 20 (* i 22)) \")\")}\n                [h-and-s\n                 {:scale 2\n                  :fill (:fill (ordinal-mdata ordinal cum-int-fs tool-mdata))}]])])]]])]))\n\n(defn move-item\n  \"Returns a-vector with all items (if any) moved to the start or the end depending on whether\n     a < b or b < a\n     \"\n  [a-vector item a b]\n  (if (not-any? #(= item %) a-vector)\n    a-vector\n    (into [] (sort-by (fn [el]\n                        (if (= item el) a b)) a-vector))))\n(defn move-to-start\n  \"Move item to start of vector\"\n  [a-vector item]\n  (move-item a-vector item -1 1))\n\n(defn move-to-end\n  \"Move item to end of vector.\"\n  [a-vector item]\n  (move-item a-vector item 1 -1))\n\n(comment\n  (move-to-end [1 2 3] 1)\n  ;; => [2 3 1]\n\n  (move-to-end [1 2 3] 7)\n  ;; => [1 2 3]\n\n  (move-to-end [1 1 2 3] 1)\n  ;; => [2 3 1 1]\n\n  0)\n\n(defn icon-array\n  \"render an icon array results view\"\n  [{:keys [organ tool base-outcome-keys s0 F] :as env}]\n\n  (let [sample-days (map\n                     utils/year->day\n                     (range (inc (utils/day->year (first (last s0))))))\n        fs-by-year (map (fn [day] (model/S0-for-day F day)) sample-days)\n        tool-mdata (tool-metadata env organ tool)\n        data-styles (get tool-mdata :outcomes)\n        plot-order (:plot-order tool-mdata)\n        plot-order* (as-> (:plot-order tool-mdata) x\n                      (move-to-end x :removal)\n                      (move-to-end x :death))\n        fs-by-year-in-plot-order (fs-time-series base-outcome-keys plot-order fs-by-year)\n        window-width (rf/subscribe [::subs/window-width])\n        mobile? (<= @window-width ui/mobile-break)]\n    [:> bs/Row\n     [:> bs/Col {:style {:margin \"10px 0px\"}}\n      (if mobile?\n        (stacked-icon-array fs-by-year-in-plot-order tool-mdata data-styles)\n        (side-by-side-icon-array plot-order* fs-by-year-in-plot-order tool-mdata data-styles))]]))\n\n(defn table-render\n  [year-series tool-mdata plot-order data-styles]\n  (let [;plot-order (:plot-order tool-mdata)\n        labels (get-in tool-mdata [:table :labels])\n        years (range (count labels))]\n    [:> bs/Table {:style {:margin-top 20\n                          :border \"3px solid #666\"}\n                  :responsive \"xl\"\n                  :bordered true}\n     [:thead\n      [:tr\n       ;[:th \"Outcome\"]\n       (for [i years\n             :let [label (nth labels i)\n                   line (:line label)\n                   line (if (sequential? line) (map str line) line)]]\n         [:th {:style {:border-bottom \"3px solid #666\"\n                       #_#_:color \"#fff\"\n                       #_#_:background-color \"#888\"}\n               :key (str \"y-\" i)} line])]]\n     [:tbody\n      (for [j (range (count plot-order))\n            :let [style ((nth plot-order j) data-styles)\n                  long-label (:long-label style)]]\n        [:tr {:key (str \"c-\" j) :style style}\n         ;[:th outcome]\n         (for [i years\n               :let [label (nth labels i)\n                     time-index (:time-index label)\n                     [_ {:keys [int-fs]}] (nth year-series time-index)]]\n           [:td {:key (str \"r-\" i)} (str (nth int-fs j) \"%\") \" \" long-label])])]]))\n\n(defn text-render\n  \"If we took an example of 100 transplant patients, who input the same information as you into the tool, we would expect:\nAfter 1 year\t31  of them to have received a transplant\n\t\t67  of them to still be waiting for a transplant\n\t\t  2  of them to have died or been removed from the list\nAfter 2 years \t67  of them to have received a transplant\n\t\t23  of them to still be waiting for a transplant\n\t\t10  of them to have died or been removed from the list\nAfter 3 years\t75  of them to have received a transplant\n\t\t  3  of them to still be waiting for a transplant\n\t\t22  of them to have died or been removed from the list \n\"\n  [year-series tool-mdata plot-order data-styles]\n  (let [;plot-order (:plot-order tool-mdata)\n        labels (get-in tool-mdata [:table :labels])\n        years (range (count labels))]\n    [:div {:style {:margin-top 20}}\n     #_[:div\n        [:div\n         (for [i years\n               :let [label (nth labels i)\n                     line (:line label)\n                     line (if (sequential? line) (map str line) line)]]\n           [:div {:style {:border-bottom \"3px solid #666\"\n                          #_#_:color \"#fff\"\n                          #_#_:background-color \"#888\"}\n                  :key (str \"y-\" i)} line])]]\n     [:div\n      (for [i years\n            :let [label (nth labels i)\n                  line (:line label)\n                  line (if (sequential? line) (map str line) line)]]\n        [:div {:key (str \"y-\" i) :style {:margin-bottom 20}} [:h4 line]\n         (for [j (range (count plot-order))\n               :let [style ((nth plot-order j) data-styles)\n                     long-label (:long-label style)]]\n           [:div {:key (str \"c-\" j)}\n            (let [label (nth labels i)\n                  time-index (:time-index label)\n                  [_ {:keys [int-fs]}] (nth year-series time-index)]\n              [:div {:key (str \"r-\" i)} (str (nth int-fs j)) \" \" long-label])])])]]))\n\n\n\n(defn table\n  \"render a table results view\"\n  [{:keys [organ tool base-outcome-keys s0 F] :as env}]\n\n  (let [sample-days (map\n                     utils/year->day\n                     (range (inc (utils/day->year (first (last s0))))))\n        fs-by-year (map (fn [day] (model/S0-for-day F day)) sample-days)\n        tool-mdata (tool-metadata env organ tool)\n        data-styles (get tool-mdata :outcomes)\n\n        ;; Table plots need to have positive items at the start; negative (like death) at the end.\n        ;; for survival curves the :residual component is positive farmed, so bring \n        ;; this to the start.\n        ;;\n        ;; todo: Avoid this hacky fix by configuring the plot-order at the visualisation level\n        ;; rather than at the tool level.\n        plot-order* (as-> (:plot-order tool-mdata) x\n                      (move-to-start x :residual)\n                      (move-to-end x :removal)\n                      (move-to-end x :death))\n\n        ;(conj (vec (remove #(= :death %) (:plot-order tool-mdata))) :death)\n        fs-by-year-in-plot-order (fs-time-series base-outcome-keys plot-order* fs-by-year)]\n    ;(locals)\n    [:section\n     (table-render fs-by-year-in-plot-order tool-mdata plot-order* data-styles)\n     #_(:post-section tool-mdata)]))\n\n(defn text\n  \"a text results view\"\n  [{:keys [organ tool base-outcome-keys s0 F] :as env}]\n\n  (let [sample-days (map\n                     utils/year->day\n                     (range (inc (utils/day->year (first (last s0))))))\n        fs-by-year (map (fn [day] (model/S0-for-day F day)) sample-days)\n        tool-mdata (tool-metadata env organ tool)\n        data-styles (get tool-mdata :outcomes)\n\n        ;; Table plots need to have positive items at the start; negative (like death) at the end.\n        ;; for survival curves the :residual component is positive farmed, so bring \n        ;; this to the start.\n        ;;\n        ;; todo: Avoid this hacky fix by configuring the plot-order at the visualisation level\n        ;; rather than at the tool level.\n        plot-order* (as-> (:plot-order tool-mdata) x\n                      (move-to-start x :residual)\n                      (move-to-end x :removal)\n                      (move-to-end x :death))\n\n        ;(conj (vec (remove #(= :death %) (:plot-order tool-mdata))) :death)\n        fs-by-year-in-plot-order (fs-time-series base-outcome-keys plot-order* fs-by-year)]\n    ;(locals)\n    [:section\n     (text-render fs-by-year-in-plot-order tool-mdata plot-order* data-styles)\n     #_(:post-section tool-mdata)]))\n\n(defn test-render\n  [year-series tool-mdata plot-order data-styles]\n  (let [labels (get-in tool-mdata [:table :labels])\n        years (range (count labels))]\n    [:div {:style {:margin-top 20}}\n\n     [:div\n      (for [i years\n            :let [label (nth labels i)\n                  line (:line label)\n                  line (if (sequential? line) (map str line) line)]]\n        [:div {:key (str \"y-\" i) :style {:margin-bottom 20}} [:h4 line]\n         (for [j (range (count plot-order))\n               :let [style ((nth plot-order j) data-styles)\n                     long-label (:long-label style)]]\n           [:div {:key (str \"c-\" j)}\n            (let [label (nth labels i)\n                  time-index (:time-index label)\n                  [_ {:keys [int-fs]}] (nth year-series time-index)]\n              [:div {:key (str \"r-\" i)} (str (nth int-fs j)) \" \" long-label])])])]]))\n\n(defn test-gen\n  \"send a test data structure to tap for comparison against an R structure\"\n  [{:keys [organ tool base-outcome-keys s0 F] :as env}]\n  (let [sample-days (map\n                     utils/year->day\n                     (range (inc (utils/day->year (first (last s0))))))\n        fs-by-year (map (fn [day] (model/S0-for-day F day)) sample-days)\n        tool-mdata (tool-metadata env organ tool)\n        data-styles (get tool-mdata :outcomes)\n\n        ;; Table plots need to have positive items at the start; negative (like death) at the end.\n        ;; for survival curves the :residual component is positive farmed, so bring \n        ;; this to the start.\n        ;;\n        ;; todo: Avoid this hacky fix by configuring the plot-order at the visualisation level\n        ;; rather than at the tool level.\n        plot-order* (as-> (:plot-order tool-mdata) x\n                      (move-to-start x :residual)\n                      (move-to-end x :removal)\n                      (move-to-end x :death))\n\n        ;(conj (vec (remove #(= :death %) (:plot-order tool-mdata))) :death)\n        fs-by-year-in-plot-order (fs-time-series base-outcome-keys plot-order* fs-by-year)]\n    ;(locals)\n    [:section\n     (test-render fs-by-year-in-plot-order tool-mdata plot-order* data-styles)\n     #_(:post-section tool-mdata)]))\n"]}