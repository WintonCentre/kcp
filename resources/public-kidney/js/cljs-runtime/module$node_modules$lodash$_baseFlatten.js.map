{
"version":3,
"file":"module$node_modules$lodash$_baseFlatten.js",
"lineCount":2,
"mappings":"AAAAA,cAAA,CAAA,uCAAA,CAA4D,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAepGC,QAASA,YAAW,CAACC,KAAD,CAAQC,KAAR,CAAeC,SAAf,CAA0BC,QAA1B,CAAoCC,MAApC,CAA4C,CAAA,IAC1DC,MAAQ,CAAC,CADiD,CAE1DC,OAASN,KAAMM,CAAAA,MAEnBJ,UAAA,GAAcA,SAAd,CAA0BK,aAA1B,CAGA,KAFAH,MAEA,GAFWA,MAEX,CAFoB,EAEpB,EAAO,EAAEC,KAAT,CAAiBC,MAAjB,CAAA,CAAyB,CACvB,IAAIE,MAAQR,KAAA,CAAMK,KAAN,CACA,EAAZ,CAAIJ,KAAJ,EAAiBC,SAAA,CAAUM,KAAV,CAAjB,CACc,CAAZ,CAAIP,KAAJ,CAEEF,WAAA,CAAYS,KAAZ,CAAmBP,KAAnB,CAA2B,CAA3B,CAA8BC,SAA9B,CAAyCC,QAAzC,CAAmDC,MAAnD,CAFF,CAIEK,SAAA,CAAUL,MAAV,CAAkBI,KAAlB,CALJ,CAOYL,QAPZ,GAQEC,MAAA,CAAOA,MAAOE,CAAAA,MAAd,CARF,CAQ0BE,KAR1B,CAFuB,CAazB,MAAOJ,OApBuD,CAfoC,IAChGK,UAAYb,OAAA,CAAQ,uCAAR,CADoF;AAEhGW,cAAgBX,OAAA,CAAQ,2CAAR,CAoCpBC,OAAOC,CAAAA,OAAP,CAAiBC,WAtCmF;",
"sources":["node_modules/lodash/_baseFlatten.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$lodash$_baseFlatten\"] = function(global,require,module,exports) {\nvar arrayPush = require('./_arrayPush'),\n    isFlattenable = require('./_isFlattenable');\n\n/**\n * The base implementation of `_.flatten` with support for restricting flattening.\n *\n * @private\n * @param {Array} array The array to flatten.\n * @param {number} depth The maximum recursion depth.\n * @param {boolean} [predicate=isFlattenable] The function invoked per iteration.\n * @param {boolean} [isStrict] Restrict to values that pass `predicate` checks.\n * @param {Array} [result=[]] The initial result value.\n * @returns {Array} Returns the new flattened array.\n */\nfunction baseFlatten(array, depth, predicate, isStrict, result) {\n  var index = -1,\n      length = array.length;\n\n  predicate || (predicate = isFlattenable);\n  result || (result = []);\n\n  while (++index < length) {\n    var value = array[index];\n    if (depth > 0 && predicate(value)) {\n      if (depth > 1) {\n        // Recursively flatten arrays (susceptible to call stack limits).\n        baseFlatten(value, depth - 1, predicate, isStrict, result);\n      } else {\n        arrayPush(result, value);\n      }\n    } else if (!isStrict) {\n      result[result.length] = value;\n    }\n  }\n  return result;\n}\n\nmodule.exports = baseFlatten;\n\n};"],
"names":["shadow$provide","global","require","module","exports","baseFlatten","array","depth","predicate","isStrict","result","index","length","isFlattenable","value","arrayPush"]
}
