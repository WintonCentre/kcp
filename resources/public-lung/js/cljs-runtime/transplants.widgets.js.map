{"version":3,"sources":["transplants/widgets.cljs"],"mappings":"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","names":["transplants.widgets/key->id","k","cljs.core/namespace","cljs.core/name","transplants.widgets/bad-widget-type","msg","js/console.log","js/transplants","js/transplants.widgets","js/transplants.widgets.widget","method-table__4747__auto__","cljs.core.atom","prefer-table__4748__auto__","method-cache__4749__auto__","cached-hierarchy__4750__auto__","hierarchy__4751__auto__","cljs.core.get","fexpr__81924","cljs.core/MultiFn","cljs.core.symbol","transplants.widgets/widget","m","cljs.core/Keyword","e81925","ms","clojure.edn.read_string","cljs.core/map?","cljs.core._EQ_","cljs.core.pr_str","_e","_","transplants.widgets/mb","transplants.widgets/label-width","transplants.widgets/widget-width","_w","js/module$node_modules$react_bootstrap$cjs$index.Row","js/module$node_modules$react_bootstrap$cjs$index.Col","transplants.bsio/reset-button","re-frame.core/dispatch","p__81927","map__81928","cljs.core/--destructure-map","transplants.widgets/radio","factor-name","factor-key","levels","_default","_type","vertical","optional","_boxed","info-box?","w","value-f","cljs.core/deref","re_frame.core.subscribe","optional?","info-box","e81929","e","js/module$node_modules$react_bootstrap$cjs$index.Form.Label","shadow.debug/tap->","js/module$node_modules$react_bootstrap$cjs$index.Button","p1__81926#","transplants.bsio/radio-button-group","cljs.core.keyword","cljs.core/vals","cljs.core.assoc","p__81931","map__81932","_factor-name","p1__81930#","transplants.bsio/dropdown","p__81934","map__81935","_factor","_levels","_model","numerics","p1__81933#","cljs.core/every?","cljs.core/identity","cljs.core.map","transplants.numeric-input/numeric-input","p__81937","map__81938","type"],"sourcesContent":["(ns transplants.widgets\n  (:require [re-frame.core :as rf]\n            [clojure.edn :as edn]\n            [\"react-bootstrap\" :as bs]\n            [transplants.bsio :as bsio]\n            ;[transplants.subs :as subs]\n            [transplants.events :as events]\n            [transplants.numeric-input :as num]\n            [shadow.debug :refer [locals ?> ?-> ?->>]]\n            ))\n\n(defn key->id\n  \"Convert a namespaced factor key to an id\"\n  [k]\n  (if k (str (namespace k) \"-\" (name k)) nil))\n\n(defn bad-widget-type [msg]\n  (js/console.log \"Bad widget type\" msg))\n\n(defmulti widget\n  \"Create a widget component of a given type.\n   The first argument is the widget map, and the value of its :type slot determines the \n   widget type. If it's a keyword, dispatch on that. If it's a string, read it into a map and dispatch on that map's :type.\n   This allows us to add parameters to the widget inside the type column in the spreadsheet.\"\n  ;:type\n  (fn [m]\n    (if (keyword? (:type m))\n      (:type m)\n      (try\n        (let [ms (edn/read-string (:type m))]\n          (if (and (map? ms) (= (:type ms) :numeric))\n            :numeric\n            (do \n              (bad-widget-type \":type :numeric should be like {:type :numeric :dps 0 :min 0 :max 100}\" )\n              (js/console.log \"culprit is: \" (pr-str m))\n              :unsupported)))\n        (catch :default _e\n          (bad-widget-type \"Invalid type\")\n          :unsupported))))\n  :default :unsupported)\n\n(comment\n  (map? nil)\n  (edn/read-string \"{:a 1}\")\n  (nil? (edn/read-string \"{:a}\"))\n  )\n  \n; Create a radio-button-group widget given a widget inputs map - for example:\n(comment\n  (def widget-inputs-map\n    \"Example of a widget-inputs-map\"\n    {:factor-key :kidney/sex\n     :levels [{:level :male\n               :level-name \"Male\"}\n              {:level :female\n               :level-name \"Female\"}]\n     :default :male\n     :optional :no\n     :type :radio}))\n\n; factors with a nil type field have no widget\n(defmethod widget nil [_]\n  nil)\n\n(def mb 0)\n(def label-width \"label column grid-size\" 5)\n(def widget-width \"Widget column grid-size\" 7)\n\n(defmethod widget :reset\n  [_w]\n  #_(widget-layout (bsio/reset-button {:on-click #(rf/dispatch [::events/reset-inputs])}))\n  [:> bs/Row {:style {:display \"flex\" :align-items  \"\" :margin-top 5}}\n   [:> bs/Col {:xs label-width}]\n   [:> bs/Col {:xs widget-width}\n    (bsio/reset-button {:on-click #(rf/dispatch [::events/reset-inputs])})]])\n\n(defn radio\n  [{:keys [factor-name factor-key levels _default _type vertical optional _boxed info-box?] :as w}]\n  (let [value-f (fn [] @(rf/subscribe [factor-key]))\n        optional? (some? optional)\n        info-box (try (edn/read-string info-box?)\n                      (catch :default e\n                        {:title [:span {:style {:color \"red\"}} \"Info-box syntax error\"]\n                         :content [:p \"see \" factor-name [:br] e]}))]\n;    (locals)\n    [:> bs/Row {:style {:display \"flex\" :align-items  \"center\" :margin-bottom mb}}\n     [:> bs/Col {:xs label-width\n                 :style {:display \"flex\" :justify-content \"flex-end\"}}\n      [:> bs/Form.Label {:style {:font-weight \"bold\" :text-align \"right\" :margin-bottom mb :line-height 1.2}}\n       (:factor-name w)]\n      (when info-box?\n        (?-> (:info-box? w) ::info-box)\n        [:> bs/Button {:size \"sm\"\n                       :variant \"outline\"\n                       :class-name \"more\"\n                       :title \"click for more info\"\n                     ;:style {:cursor \"pointer\"}\n                       :on-click (fn [_e]\n                                   (rf/dispatch [::events/modal-data\n                                                 {:show true\n                                                  :title (get info-box :title (:factor-name w))\n                                                  :content (get info-box :content info-box)\n                                                  ;:content (edn/read-string (:info-box? w))\n                                                  :ok (fn [_e] (rf/dispatch [::events/modal-data false]))}])\n                                   (?-> {:show true\n                                         :title (get info-box :title (:factor-name w))\n                                         :content (get info-box :content info-box)\n                                         #_(str \"Some text for \" (:factor-name w))\n                                         :ok (fn [_e] (rf/dispatch [::events/modal-data false]))}\n                                        ::radio))}\n         [:span \"?\"]])]\n\n     [:> bs/Col {:xs widget-width}\n\n      (bsio/radio-button-group {:id (key->id factor-key)\n                                :vertical vertical\n                                :value-f value-f\n                                :optional optional?\n                                :on-change #(rf/dispatch [factor-key\n                                                          (keyword %)])\n                                :buttons-f (fn [] (vals levels))\n                                })\n      ]]))\n\n\n\n; radio buttons allow fast selection between options\n(defmethod widget :radio\n  [w]\n  [radio (assoc w :vertical false)])\n\n; radio buttons allow fast selection between options\n(defmethod widget :v-radio\n  [w]\n  [radio (assoc w :vertical true)])\n\n\n; dropdowns are similar to radio buttons but are useful when a radio-button-group\n; would is too wide\n(defmethod widget :dropdown\n  [{:keys [_factor-name factor-key levels _default _type] :as w}]\n  (let [value-f (fn [] @(rf/subscribe [factor-key]))]\n    \n    [:> bs/Row {:style {:display \"flex\" :align-items  \"center\" :margin-bottom mb}}\n     [:> bs/Col {:xs label-width\n                 :style {:display \"flex\" :justify-content \"flex-end\"}}\n      [:> bs/Form.Label {:style {:font-weight \"bold\"  :text-align \"right\" :line-height 1.2}}\n       (:factor-name w)]]\n     [:> bs/Col {:xs widget-width}\n      (bsio/dropdown {:id (key->id factor-key)\n                      :value-f value-f\n                      :on-change #(rf/dispatch [factor-key\n                                                (keyword %)])\n                      :buttons-f (fn [] (vals levels))})]]))\n\n; Note that the numeric-input arguments min, mapx, dps etc. come from the map encoded as a string inside the type column\n(defmethod widget :numeric\n  [{:keys [_factor-name factor-key _factor _levels _default _type _model] :as w}]\n  (let [value-f (fn [] @(rf/subscribe [factor-key]))\n        numerics (edn/read-string (:type w))]\n    [:> bs/Row {:style {:display \"flex\" :align-items  \"center\" :margin-bottom 3}}\n     [:> bs/Col {:xs label-width\n                 :style {:display \"flex\" :justify-content \"flex-end\"}}\n      [:> bs/Form.Label {:style {:font-weight \"bold\"  :text-align \"right\" :line-height 1.2}}\n       (:factor-name w)]]\n     [:> bs/Col {:xs widget-width\n                 :style {:display \"flex\"}}\n      (if (and (map? numerics)\n               (every? identity (map numerics [:min :max :dps])))\n        [num/numeric-input {:key factor-key\n                            :value-f value-f\n                            :on-change #(rf/dispatch [factor-key %])\n                            :min (:min numerics) :max (:max numerics) :dps (:dps numerics)\n                            :units (:sub-text w)}]\n        \n        [:div \"Check that \" (:factor w) \" has min, max, and dps parameters\"])]]))\n\n\n(comment\n  (def value-f (fn [] @(rf/subscribe [:lung/bmi])))\n  (#(rf/dispatch [:lung/bmi %]) 60)\n  (value-f)\n  \n  (widget {:type :radio})\n  (widget {:type :foo}))\n\n(defmethod widget :unsupported\n  [{:keys [type] :as m}]\n   (js/console.log \"unsupported widget-type: \"  m)\n  [:div  type \" widget badly configured\"])\n\n(defmethod widget :param\n  [_]\n  nil)\n\n(defmethod widget :none\n  [_]\n  nil)\n;------------------------\n;\n(comment\n  (widget {:factor-key \"foo\" :type :radio})\n\n  (bsio/radio-button-group {:id \"Sex\"\n                            :value-k :sex\n                            :value-f (fn [] :male)\n                            :on-change identity\n                            :buttons-f (fn [] [{:key :male :value :male :level-namel \"Male\"}\n                                               {:key :female :value :female :level-name \"Female\"}])})\n\n\n  (bsio/radio-button-group {:id \"Sex\"\n                            :value-k :sex          ; factor\n                            :value-f (fn [] :male) ; default value? \n                            :on-change identity    ; e.g. #(rf/dispatch [:set-factor-level %])\n                            :buttons-f (fn [] [{:key :male\n                                                :level :male\n                                                :level-name \"Male\"}\n                                               {:key :female\n                                                :level :female\n                                                :level-name \"Female\"}])})\n  )\n\n"]}