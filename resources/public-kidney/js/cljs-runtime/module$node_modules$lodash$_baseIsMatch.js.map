{
"version":3,
"file":"module$node_modules$lodash$_baseIsMatch.js",
"lineCount":2,
"mappings":"AAAAA,cAAA,CAAA,uCAAA,CAA4D,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAAA,IAChGC,MAAQH,OAAA,CAAQ,mCAAR,CADwF,CAEhGI,YAAcJ,OAAA,CAAQ,yCAAR,CA4DlBC,OAAOC,CAAAA,OAAP,CA5CAG,QAAoB,CAACC,MAAD,CAASC,MAAT,CAAiBC,SAAjB,CAA4BC,UAA5B,CAAwC,CAAA,IACtDC,MAAQF,SAAUG,CAAAA,MADoC,CAEtDA,OAASD,KAF6C,CAGtDE,aAAe,CAACH,UAEpB,IAAc,IAAd,EAAIH,MAAJ,CACE,MAAO,CAACK,MAGV,KADAL,MACA,CADSO,MAAA,CAAOP,MAAP,CACT,CAAOI,KAAA,EAAP,CAAA,CAAgB,CACd,IAAII,KAAON,SAAA,CAAUE,KAAV,CACX,IAAKE,YAAD,EAAiBE,IAAA,CAAK,CAAL,CAAjB,CACIA,IAAA,CAAK,CAAL,CADJ,GACgBR,MAAA,CAAOQ,IAAA,CAAK,CAAL,CAAP,CADhB,CAEI,EAAEA,IAAA,CAAK,CAAL,CAAF,EAAaR,OAAb,CAFR,CAIE,MAAO,CAAA,CANK,CAShB,IAAA,CAAO,EAAEI,KAAT;AAAiBC,MAAjB,CAAA,CAAyB,CACvBG,IAAA,CAAON,SAAA,CAAUE,KAAV,CADgB,KAEnBK,IAAMD,IAAA,CAAK,CAAL,CAFa,CAGnBE,SAAWV,MAAA,CAAOS,GAAP,CAHQ,CAInBE,SAAWH,IAAA,CAAK,CAAL,CAEf,IAAIF,YAAJ,EAAoBE,IAAA,CAAK,CAAL,CAApB,CACE,IAAiBI,IAAAA,EAAjB,GAAIF,QAAJ,EAA8B,EAAED,GAAF,GAAST,OAAT,CAA9B,CACE,MAAO,CAAA,CADT,CADF,IAIO,CACDa,IAAAA,CAAQ,IAAIhB,KAChB,IAAIM,UAAJ,CACE,IAAIW,OAASX,UAAA,CAAWO,QAAX,CAAqBC,QAArB,CAA+BF,GAA/B,CAAoCT,MAApC,CAA4CC,MAA5C,CAAoDY,IAApD,CAEf,IAAiBD,IAAAA,EAAX,GAAAE,MAAA,CACE,CAAAhB,WAAA,CAAYa,QAAZ,CAAsBD,QAAtB,CAAgC,CAAhC,CAA+EP,UAA/E,CAA2FU,IAA3F,CADF,CAEEC,CAAAA,MAFR,CAIE,MAAO,CAAA,CATJ,CAVgB,CAuBzB,MAAO,CAAA,CAzCmD,CAlBwC;",
"sources":["node_modules/lodash/_baseIsMatch.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$lodash$_baseIsMatch\"] = function(global,require,module,exports) {\nvar Stack = require('./_Stack'),\n    baseIsEqual = require('./_baseIsEqual');\n\n/** Used to compose bitmasks for value comparisons. */\nvar COMPARE_PARTIAL_FLAG = 1,\n    COMPARE_UNORDERED_FLAG = 2;\n\n/**\n * The base implementation of `_.isMatch` without support for iteratee shorthands.\n *\n * @private\n * @param {Object} object The object to inspect.\n * @param {Object} source The object of property values to match.\n * @param {Array} matchData The property names, values, and compare flags to match.\n * @param {Function} [customizer] The function to customize comparisons.\n * @returns {boolean} Returns `true` if `object` is a match, else `false`.\n */\nfunction baseIsMatch(object, source, matchData, customizer) {\n  var index = matchData.length,\n      length = index,\n      noCustomizer = !customizer;\n\n  if (object == null) {\n    return !length;\n  }\n  object = Object(object);\n  while (index--) {\n    var data = matchData[index];\n    if ((noCustomizer && data[2])\n          ? data[1] !== object[data[0]]\n          : !(data[0] in object)\n        ) {\n      return false;\n    }\n  }\n  while (++index < length) {\n    data = matchData[index];\n    var key = data[0],\n        objValue = object[key],\n        srcValue = data[1];\n\n    if (noCustomizer && data[2]) {\n      if (objValue === undefined && !(key in object)) {\n        return false;\n      }\n    } else {\n      var stack = new Stack;\n      if (customizer) {\n        var result = customizer(objValue, srcValue, key, object, source, stack);\n      }\n      if (!(result === undefined\n            ? baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG, customizer, stack)\n            : result\n          )) {\n        return false;\n      }\n    }\n  }\n  return true;\n}\n\nmodule.exports = baseIsMatch;\n\n};"],
"names":["shadow$provide","global","require","module","exports","Stack","baseIsEqual","baseIsMatch","object","source","matchData","customizer","index","length","noCustomizer","Object","data","key","objValue","srcValue","undefined","stack","result"]
}
