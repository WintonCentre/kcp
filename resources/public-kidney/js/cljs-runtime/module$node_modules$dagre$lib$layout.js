shadow$provide.module$node_modules$dagre$lib$layout=function(global,require,module,exports){function runLayout(g,time){time("    makeSpaceForEdgeLabels",function(){makeSpaceForEdgeLabels(g)});time("    removeSelfEdges",function(){removeSelfEdges(g)});time("    acyclic",function(){acyclic.run(g)});time("    nestingGraph.run",function(){nestingGraph.run(g)});time("    rank",function(){rank(util.asNonCompoundGraph(g))});time("    injectEdgeLabelProxies",function(){injectEdgeLabelProxies(g)});time("    removeEmptyRanks",
function(){removeEmptyRanks(g)});time("    nestingGraph.cleanup",function(){nestingGraph.cleanup(g)});time("    normalizeRanks",function(){normalizeRanks(g)});time("    assignRankMinMax",function(){assignRankMinMax(g)});time("    removeEdgeLabelProxies",function(){removeEdgeLabelProxies(g)});time("    normalize.run",function(){normalize.run(g)});time("    parentDummyChains",function(){parentDummyChains(g)});time("    addBorderSegments",function(){addBorderSegments(g)});time("    order",function(){order(g)});
time("    insertSelfEdges",function(){insertSelfEdges(g)});time("    adjustCoordinateSystem",function(){coordinateSystem.adjust(g)});time("    position",function(){position(g)});time("    positionSelfEdges",function(){positionSelfEdges(g)});time("    removeBorderNodes",function(){removeBorderNodes(g)});time("    normalize.undo",function(){normalize.undo(g)});time("    fixupEdgeLabelCoords",function(){fixupEdgeLabelCoords(g)});time("    undoCoordinateSystem",function(){coordinateSystem.undo(g)});time("    translateGraph",
function(){translateGraph(g)});time("    assignNodeIntersects",function(){assignNodeIntersects(g)});time("    reversePoints",function(){reversePointsForReversedEdges(g)});time("    acyclic.undo",function(){acyclic.undo(g)})}function updateInputGraph(inputGraph,layoutGraph){_.forEach(inputGraph.nodes(),function(v){var inputLabel=inputGraph.node(v),layoutLabel=layoutGraph.node(v);inputLabel&&(inputLabel.x=layoutLabel.x,inputLabel.y=layoutLabel.y,layoutGraph.children(v).length&&(inputLabel.width=layoutLabel.width,
inputLabel.height=layoutLabel.height))});_.forEach(inputGraph.edges(),function(e){var inputLabel=inputGraph.edge(e);e=layoutGraph.edge(e);inputLabel.points=e.points;_.has(e,"x")&&(inputLabel.x=e.x,inputLabel.y=e.y)});inputGraph.graph().width=layoutGraph.graph().width;inputGraph.graph().height=layoutGraph.graph().height}function buildLayoutGraph(inputGraph){var g=new Graph({multigraph:!0,compound:!0}),graph=canonicalize(inputGraph.graph());g.setGraph(_.merge({},graphDefaults,_.mapValues(_.pick(graph,
graphNumAttrs),Number),_.pick(graph,graphAttrs)));_.forEach(inputGraph.nodes(),function(v){var node=canonicalize(inputGraph.node(v));g.setNode(v,_.defaults(_.mapValues(_.pick(node,nodeNumAttrs),Number),nodeDefaults));g.setParent(v,inputGraph.parent(v))});_.forEach(inputGraph.edges(),function(e){var edge=canonicalize(inputGraph.edge(e));g.setEdge(e,_.merge({},edgeDefaults,_.mapValues(_.pick(edge,edgeNumAttrs),Number),_.pick(edge,edgeAttrs)))});return g}function makeSpaceForEdgeLabels(g){var graph=
g.graph();graph.ranksep/=2;_.forEach(g.edges(),function(e){e=g.edge(e);e.minlen*=2;"c"!==e.labelpos.toLowerCase()&&("TB"===graph.rankdir||"BT"===graph.rankdir?e.width+=e.labeloffset:e.height+=e.labeloffset)})}function injectEdgeLabelProxies(g){_.forEach(g.edges(),function(e){var edge=g.edge(e);edge.width&&edge.height&&(edge=g.node(e.v),e={rank:(g.node(e.w).rank-edge.rank)/2+edge.rank,e},util.addDummyNode(g,"edge-proxy",e,"_ep"))})}function assignRankMinMax(g){var maxRank=0;_.forEach(g.nodes(),function(v){v=
g.node(v);v.borderTop&&(v.minRank=g.node(v.borderTop).rank,v.maxRank=g.node(v.borderBottom).rank,maxRank=_.max(maxRank,v.maxRank))});g.graph().maxRank=maxRank}function removeEdgeLabelProxies(g){_.forEach(g.nodes(),function(v){var node=g.node(v);"edge-proxy"===node.dummy&&(g.edge(node.e).labelRank=node.rank,g.removeNode(v))})}function translateGraph(g){function getExtremes(attrs){var x=attrs.x,y=attrs.y,w=attrs.width;attrs=attrs.height;minX=Math.min(minX,x-w/2);maxX=Math.max(maxX,x+w/2);minY=Math.min(minY,
y-attrs/2);maxY=Math.max(maxY,y+attrs/2)}var minX=Number.POSITIVE_INFINITY,maxX=0,minY=Number.POSITIVE_INFINITY,maxY=0,graphLabel=g.graph(),marginX=graphLabel.marginx||0,marginY=graphLabel.marginy||0;_.forEach(g.nodes(),function(v){getExtremes(g.node(v))});_.forEach(g.edges(),function(e){e=g.edge(e);_.has(e,"x")&&getExtremes(e)});minX-=marginX;minY-=marginY;_.forEach(g.nodes(),function(v){v=g.node(v);v.x-=minX;v.y-=minY});_.forEach(g.edges(),function(e){e=g.edge(e);_.forEach(e.points,function(p){p.x-=
minX;p.y-=minY});_.has(e,"x")&&(e.x-=minX);_.has(e,"y")&&(e.y-=minY)});graphLabel.width=maxX-minX+marginX;graphLabel.height=maxY-minY+marginY}function assignNodeIntersects(g){_.forEach(g.edges(),function(e){var edge=g.edge(e),nodeV=g.node(e.v);e=g.node(e.w);if(edge.points){var p1=edge.points[0];var p2=edge.points[edge.points.length-1]}else edge.points=[],p1=e,p2=nodeV;edge.points.unshift(util.intersectRect(nodeV,p1));edge.points.push(util.intersectRect(e,p2))})}function fixupEdgeLabelCoords(g){_.forEach(g.edges(),
function(e){e=g.edge(e);if(_.has(e,"x")){if("l"===e.labelpos||"r"===e.labelpos)e.width-=e.labeloffset;switch(e.labelpos){case "l":e.x-=e.width/2+e.labeloffset;break;case "r":e.x+=e.width/2+e.labeloffset}}})}function reversePointsForReversedEdges(g){_.forEach(g.edges(),function(e){e=g.edge(e);e.reversed&&e.points.reverse()})}function removeBorderNodes(g){_.forEach(g.nodes(),function(v){if(g.children(v).length){v=g.node(v);var t=g.node(v.borderTop),b=g.node(v.borderBottom),l=g.node(_.last(v.borderLeft)),
r=g.node(_.last(v.borderRight));v.width=Math.abs(r.x-l.x);v.height=Math.abs(b.y-t.y);v.x=l.x+v.width/2;v.y=t.y+v.height/2}});_.forEach(g.nodes(),function(v){"border"===g.node(v).dummy&&g.removeNode(v)})}function removeSelfEdges(g){_.forEach(g.edges(),function(e){if(e.v===e.w){var node=g.node(e.v);node.selfEdges||(node.selfEdges=[]);node.selfEdges.push({e,label:g.edge(e)});g.removeEdge(e)}})}function insertSelfEdges(g){var layers=util.buildLayerMatrix(g);_.forEach(layers,function(layer){var orderShift=
0;_.forEach(layer,function(v,i){var node=g.node(v);node.order=i+orderShift;_.forEach(node.selfEdges,function(selfEdge){util.addDummyNode(g,"selfedge",{width:selfEdge.label.width,height:selfEdge.label.height,rank:node.rank,order:i+ ++orderShift,e:selfEdge.e,label:selfEdge.label},"_se")});delete node.selfEdges})})}function positionSelfEdges(g){_.forEach(g.nodes(),function(v){var node=g.node(v);if("selfedge"===node.dummy){var selfNode=g.node(node.e.v),x=selfNode.x+selfNode.width/2,y=selfNode.y,dx=node.x-
x;selfNode=selfNode.height/2;g.setEdge(node.e,node.label);g.removeNode(v);node.label.points=[{x:x+2*dx/3,y:y-selfNode},{x:x+5*dx/6,y:y-selfNode},{x:x+dx,y},{x:x+5*dx/6,y:y+selfNode},{x:x+2*dx/3,y:y+selfNode}];node.label.x=node.x;node.label.y=node.y}})}function canonicalize(attrs){var newAttrs={};_.forEach(attrs,function(v,k){newAttrs[k.toLowerCase()]=v});return newAttrs}var _=require("module$node_modules$dagre$lib$lodash"),acyclic=require("module$node_modules$dagre$lib$acyclic"),normalize=require("module$node_modules$dagre$lib$normalize"),
rank=require("module$node_modules$dagre$lib$rank$index"),normalizeRanks=require("module$node_modules$dagre$lib$util").normalizeRanks,parentDummyChains=require("module$node_modules$dagre$lib$parent_dummy_chains"),removeEmptyRanks=require("module$node_modules$dagre$lib$util").removeEmptyRanks,nestingGraph=require("module$node_modules$dagre$lib$nesting_graph"),addBorderSegments=require("module$node_modules$dagre$lib$add_border_segments"),coordinateSystem=require("module$node_modules$dagre$lib$coordinate_system"),
order=require("module$node_modules$dagre$lib$order$index"),position=require("module$node_modules$dagre$lib$position$index"),util=require("module$node_modules$dagre$lib$util"),Graph=require("module$node_modules$dagre$lib$graphlib").Graph;module.exports=function(g,opts){var time=opts&&opts.debugTiming?util.time:util.notime;time("layout",function(){var layoutGraph=time("  buildLayoutGraph",function(){return buildLayoutGraph(g)});time("  runLayout",function(){runLayout(layoutGraph,time)});time("  updateInputGraph",
function(){updateInputGraph(g,layoutGraph)})})};var graphNumAttrs=["nodesep","edgesep","ranksep","marginx","marginy"],graphDefaults={ranksep:50,edgesep:20,nodesep:50,rankdir:"tb"},graphAttrs=["acyclicer","ranker","rankdir","align"],nodeNumAttrs=["width","height"],nodeDefaults={width:0,height:0},edgeNumAttrs=["minlen","weight","width","height","labeloffset"],edgeDefaults={minlen:1,weight:1,width:0,height:0,labeloffset:10,labelpos:"r"},edgeAttrs=["labelpos"]}
//# sourceMappingURL=module$node_modules$dagre$lib$layout.js.map
