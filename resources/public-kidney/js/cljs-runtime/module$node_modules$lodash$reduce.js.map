{
"version":3,
"file":"module$node_modules$lodash$reduce.js",
"lineCount":2,
"mappings":"AAAAA,cAAA,CAAA,iCAAA,CAAsD,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAAA,IAC1FC,YAAcH,OAAA,CAAQ,yCAAR,CAD4E,CAE1FI,SAAWJ,OAAA,CAAQ,sCAAR,CAF+E,CAG1FK,aAAeL,OAAA,CAAQ,0CAAR,CAH2E,CAI1FM,WAAaN,OAAA,CAAQ,wCAAR,CAJ6E,CAK1FO,QAAUP,OAAA,CAAQ,oCAAR,CA8CdC,OAAOC,CAAAA,OAAP,CAPAM,QAAe,CAACC,UAAD,CAAaC,QAAb,CAAuBC,WAAvB,CAAoC,CAAA,IAC7CC,KAAOL,OAAA,CAAQE,UAAR,CAAA,CAAsBN,WAAtB,CAAoCG,UADE;AAE7CO,UAA+B,CAA/BA,CAAYC,SAAUC,CAAAA,MAE1B,OAAOH,KAAA,CAAKH,UAAL,CAAiBJ,YAAA,CAAaK,QAAb,CAAuB,CAAvB,CAAjB,CAA4CC,WAA5C,CAAyDE,SAAzD,CAAoET,QAApE,CAJ0C,CA5C2C;",
"sources":["node_modules/lodash/reduce.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$lodash$reduce\"] = function(global,require,module,exports) {\nvar arrayReduce = require('./_arrayReduce'),\n    baseEach = require('./_baseEach'),\n    baseIteratee = require('./_baseIteratee'),\n    baseReduce = require('./_baseReduce'),\n    isArray = require('./isArray');\n\n/**\n * Reduces `collection` to a value which is the accumulated result of running\n * each element in `collection` thru `iteratee`, where each successive\n * invocation is supplied the return value of the previous. If `accumulator`\n * is not given, the first element of `collection` is used as the initial\n * value. The iteratee is invoked with four arguments:\n * (accumulator, value, index|key, collection).\n *\n * Many lodash methods are guarded to work as iteratees for methods like\n * `_.reduce`, `_.reduceRight`, and `_.transform`.\n *\n * The guarded methods are:\n * `assign`, `defaults`, `defaultsDeep`, `includes`, `merge`, `orderBy`,\n * and `sortBy`\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Collection\n * @param {Array|Object} collection The collection to iterate over.\n * @param {Function} [iteratee=_.identity] The function invoked per iteration.\n * @param {*} [accumulator] The initial value.\n * @returns {*} Returns the accumulated value.\n * @see _.reduceRight\n * @example\n *\n * _.reduce([1, 2], function(sum, n) {\n *   return sum + n;\n * }, 0);\n * // => 3\n *\n * _.reduce({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {\n *   (result[value] || (result[value] = [])).push(key);\n *   return result;\n * }, {});\n * // => { '1': ['a', 'c'], '2': ['b'] } (iteration order is not guaranteed)\n */\nfunction reduce(collection, iteratee, accumulator) {\n  var func = isArray(collection) ? arrayReduce : baseReduce,\n      initAccum = arguments.length < 3;\n\n  return func(collection, baseIteratee(iteratee, 4), accumulator, initAccum, baseEach);\n}\n\nmodule.exports = reduce;\n\n};"],
"names":["shadow$provide","global","require","module","exports","arrayReduce","baseEach","baseIteratee","baseReduce","isArray","reduce","collection","iteratee","accumulator","func","initAccum","arguments","length"]
}
