{
"version":3,
"file":"module$node_modules$dagre$lib$rank$feasible_tree.js",
"lineCount":2,
"mappings":"AAAAA,cAAA,CAAA,gDAAA,CAAqE,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CAwD7GC,QAASA,UAAS,CAACC,CAAD,CAAIC,CAAJ,CAAO,CACvBC,QAASA,IAAG,CAACC,CAAD,CAAI,CACdC,CAAEC,CAAAA,OAAF,CAAUJ,CAAEK,CAAAA,SAAF,CAAYH,CAAZ,CAAV,CAA0B,QAAQ,CAACI,CAAD,CAAI,CAAA,IAChCC,MAAQD,CAAEJ,CAAAA,CACZM,MAAAA,CAAKN,CAAD,GAAOK,KAAP,CAAgBD,CAAEE,CAAAA,CAAlB,CAAsBD,KACvBR,EAAEU,CAAAA,OAAF,CAAUD,KAAV,CAAL,EAAsBE,KAAA,CAAMV,CAAN,CAASM,CAAT,CAAtB,GACEP,CAAEY,CAAAA,OAAF,CAAUH,KAAV,CAAa,EAAb,CAEA,CADAT,CAAEa,CAAAA,OAAF,CAAUV,CAAV,CAAaM,KAAb,CAAgB,EAAhB,CACA,CAAAP,GAAA,CAAIO,KAAJ,CAHF,CAHoC,CAAtC,CADc,CAYhBL,CAAEC,CAAAA,OAAF,CAAUL,CAAEc,CAAAA,KAAF,EAAV,CAAqBZ,GAArB,CACA,OAAOF,EAAEe,CAAAA,SAAF,EAdgB,CAqBzBC,QAASA,iBAAgB,CAAChB,CAAD,CAAIC,CAAJ,CAAO,CAC9B,MAAOG,EAAEa,CAAAA,KAAF,CAAQhB,CAAEiB,CAAAA,KAAF,EAAR,CAAmB,QAAQ,CAACX,CAAD,CAAI,CACpC,GAAIP,CAAEU,CAAAA,OAAF,CAAUH,CAAEJ,CAAAA,CAAZ,CAAJ,GAAuBH,CAAEU,CAAAA,OAAF,CAAUH,CAAEE,CAAAA,CAAZ,CAAvB,CACE,MAAOE,MAAA,CAAMV,CAAN,CAASM,CAAT,CAF2B,CAA/B,CADuB,CAQhCY,QAASA,WAAU,CAACnB,CAAD,CAAIC,CAAJ;AAAOmB,KAAP,CAAc,CAC/BhB,CAAEC,CAAAA,OAAF,CAAUL,CAAEc,CAAAA,KAAF,EAAV,CAAqB,QAAQ,CAACX,CAAD,CAAI,CAC/BF,CAAEoB,CAAAA,IAAF,CAAOlB,CAAP,CAAUmB,CAAAA,IAAV,EAAkBF,KADa,CAAjC,CAD+B,CAlFjC,IAAIhB,EAAIR,OAAA,CAAQ,sCAAR,CAAR,CACI2B,MAAQ3B,OAAA,CAAQ,wCAAR,CAAuB2B,CAAAA,KADnC,CAEIZ,MAAQf,OAAA,CAAQ,yCAAR,CAAkBe,CAAAA,KAE9Bd,OAAOC,CAAAA,OAAP,CA2BA0B,QAAqB,CAACvB,CAAD,CAAI,CACvB,IAAID,EAAI,IAAIuB,KAAJ,CAAU,CAAEE,SAAU,CAAA,CAAZ,CAAV,CAAR,CAGIC,MAAQzB,CAAEa,CAAAA,KAAF,EAAA,CAAU,CAAV,CAHZ,CAIIa,KAAO1B,CAAEc,CAAAA,SAAF,EAIX,KAHAf,CAAEY,CAAAA,OAAF,CAAUc,KAAV,CAAiB,EAAjB,CAGA,CAAO3B,SAAA,CAAUC,CAAV,CAAaC,CAAb,CAAP,CAAyB0B,IAAzB,CAAA,CACEC,KAEA,CAFOZ,gBAAA,CAAiBhB,CAAjB,CAAoBC,CAApB,CAEP,CADAmB,KACA,CADQpB,CAAEU,CAAAA,OAAF,CAAUkB,KAAKzB,CAAAA,CAAf,CAAA,CAAoBQ,KAAA,CAAMV,CAAN,CAAS2B,KAAT,CAApB,CAAqC,CAACjB,KAAA,CAAMV,CAAN,CAAS2B,KAAT,CAC9C,CAAAT,UAAA,CAAWnB,CAAX,CAAcC,CAAd,CAAiBmB,KAAjB,CAGF,OAAOpB,EAfgB,CAlCoF;",
"sources":["node_modules/dagre/lib/rank/feasible-tree.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$dagre$lib$rank$feasible_tree\"] = function(global,require,module,exports) {\n\"use strict\";\n\nvar _ = require(\"../lodash\");\nvar Graph = require(\"../graphlib\").Graph;\nvar slack = require(\"./util\").slack;\n\nmodule.exports = feasibleTree;\n\n/*\n * Constructs a spanning tree with tight edges and adjusted the input node's\n * ranks to achieve this. A tight edge is one that is has a length that matches\n * its \"minlen\" attribute.\n *\n * The basic structure for this function is derived from Gansner, et al., \"A\n * Technique for Drawing Directed Graphs.\"\n *\n * Pre-conditions:\n *\n *    1. Graph must be a DAG.\n *    2. Graph must be connected.\n *    3. Graph must have at least one node.\n *    5. Graph nodes must have been previously assigned a \"rank\" property that\n *       respects the \"minlen\" property of incident edges.\n *    6. Graph edges must have a \"minlen\" property.\n *\n * Post-conditions:\n *\n *    - Graph nodes will have their rank adjusted to ensure that all edges are\n *      tight.\n *\n * Returns a tree (undirected graph) that is constructed using only \"tight\"\n * edges.\n */\nfunction feasibleTree(g) {\n  var t = new Graph({ directed: false });\n\n  // Choose arbitrary node from which to start our tree\n  var start = g.nodes()[0];\n  var size = g.nodeCount();\n  t.setNode(start, {});\n\n  var edge, delta;\n  while (tightTree(t, g) < size) {\n    edge = findMinSlackEdge(t, g);\n    delta = t.hasNode(edge.v) ? slack(g, edge) : -slack(g, edge);\n    shiftRanks(t, g, delta);\n  }\n\n  return t;\n}\n\n/*\n * Finds a maximal tree of tight edges and returns the number of nodes in the\n * tree.\n */\nfunction tightTree(t, g) {\n  function dfs(v) {\n    _.forEach(g.nodeEdges(v), function(e) {\n      var edgeV = e.v,\n        w = (v === edgeV) ? e.w : edgeV;\n      if (!t.hasNode(w) && !slack(g, e)) {\n        t.setNode(w, {});\n        t.setEdge(v, w, {});\n        dfs(w);\n      }\n    });\n  }\n\n  _.forEach(t.nodes(), dfs);\n  return t.nodeCount();\n}\n\n/*\n * Finds the edge with the smallest slack that is incident on tree and returns\n * it.\n */\nfunction findMinSlackEdge(t, g) {\n  return _.minBy(g.edges(), function(e) {\n    if (t.hasNode(e.v) !== t.hasNode(e.w)) {\n      return slack(g, e);\n    }\n  });\n}\n\nfunction shiftRanks(t, g, delta) {\n  _.forEach(t.nodes(), function(v) {\n    g.node(v).rank += delta;\n  });\n}\n\n};"],
"names":["shadow$provide","global","require","module","exports","tightTree","t","g","dfs","v","_","forEach","nodeEdges","e","edgeV","w","hasNode","slack","setNode","setEdge","nodes","nodeCount","findMinSlackEdge","minBy","edges","shiftRanks","delta","node","rank","Graph","feasibleTree","directed","start","size","edge"]
}
