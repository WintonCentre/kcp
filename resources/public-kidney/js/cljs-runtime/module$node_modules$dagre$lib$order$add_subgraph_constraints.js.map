{
"version":3,
"file":"module$node_modules$dagre$lib$order$add_subgraph_constraints.js",
"lineCount":1,
"mappings":"AAAAA,cAAA,CAAA,4DAAA,CAAiF,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CACzH,IAAIC,EAAIH,OAAA,CAAQ,sCAAR,CAERC,OAAOC,CAAAA,OAAP,CAEAE,QAA+B,CAACC,CAAD,CAAIC,EAAJ,CAAQC,EAAR,CAAY,CAAA,IACrCC,KAAO,EAD8B,CAEvCC,QAEFN,EAAEO,CAAAA,OAAF,CAAUH,EAAV,CAAc,QAAQ,CAACI,CAAD,CAAI,CACpBC,CAAAA,CAAQP,CAAEQ,CAAAA,MAAF,CAASF,CAAT,CAGZ,KAJwB,IAEtBE,MAFsB,CAGtBC,SACF,CAAOF,CAAP,CAAA,CAAc,CAEZ,CADAC,MACA,CADSR,CAAEQ,CAAAA,MAAF,CAASD,CAAT,CACT,GACEE,SACA,CADYN,IAAA,CAAKK,MAAL,CACZ,CAAAL,IAAA,CAAKK,MAAL,CAAA,CAAeD,CAFjB,GAIEE,SACA,CADYL,QACZ,CAAAA,QAAA,CAAWG,CALb,CAOA,IAAIE,SAAJ,EAAiBA,SAAjB,GAA+BF,CAA/B,CAAsC,CACpCN,EAAGS,CAAAA,OAAH,CAAWD,SAAX,CAAsBF,CAAtB,CACA,MAFoC,CAItCA,CAAA,CAAQC,MAbI,CAJU,CAA1B,CAJyC,CAL8E;",
"sources":["node_modules/dagre/lib/order/add-subgraph-constraints.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$dagre$lib$order$add_subgraph_constraints\"] = function(global,require,module,exports) {\nvar _ = require(\"../lodash\");\n\nmodule.exports = addSubgraphConstraints;\n\nfunction addSubgraphConstraints(g, cg, vs) {\n  var prev = {},\n    rootPrev;\n\n  _.forEach(vs, function(v) {\n    var child = g.parent(v),\n      parent,\n      prevChild;\n    while (child) {\n      parent = g.parent(child);\n      if (parent) {\n        prevChild = prev[parent];\n        prev[parent] = child;\n      } else {\n        prevChild = rootPrev;\n        rootPrev = child;\n      }\n      if (prevChild && prevChild !== child) {\n        cg.setEdge(prevChild, child);\n        return;\n      }\n      child = parent;\n    }\n  });\n\n  /*\n  function dfs(v) {\n    var children = v ? g.children(v) : g.children();\n    if (children.length) {\n      var min = Number.POSITIVE_INFINITY,\n          subgraphs = [];\n      _.each(children, function(child) {\n        var childMin = dfs(child);\n        if (g.children(child).length) {\n          subgraphs.push({ v: child, order: childMin });\n        }\n        min = Math.min(min, childMin);\n      });\n      _.reduce(_.sortBy(subgraphs, \"order\"), function(prev, curr) {\n        cg.setEdge(prev.v, curr.v);\n        return curr;\n      });\n      return min;\n    }\n    return g.node(v).order;\n  }\n  dfs(undefined);\n  */\n}\n\n};"],
"names":["shadow$provide","global","require","module","exports","_","addSubgraphConstraints","g","cg","vs","prev","rootPrev","forEach","v","child","parent","prevChild","setEdge"]
}
