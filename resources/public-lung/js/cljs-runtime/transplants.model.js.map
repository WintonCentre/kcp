{"version":3,"sources":["transplants/model.cljs"],"mappings":";AAMA;;;iCAAA,jCAAMA,0EAEHC,EAAEC;AAFL,AAGE,OAAc,KAAAC,OAAYF,gBAAGC;;AAE/B;;;6BAAA,7BAAME,kEAEHH,EAAEI;AAFL,AAGE,OAAU,KAAAF,OAAYF,YAAGI;;AAE3B,AAAA;;;+BAAA,uCAAAC,tEAAME;AAAN,AAAA,IAAAD,WAAA,AAAA;AAAA,AAAA,QAAAA;KAAA;AAAA,OAAAC,2DAAA,CAAA,UAAA;;;KAAA;AAAA,OAAAA,2DAAA,CAAA,UAAA,MAAA,CAAA,UAAA;;;;AAAA,MAAA,KAAAC,MAAA,CAAA,8DAAA,AAAA;;;;;AAAA,CAAA,6DAAA,7DAAMD,wEAEFP;AAFJ,AAEO,oEAAA,7DAACS,2DAAWT;;;AAFnB,CAAA,6DAAA,7DAAMO,wEAGFP,EAAEI;AAHN,AAIG,OAACD,2BAAS,KAAA,JAAGH,WAAOI;;;AAJvB,CAAA,uDAAA,vDAAMG;;AAAN,AAOA,AASA;;;;;gCAAA,hCAAMG,wEAIHC;AAJH,AAKE,IAAMC,sBAAc,AAACC,gDAAQC,gCAAcC;IAErCC,sGAAUL,/FACA,AAACM,mDAAW,AAACL,oBAAcM;IACrCC,sMAAUR,/FACA,AAACS,mDAAW,AAACR,oBAAcM,vKAC3B,AAACD,mDAAW,AAACL,oBAAcS;IACrCC,yMAAUX,hGACA,AAACS,mDAAW,AAACR,oBAAcS,zKAC3B,AAACJ,mDAAW,AAACL,oBAAcW;IACrCC,uGAAQb,lGACA,AAACS,mDAAW,AAACR,oBAAcW;AAXzC,AAiBE,OAACE,sDAAOT,KACA,AAACU,6CAAKC,eAAK,AAACC,qDAAa,WAAAC;AAAA,AAAA,IAAAC,aAAAD;UAAA,AAAAE,4CAAAD,WAAA,IAAA,jEAAME;SAAN,AAAAD,4CAAAD,WAAA,IAAA,hEAAUG;AAAV,AAAe,OAACC,+BAAgBF;GAAMb,yDAC/D,AAACO,6CAAKC,eAAK,AAACC,qDAAa,WAAAO;AAAA,AAAA,IAAAC,aAAAD;UAAA,AAAAJ,4CAAAK,WAAA,IAAA,jEAAMJ;SAAN,AAAAD,4CAAAK,WAAA,IAAA,hEAAUH;AAAV,AAAe,OAACI,gCAAiBL;GAAMV,OAChE,AAACI,6CAAKC,eAAK,AAACC,qDAAa,WAAAU;AAAA,AAAA,IAAAC,aAAAD;UAAA,AAAAP,4CAAAQ,WAAA,IAAA,jEAAMP;SAAN,AAAAD,4CAAAQ,WAAA,IAAA,hEAAUN;AAAV,AAAe,OAACO,kCAAmBR;GAAMR;;AAmB9E;;;;;;;;;iCAAA,jCAAMiB,0EAQHC,cAAcC;AARjB,AASE,IAAMC,kBAAgB,AAACC,4CAAIC,SAAYH;AAAvC,AACE,IAAOI,KAAGL;QAAV,JACOM;IACAC,IAAE,AAACJ,4CAAI,qBAAA,rBAACK,0BAAcP;cAF7B,VAGOQ;aAHP,mFAAA,mFAAA,/KAIOC,mLAAWH;;AAJlB,AAKE,IAAAI,aAAgB,AAACtC,gBAAMgC;YAAvB,AAAAhB,4CAAAsB,WAAA,IAAA,nEAAOC;QAAP,AAAAvB,4CAAAsB,WAAA,IAAA,/DAAaE;IACPC,WAAI,AAACC,eAAKV;AADhB,AAEE,GAAI,AAACW,cAAIF;AACP,IAAAG,aAAiB,AAAC5C,gBAAMyC;iBAAxB,AAAAzB,4CAAA4B,WAAA,IAAA,xEAAOC;cAAP,AAAA7B,4CAAA4B,WAAA,IAAA,rEAAaE;IACPC,IAAE,AAACjB,4CAAIkB,iBAAE,4CAAA,5CAAClB;kBAADmB;AAAA,AAAM,UAAG,SAAAA,TAACC;;CAAgBV,GAAGX;IACtCsB,UAAG,AAACrB,4CAAIkB,iBAAE,4CAAA,5CAAClB;kBAADsB;AAAA,AAAM,UAAG,SAAAA,TAACF;;CAAgBJ,SAAIjB;IACxCwB,UAAQ,AAACvB,4CAAIwB,YAAEH,QAAGJ;IAClBQ,IAAE,4CAAA,5CAACzB;kBAAD0B;AAAA,AAAM,YAAAA,JAAGvB;;CAAKoB;IAChBI,UAAG,AAAC3B,4CAAI4B,iBAAExB,EAAEqB;IACZI,UAAG,CAAG1B,IAAE,AAAC2B,8CAAMF,iBAAEH;IACjBM,eAAQ,CAAG5B,IAAE,AAAC2B,8CAAMF,iBAAExB;AAP5B,AAQE,eAAOO;eACAkB;eACAF;eACAI;eACA,oDAAA,pDAACC,6CAAKzB,0FAAQQ,WAAMY;;;;;;;;AAC7BpB;;;;;AAKV;;;;;;;;+BAAA,/BAAM0B,sEAOHnE,GAAGqB;AAPN,AAQE,IAAM+C,oBACQ,+CAAA,WAAAC,1DAACC,fACD,AAACtD;AADD,AAAS,QAAI,gBAAAqD,hBAACjE,qCAASiB;GADvBrB;AAAd,AAGE,oBAAI,iBAAAuE,oBAAKH;AAAL,AAAA,oBAAAG;AAAQ,8BAAA,tBAAM,AAACnE,gBAAMgE;;AAArBG;;;AACFH;;AACA,OAAChE,gBAAMJ;;;AAEb;;;;;gCAAA,hCAAMwE,wEAIHxE,GAAGyE;AAJN,AAKE,IAAOC,KAAGD;IACHE,KAAG3E;aADV,TAEOyC;;AAFP,AAKI,IAAAmC,qBAAW,AAACxE,gBAAMsE;AAAlB,AAAA,oBAAAE;AAAA,QAAAA,JAASvF;AAAT,AACE,GAAI,AAAC0D,cAAI4B;AACP,IAAAE,aAAsB,qBAAA,rBAACI;kBAADD;AAAA,AAAa,QAAI,gBAAAA,hBAAC5E,qCAASf;;CAAGsF;aAApD,AAAAvD,4CAAAyD,WAAA,IAAA,pEAAOC;aAAP,AAAA1D,4CAAAyD,WAAA,IAAA,pEAAcE;AAAd,AACE,eAAO,AAACjC,eAAK4B;eAAIK;eAAO,AAACb,6CAAKzB,OAAO,EAAI,AAACM,cAAI+B,SACP,AAAC9D,eAAK8D,QACN,AAAC9D,eAAKyB;;;;;;AAC/C,OAACyB,6CAAKzB,OAAO,AAACzB,eAAKyB;;;AACrBA;;;;;AAIR,AA+BA;;;4CAAA,5CAAMyC,gGAEHC;AAFH,AAME,yDAAA,lDAACC,6CAAED;;AAEL;;;wBAAA,xBAAME,wDAEHC,WAAWC;AAFd,AAGE,mDAAA,WAAAC,vDAACtD;AAAD,AAAM,QAAA,MAAK,AAACuD,SAAYH,WAAW,SAAAE,TAACrD;GAAiBoD;;AAEvD,AAMA,AAsEA","names":["transplants.model/to-precision","d","sigs","js/Number","transplants.model/to-fixed","dps","var_args","G__81488","transplants.model/to-percent","js/Error","transplants.model.to_percent","transplants.model/sample-from","S0","day-in-first?","cljs.core.partial","transplants.utils/day-in?","cljs.core/first","W1S0","cljs.core.take_while","transplants.utils/week","M1S0","cljs.core.drop_while","transplants.utils/month","Q1S0","transplants.utils/quarter","Qs","cljs.core.concat","cljs.core.mapv","cljs.core/last","cljs.core.partition_by","p__81493","vec__81494","cljs.core.nth","day","_H","transplants.utils/day->week","p__81499","vec__81500","transplants.utils/day->month","p__81503","vec__81504","transplants.utils/day->quarter","transplants.model/cox-adjusted","survival-data","sum-beta-xs","exp-sum-beta-xs","cljs.core.map","js/Math.exp","SD","s","f","cljs.core/constantly","_sumall","result","vec__81519","_days","S","SD+","cljs.core/rest","cljs.core/seq","vec__81522","days+","S+","H","cljs.core/*","p1__81507#","js/Math.log","H+","p1__81508#","delta-h","cljs.core/-","p","p1__81509#","f+","cljs.core/+","s+","cljs.core.apply","sumall+","cljs.core.conj","transplants.model/S0-for-day","rv","p1__81535#","cljs.core.filter","and__4251__auto__","transplants.model/S0-for-days","days","ds","ss","temp__5751__auto__","vec__81540","accept","reject","p1__81536#","cljs.core/split-with","transplants.model/use-cox-adjusted?","tool","cljs.core._EQ_","transplants.model/cox","s0-for-day","sum-x-betas","p1__81548#","js/Math.pow"],"sourcesContent":["(ns transplants.model\n  \"Functions which assist in the model calculations.\"\n  (:require [transplants.utils :as utils]\n            ;[shadow.debug :refer [locals ?-> ?->>]]\n            ))\n\n(defn to-precision\n  \"js number to sig figs\"\n  [d sigs]\n  (.toPrecision (js/Number. d) sigs))\n\n(defn to-fixed\n  \"Wrap javascript toFixed\"\n  [d dps]\n  (.toFixed (js/Number. d) dps))\n\n(defn to-percent\n  \"Convert a decimal number to a fixed point string percentage\"\n  ([d] (to-percent d 0))\n  ([d dps]\n   (to-fixed (* d 100) dps)\n   #_(.toFixed (js/Number. (* d 100)) dps)))\n\n(comment\n  (.toFixed (js/Number. 1) 0)\n  (to-percent 0.066) ; => \"7\"\n  (to-percent 0.01) ; => \"1\"\n  (to-precision 123.456789 6)\n  ; => \"123.457\"\n  )\n\n;; TODO: DELETE THIS EVENTUALLY\n(defn sample-from\n  \"returns a selection of data from S0. Could be optimised so it only needs one pass through S0, \n   This is a once only call per centre so keeping it simple for now. It's called when centre data is stored on\n   :events/store-bundle-inputs\"\n  [S0]\n  (let [day-in-first? (partial utils/day-in? first)\n\n        W1S0 (->> S0\n                  (take-while (day-in-first? utils/week)))\n        M1S0 (->> S0\n                  (drop-while (day-in-first? utils/week))\n                  (take-while (day-in-first? utils/month)))\n        Q1S0 (->> S0\n                  (drop-while (day-in-first? utils/month))\n                  (take-while (day-in-first? utils/quarter)))\n        Qs (->> S0\n                (drop-while (day-in-first? utils/quarter)))]\n\n    ;; Selected days are: \n    ;;     weekly for first month; \n    ;;     then monthly for 1st quarter; \n    ;;     then by quarter\n    (concat W1S0\n            (mapv last (partition-by (fn [[day _H]] (utils/day->week day)) M1S0))\n            (mapv last (partition-by (fn [[day _H]] (utils/day->month day)) Q1S0))\n            (mapv last (partition-by (fn [[day _H]] (utils/day->quarter day)) Qs)))))\n\n  ;; for (i in 1:(dim(smoothed_cent)[1]-1)){\n  ;;   h_tx[i] <- smoothed_cent$capHtx[i+1] - smoothed_cent$capHtx[i]\n  ;;   p_tx[i] <- h_tx[i] * capS[i]\n  ;;   capF_tx[i+1] <- capF_tx[i] + p_tx[i]\n\n  ;;   h_rem[i] <- smoothed_cent$capHrem[i+1] - smoothed_cent$capHrem[i]\n  ;;   p_rem[i] <- h_rem[i] * capS[i]\n  ;;   capF_rem[i+1] <- capF_rem[i] + p_rem[i]\n\n  ;;   capS[i+1] <- capS[i] - p_tx[i] - p_rem[i]\n\n  ;;   sumall[i] <- capS[i] + capF_rem[i] + capF_tx[i]\n\n  ;; }\n\n  ;; out <- cbind(smoothed_cent, capS, capF_rem, capF_tx, sumall)\n\n(defn cox-adjusted\n  \"survival-data is a a vector of [day survival-by-outcomes].\n   survival-by-outcome is a vector of survivals for each outcome.\n   exp-sum-beta-xs is a vector of exponentials of sum-beta-xs for each outcome.\n   \n   Run the cox-adustment over survival-data, returning a vector of [day leaving-proportion-by-outcome] having taken \n   account of the input contributions to exp-sum-beta-xs, and having ensured the sum of all outcomes is 1.\n   Formally it has the same form as the input survival-data vector.\"\n  [survival-data sum-beta-xs]\n  (let [exp-sum-beta-xs (map js/Math.exp sum-beta-xs)]\n    (loop [SD survival-data\n           s 1\n           f (map (constantly 0) sum-beta-xs)\n           _sumall 1\n           result [[0 f]]]\n      (let [[_days S] (first SD)\n            SD+ (rest SD)]\n        (if (seq SD+)\n          (let [[days+ S+] (first SD+)\n                H (map * (map #(- (js/Math.log %)) S) exp-sum-beta-xs)\n                H+ (map * (map #(- (js/Math.log %)) S+) exp-sum-beta-xs)\n                delta-h (map - H+ H)\n                p (map #(* s %) delta-h)\n                f+ (map + f p)\n                s+ (- s (apply + p))\n                sumall+ (+ s (apply + f))]\n            (recur SD+\n                   s+\n                   f+\n                   sumall+\n                   (conj result [days+ f+])))\n          result)))))\n\n;; #todo\n;; Optimise this - we should not be doing multiple searches through S0 when we want to plot S0 over multiple days.\n;;\n(defn S0-for-day\n  \"Returns a vector of [day outcome-baselines] for the given day from S0.\n   \n   Since S0 may not collect all days, but S0-for-day will return the last known value \n   at or before the given day. The returned day may therefore be earlier or equal to the\n   input day.\n   \"\n  [S0 day]\n  (let [rv (->> S0\n                (filter #(<= (first %) day))\n                (last))]\n    (if (and rv (pos? (first rv)))\n      rv\n      (first S0))))\n\n(defn S0-for-days\n  \"Returns a vector of [day outcome-baselines] for each given day from S0. This is the\n  equivalent of `map #(S0-for-day S0 %) days` but avoids doing a pass through S0 for\n   each day.\"\n  [S0 days]\n  (loop [ds days\n         ss S0\n         result []]\n    ;; (if-not (and (seq ds) (seq ss))\n    ;;   result\n      (if-let [d (first ds)]\n        (if (seq ss)\n          (let [[accept reject] (split-with #(<= (first %) d) ss)]\n            (recur (rest ds) reject (conj result (if (seq accept)\n                                                   (last accept)\n                                                   (last result)))))\n          (conj result (last result)))\n        result)))\n;; => #'transplants.model/S0-for-days\n\n\n(comment\n  (let [S0 [[0 [1 1]]\n            [1 [0.9857067242 0.9980148933]]\n            [2 [0.9815928264 0.9960015827]]\n            [4 [0.9774623833 0.9949805958]]\n             [6 [0.9753882847 0.9939333019]]\n            [7 [0.9733049262 0.9939333019]]\n            [13 [0.9607879846 0.9939333019]]\n            [21 [0.9482812782 0.9928586086]]\n            [28 [0.9378307552 0.9885202078]]\n            [30 [0.9336213532 0.9874262621]]\n            [60 [0.8672177235 0.9712265117]]\n            [91 [0.8060717379 0.9521491681]]\n            [182 [0.6230995857 0.9059969849]]\n            [270 [0.5101771563 0.8622099907]]\n            [363 [0.4347761901 0.8264769796]]\n            [452 [0.3647959502 0.7881730203]]\n            [547 [0.3002271687 0.7487541769]]\n            [638 [0.2191936376 0.7108669536]]\n            [730 [0.1633465271 0.6539010494]]\n            [821 [0.1410543693 0.6200850504]]\n            [883 [0.112959532 0.5867497829]]\n            [954 [0.0991815473 0.5659942916]]\n            [1095 [0.080756853 0.5165745583]]]\n        days [0 5 30 100 1000 2000 10000]]\n    (S0-for-days S0  days))\n  ;; => [[0 [1 1]] [4 [0.9774623833 0.9949805958]] [30 [0.9336213532 0.9874262621]] [91 [0.8060717379 0.9521491681]] [954 [0.0991815473 0.5659942916]] [1095 [0.080756853 0.5165745583]] [1095 [0.080756853 0.5165745583]]]\n\n\n  0)\n\n(defn use-cox-adjusted?\n  \"Competing risk tools demand the cox-adjusted model\"\n  [tool]\n  ;;\n  ;; todo - we should be counting the outcomes here. More than 1 implies true\n  ;;\n  (= tool :waiting))\n\n(defn cox\n  \"For a single cox calculation we should use the formula based on all-S0 rather than S0\"\n  [s0-for-day sum-x-betas]\n  (map #(- 1 (js/Math.pow s0-for-day (js/Math.exp %))) sum-x-betas))\n\n(comment\n  (cox 0.9 [0.9 0.7])\n  ;; => (0.22828892339131668 0.1911728338852633)\n  ;;   \n  (map #(- 1 (js/Math.pow 0.9 (js/Math.exp %))) [0.9 0.7]))\n\n(comment\n  ;; cox-adjusted gives exactly the same results as the R adjcox on the original data.\n  ;; adjcox uses the same data, but inserts values at every day by copying the previous day if there is no data.\n  ;; cox-adjusted does a reasonable job if further days are deleted from the input set, but there may be a second order improvement to be made.\n  (let [surv-data [[0, [1, 1]]\n                   [1, [0.9857067 0.9980149]]\n                   [2, [0.9815928 0.9960016]]\n                   [4, [0.9774624 0.9949806]]\n                   [6, [0.9753883 0.9939333]]\n                   [7, [0.9733049 0.9939333]]\n                   [8, [0.9712219 0.9939333]]\n                   [10,[0.9670563 0.9939333]]]\n        sum-beta-xs (map js/Math.exp [-0.162124472180451 0.682324669172932])]\n\n    (cox-adjusted surv-data sum-beta-xs))\n  (time\n   (doseq [_x (range 10000)]\n     (let [surv-data [[0 [1 1]]\n                      [1 [0.9857067242 0.9980148933]]\n                      [2 [0.9815928264 0.9960015827]]\n                      [4 [0.9774623833 0.9949805958]]\n                      [6 [0.9753882847 0.9939333019]]\n                      [7 [0.9733049262 0.9939333019]]\n                      [13 [0.9607879846 0.9939333019]]\n                      [21 [0.9482812782 0.9928586086]]\n                      [28 [0.9378307552 0.9885202078]]\n                      [30 [0.9336213532 0.9874262621]]\n                      [60 [0.8672177235 0.9712265117]]\n                      [91 [0.8060717379 0.9521491681]]\n                      [182 [0.6230995857 0.9059969849]]\n                      [270 [0.5101771563 0.8622099907]]\n                      [363 [0.4347761901 0.8264769796]]\n                      [452 [0.3647959502 0.7881730203]]\n                      [547 [0.3002271687 0.7487541769]]\n                      [638 [0.2191936376 0.7108669536]]\n                      [730 [0.1633465271 0.6539010494]]\n                      [821 [0.1410543693 0.6200850504]]\n                      [883 [0.112959532 0.5867497829]]\n                      [954 [0.0991815473 0.5659942916]]\n                      [1095 [0.080756853 0.5165745583]]]\n           sum-beta-xs (map js/Math.exp [-0.162124472180451 0.682324669172932])]\n\n       (cox-adjusted surv-data sum-beta-xs))\n     ;; => [[0 [0 0]]\n     ;;     [1 (0.01224177520106726 0.003931380790330616)]\n     ;;     [2 (0.015740602763125524 0.007861997425231353)]\n     ;;     [4 (0.019241645870730743 0.009843247444593597)]\n     ;;     [6 (0.020995372988407125 0.01186623739090344)]\n     ;;     [7 (0.02275382109643579 0.01186623739090344)]\n     ;;     [13 (0.033379225275438434 0.01186623739090344)]\n     ;;     [21 (0.04401672215277627 0.013909780322551722)]\n     ;;     [28 (0.05289400387003364 0.02207198480707156)]\n     ;;     [30 (0.05643251324663601 0.02409844543507091)]\n     ;;     [60 (0.11411861674289629 0.054190907371262725)]\n     ;;     [91 (0.16582834519531353 0.0868338714150549)]\n     ;;     [182 (0.3294450785025679 0.16029853338007288)]\n     ;;     [270 (0.41620046620357787 0.21030764237865213)]\n     ;;     [363 (0.46699210437328914 0.24158472992018698)]\n     ;;     [452 (0.5104806307064491 0.2689456479761832)]\n     ;;     [547 (0.547017400528714 0.29133592367285693)]\n     ;;     [638 (0.5902581775974212 0.3079423740957695)]\n     ;;     [730 (0.6157149646541598 0.3247657763897166)]\n     ;;     [821 (0.623141087363417 0.3310186105188627)]\n     ;;     [883 (0.631799078315709 0.33603018168848203)]\n     ;;     [954 (0.635357471759502 0.33832246315208453)]\n     ;;     [1095 (0.6399569479176096 0.34308012554925876)]]\n))\n\n  0)\n\n(comment\n  (let [S0 [[0 [1 1]]\n            [1 [0.9857067242 0.9980148933]]\n            ;; [2 [0.9815928264 0.9960015827]]\n            ;; [4 [0.9774623833 0.9949805958]]\n            ;; [6 [0.9753882847 0.9939333019]]\n            ;; [7 [0.9733049262 0.9939333019]]\n            ;; [13 [0.9607879846 0.9939333019]]\n            ;; [21 [0.9482812782 0.9928586086]]\n            ;; [28 [0.9378307552 0.9885202078]]\n            ;; [30 [0.9336213532 0.9874262621]]\n            ;; [60 [0.8672177235 0.9712265117]]\n            ;; [91 [0.8060717379 0.9521491681]]\n            ;; [182 [0.6230995857 0.9059969849]]\n            ;; [270 [0.5101771563 0.8622099907]]\n            ;; [363 [0.4347761901 0.8264769796]]\n            ;; [452 [0.3647959502 0.7881730203]]\n            ;; [547 [0.3002271687 0.7487541769]]\n            ;; [638 [0.2191936376 0.7108669536]]\n            ;; [730 [0.1633465271 0.6539010494]]\n            ;; [821 [0.1410543693 0.6200850504]]\n            ;; [883 [0.112959532 0.5867497829]]\n            ;; [954 [0.0991815473 0.5659942916]]\n            [1095 [0.080756853 0.5165745583]]]]\n\n    (map #(S0-for-day S0 %) [-1 0 5 30 100 1000 2000 10000]))\n\n  ;; => ([0 [1 1]]\n  ;;     [0 [1 1]]\n  ;;     [4 [0.9774623833 0.9949805958]]\n  ;;     [30 [0.9336213532 0.9874262621]]\n  ;;     [91 [0.8060717379 0.9521491681]]\n  ;;     [954 [0.0991815473 0.5659942916]]\n  ;;     [1095 [0.080756853 0.5165745583]] \n  ;;     [1095 [0.080756853 0.5165745583]])\n  ;;       \n   (let [S0 [[0 [1 1]]\n             [1 [0.9857067242 0.9980148933]]\n             [2 [0.9815928264 0.9960015827]]\n             [4 [0.9774623833 0.9949805958]]\n             [6 [0.9753882847 0.9939333019]]\n             [7 [0.9733049262 0.9939333019]]\n             [13 [0.9607879846 0.9939333019]]\n             [21 [0.9482812782 0.9928586086]]\n             [28 [0.9378307552 0.9885202078]]\n             [30 [0.9336213532 0.9874262621]]\n             [60 [0.8672177235 0.9712265117]]\n             [91 [0.8060717379 0.9521491681]]\n             [182 [0.6230995857 0.9059969849]]\n             [270 [0.5101771563 0.8622099907]]\n             [363 [0.4347761901 0.8264769796]]\n             [452 [0.3647959502 0.7881730203]]\n             [547 [0.3002271687 0.7487541769]]\n             [638 [0.2191936376 0.7108669536]]\n             [730 [0.1633465271 0.6539010494]]\n             [821 [0.1410543693 0.6200850504]]\n             [883 [0.112959532 0.5867497829]]\n             [954 [0.0991815473 0.5659942916]]\n             [1095 [0.080756853 0.5165745583]]]]\n     (S0-for-days S0 [-1 0 5 30 100 1000 2000 10000]))\n   ;; => [nil [0 [1 1]] [4 [0.9774623833 0.9949805958]] [30 [0.9336213532 0.9874262621]] [91 [0.8060717379 0.9521491681]] [954 [0.0991815473 0.5659942916]] [1095 [0.080756853 0.5165745583]]]\n\n   ;; => [[1095 [0.080756853 0.5165745583]] [954 [0.0991815473 0.5659942916]] [883 [0.112959532 0.5867497829]]]\n\n  \n  0)\n\n\n\n"]}