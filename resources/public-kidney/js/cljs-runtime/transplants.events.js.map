{"version":3,"sources":["transplants/events.cljs"],"mappings":"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","names":["re_frame.core.reg_event_db","_","cljs.core.merge","transplants.db/default-db","js/window","p__67746","vec__67747","cljs.core.nth","db","new-width","cljs.core.assoc","re_frame.core.reg_event_fx","p__67750","p__67751","map__67752","cljs.core/--destructure-map","cljs.core.get","vec__67753","_db","route","params","query","p__67756","vec__67757","new-match","p__67760","vec__67761","organ","p__67764","vec__67765","c","p__67768","vec__67769","ocs","p__67773","vec__67776","p__67779","vec__67782","b-info","p__67786","vec__67787","cljs.core.update","cljs.core/not","p__67793","vec__67796","increment","old","new","x__4336__auto__","y__4337__auto__","x__4339__auto__","y__4340__auto__","transplants.events/bundle-sheet","bundle-name","tool-suffix","cljs.core.keyword","p__67815","p__67816","map__67817","vec__67818","data-path","response","vec__67821","path-params","cljs.core.get_in","_centre","tool","_tab","transplants.utils/path-keys","raw","cljs.reader.read_string","cljs.core/name","inputs-key","fmaps","transplants.factors/master-f-maps","fmaps*","cljs.core/group-by","cljs.core.map","p__67824","vec__67825","vec__67828","k","v","cljs.core.into","tool-inputs","cljs.core/sorted-map-by","k1","k2","cljs.core/compare","baseline-vars-key","baseline-vars","cljs.core.remove","cljs.core.comp","cljs.core/nil?","cljs.core/first","p__67833","vec__67835","vec__67838","map__67841","level","baseline-cifs-key","baseline-cifs","p1__67806#","cljs.core.dissoc","timed-outcome-keys","cljs.core/keys","outcome-keys","p1__67809#","cljs.core._EQ_","outcomes","transplants.factors/get-outcomes*","beta-keys","transplants.factors/prefix-outcomes-keys","base-outcome-keys","cljs.core/keyword","S0+","bc","fexpr__67842","cljs.core.apply","cljs.core/juxt","S0","p1__67810#","p2__67811#","cljs.core.keep_indexed","transplants.model/sample-from","cljs.core/assoc-in","p__67846","vec__67847","step","p1__67845#","p__67851","vec__67853","day","p__67857","vec__67859","selection","p__67862","vec__67864","p__67867","vec__67868","data","p__67874","vec__67875","transplants.events/transpose-response","winton-utils.data-frame/map-of-vs->v-of-maps","p__67878","vec__67879","_data-path","_response","js/console.error","p__67883","p__67884","map__67885","vec__67886","mdata","organs","p__67891","p__67892","map__67893","vec__67894","vec__67897","_evt","path","ajax.core/text-request-format","ajax.core/text-response-format","p__67904","p__67905","map__67906","vec__67907","vec__67910","p__67915","p__67916","map__67917","vec__67918","vec__67921","p__67926","p__67927","map__67931","vec__67932","vec__67935","transplants.events/load-and-transpose","p__67939","p__67940","map__67941","vec__67942","vec__67945"],"sourcesContent":["(ns transplants.events\n  (:require\n   [winton-utils.data-frame :refer [map-of-vs->v-of-maps]]\n   [re-frame.core :as rf]\n   [day8.re-frame.http-fx]\n   [transplants.fx :as fx]\n   [transplants.utils :as utils]\n   [transplants.db :as init-db]\n   [transplants.factors :as fac]\n   ;[transplants.paths :as paths]\n   [transplants.model :as model]\n   [ajax.core :as ajax]\n   [cljs.reader :as  edn]\n   [clojure.string :as string]\n   [clojure.set :as rel]\n   ;[shadow.debug :refer [locals ?> ?-> ?->>]]\n   ))\n\n;;; Events ;;;\n\n(rf/reg-event-db\n ::initialize-db\n (fn  \n   [_ _]\n   (merge init-db/default-db\n          {:current-route nil\n           :randomise-icons false\n           :inputs {}\n           :selected-vis \"bars\"\n           :window-width (.-innerWidth js/window)\n           :test-day 100\n           :modal-data nil})))\n\n(rf/reg-event-db\n ::update-window-width\n (fn [db [_ new-width]]\n   (assoc db :window-width new-width)))\n\n(rf/reg-event-fx\n ::navigate\n (fn  \n   [{:keys [_db]} [_ route params query]]\n   ;; See `navigate` effect in routes.cljs\n   {::fx/navigate! [route params query]}))\n\n(rf/reg-event-db\n ::navigated\n (fn  \n   [db [_ new-match]]\n   (assoc db :current-route new-match)))\n\n(rf/reg-event-db\n ; active organ\n ::organ\n (fn  \n   [db [_ organ]]\n   (assoc db :organ organ)))\n\n(rf/reg-event-db\n ; active centre\n ::centre\n (fn  \n   [db [_ c]]\n   (assoc db :centre c)))\n\n(rf/reg-event-db\n ; organ centres\n ::organ-centres\n (fn  \n   [db [_ ocs]]\n   (assoc db :organ-centres ocs)))\n\n(rf/reg-event-db\n ; reset inputs\n ::reset-inputs\n (fn  \n   [db [_ _]]\n   (assoc db :inputs {})))\n\n(rf/reg-event-db\n ; guidance\n ::guidance\n (fn  \n   [db [_ b-info]]\n   (assoc db :guidance b-info)))\n\n(rf/reg-event-db\n ; randomise-icons\n ::randomise-icons\n (fn  \n   [db [_ _]]\n   (update db :randomise-icons not)))\n\n(rf/reg-event-db\n ; guidance-percent\n ::inc-guidance-percent\n (fn  \n   [db [_ increment]]\n   (update db :guidance-percent\n           (fn [old]\n             (let [new (+ old increment)]\n               (max (min new 100) 0))))))\n\n(defn bundle-sheet\n  \"Concat a sheet type suffix onto the bundle name to generate a specific sheet key \n   e.g.\n   ['waiting' '-inputs'] -> :waiting-inputs\n   ['graft' '-baseline-vars'] -> :graft-baseline-vars\"\n  [bundle-name tool-suffix]\n  (keyword (str bundle-name tool-suffix)))\n\n(comment\n\n  (def fmaps {:a {:order 10} :b {:order -6} :c {:order nil} :d {:order nil}})\n  (get-in fmaps [:a :order])\n  (into (sorted-map-by (fn [k1 k2]\n                         (compare (get-in fmaps [k1 :order])\n                                  (get-in fmaps [k2 :order]))))\n        fmaps))\n\n\n;;;\n;; Process raw tool bundles into db. \n;; \n;; It may be more efficient to do this processing at configuration time\n;;\n;; \n;;;\n(rf/reg-event-fx\n ::store-bundle-inputs\n (fn \n  [{:keys [_ db]} [_ data-path response]]\n  (let [path-params (get-in db [:current-route :path-params])\n        [organ _centre tool _tab] (utils/path-keys path-params)\n        ;_ (js/console.log ::store-bundle-inputs \"tool: \" tool)\n        tool (if (nil? tool) :waiting tool)\n        raw (edn/read-string response)\n\n        bundle-name (name tool)\n        inputs-key (bundle-sheet bundle-name \"-inputs\")\n        fmaps (fac/master-f-maps organ (inputs-key raw))\n        fmaps* (->> fmaps\n                    (group-by :factor)\n                    (map (fn [[k [v]]] [k v]))\n                    (into {}))\n        ; tool-inputs* fmaps* ;(map (fn [[k [v]]] [k v]) (group-by :factor fmaps))\n        ; tool-inputs must be sorted by spreadsheet factor order   \n        tool-inputs (into (sorted-map-by (fn [k1 k2]\n                                           (compare (get-in fmaps* [k1 :order])\n                                                    (get-in fmaps* [k2 :order]))))\n                          fmaps*)\n\n        baseline-vars-key (bundle-sheet bundle-name \"-baseline-vars\")\n        baseline-vars (->> baseline-vars-key\n                           (get raw)\n                           (group-by :factor)\n                           (remove (comp nil? first))\n                           (map (fn [[k [{:keys [level]}]]] [k level]))\n                           (into {}))\n\n        baseline-cifs-key (bundle-sheet bundle-name \"-baseline-cifs\")\n        baseline-cifs (map #(dissoc % :centre) (get raw baseline-cifs-key))\n\n         ;; Convert legacy cifs to survivals keyed by outcome\n        timed-outcome-keys (keys (first baseline-cifs))\n        outcome-keys (remove #(= :days %) timed-outcome-keys)\n        outcomes (fac/get-outcomes* (first baseline-cifs))\n        beta-keys (fac/prefix-outcomes-keys \"beta\" outcomes)\n        base-outcome-keys (map keyword outcomes)\n        ;outcome-keys (fac/prefix-outcomes-keys \"cif\" outcomes)\n\n        ;; Use SO+ if calculating with ALL data points\n        S0+ (map (fn [bc] [(:days bc)\n                           ((apply juxt outcome-keys) bc)]) baseline-cifs)\n        #_#_S0+ (map (fn [bc] [(:days bc)\n                               (map (comp - js/Math.log)\n                                    ((apply juxt outcome-keys) bc))]) baseline-cifs)\n\n        ;; Otherwise, use SO for a reduced data optimised calculation\n        S0 (keep-indexed #(when-not (and (= %1 1) (zero? (first %2)))\n                            %2) (model/sample-from S0+))]\n    ;(?-> tool-inputs ::tool-inputs)\n    ;(locals)\n    {:db ;(assoc db :oct-bundle tool-centre-bundle)\n     (assoc-in db data-path\n               (-> raw\n                   (assoc :fmaps tool-inputs\n                          :baseline-cifs baseline-cifs\n                          :baseline-vars baseline-vars\n                          :outcomes outcomes\n                          :outcome-keys outcome-keys\n                          :base-outcome-keys base-outcome-keys\n                          :timed-outcome-keys timed-outcome-keys\n                          :beta-keys beta-keys\n                          :all-S0 S0+\n                          :S0 S0)\n                   (dissoc inputs-key)\n                   (dissoc baseline-cifs-key)\n                   (dissoc baseline-vars-key)))\n     :reg-factors [organ fmaps]})))\n\n(rf/reg-event-db\n ::inc-test-day\n (fn \n   [db [_ step]]\n   (update db :test-day #(+ step %))))\n\n(rf/reg-event-db\n ::test-day\n (fn \n   [db [_ day]]\n   (assoc db :test-day day)))\n\n(rf/reg-event-db\n ::selected-vis\n (fn \n   [db [_ selection]]\n   (assoc db :selected-vis selection)))\n\n\n;;;\n;; Load data sequences\n;;;\n(rf/reg-event-db\n ::store-response\n (fn\n  [db [_ data-path response]]\n  (-> db\n      (assoc-in data-path (edn/read-string response)))))\n\n(rf/reg-event-db\n ::modal-data\n (fn [db [_ data]]\n   (assoc db :modal-data data)))\n\n(comment\n  (def tool-meta-match string/ends-with?)\n  (clojure.string/ends-with? \"abcd\" \"d\")\n\n  (def sheet-key-name :tools)\n  (def sheet-meta [{:sheet \"centres\", :keys [:key :name]}\n                   {:sheet \"tools\", :keys [:key]}\n                   {:sheet \"*-baseline-cifs\", :keys [:centre :days]}\n                   {:sheet \"*-baseline-vars\", :keys [:baseline-factor]}\n                   {:sheet \"*-inputs\", :keys [:factor :level]}\n                   {:sheet \"bmi-calculator\", :keys [:factor :level]}])\n  (filter (fn [meta] (clojure.string/ends-with? (:sheet meta) \"waiting-baseline-cifs\"))\n          sheet-meta)\n\n\n  (def relation #{{:a 1 :b 2 :c 3}\n                  {:a 1 :b 3 :c 3}\n                  {:a 2 :b 1 :c 4}\n                  {:a 2 :b 2 :c 4}})\n  (def v [{:a 1 :b 2 :c 3}\n          {:a 1 :b 3 :c 3}\n          {:a 2 :b 1 :c 4}\n          {:a 2 :b 2 :c 4}])\n  (group-by :a v)\n\n  (clojure.set/index relation [:a :b])\n  (clojure.set/index relation [:a])\n  (filter (fn [[m _s]] (= 1 (:a m))) (clojure.set/index relation [:a :b])))\n\n(defn transpose-response\n  \"store and transpose labelled column data to row maps format.\n   :todo - perhaps we should store the column format too to avoid regenerating it. I think we use column format for baselines?\"\n  [db [_ data-path response]]\n  (-> db\n      (assoc-in data-path (map-of-vs->v-of-maps (edn/read-string response)))))\n\n(rf/reg-event-db\n ::transpose-response\n transpose-response\n )\n\n(rf/reg-event-db\n ::transpose-response-centres\n transpose-response)\n\n\n(rf/reg-event-db\n ::bad-response\n (fn\n  [db [_ _data-path _response]]\n   (js/console.error)\n  db))\n\n(rf/reg-event-fx\n ::store-metadata-response\n (fn\n   [{:keys [db]} [_ _data-path response]]\n   (let [mdata (edn/read-string response)\n         #_#_mdata (if (not= utils/ORGAN \"\")\n                 (assoc mdata :organ-order [(keyword utils/ORGAN)])\n                 mdata)\n         organs (mdata :organ-order)\n         ]\n\n     ; todo: VALIDATE mdata once we know what it should look like!\n       {:db (-> db\n                (assoc :mdata mdata))\n        ::fx/load-organ-centres organs})))\n\n(rf/reg-event-fx\n ::load-metadata\n (fn\n  [{:keys [db]} [_evt [path data-path]]]\n  (when (nil? (get-in db data-path))\n    {:http-xhrio {:method :get\n                  :uri path\n                  :timeout 8000\n                  :format          (ajax/text-request-format)\n                  :response-format (ajax/text-response-format)\n                  :on-success [::store-metadata-response data-path]\n                  :on-failure [::bad-response data-path]}})))\n\n;;;;;;;;;;;;\n\n(rf/reg-event-fx\n ::load-edn\n (fn\n  [{:keys [db]} [_evt [path data-path]]]\n  (when (nil? (get-in db data-path))\n    {:http-xhrio {:method :get\n                  :uri path\n                  :timeout 8000\n                  :format          (ajax/text-request-format)\n                  :response-format (ajax/text-response-format)\n                  :on-success [::store-response data-path]\n                  :on-failure [::bad-response data-path]}})))\n\n(rf/reg-event-fx\n ::load-bundles\n (fn\n  [{:keys [db]} [_evt [path data-path]]]\n  (when (nil? (get-in db data-path))\n    {:http-xhrio {:method :get\n                  :uri path\n                  :timeout 8000\n                  :format          (ajax/text-request-format)\n                  :response-format (ajax/text-response-format)\n                  :on-success [::store-bundle-inputs data-path]\n                  :on-failure [::bad-response data-path]}})))\n\n(defn load-and-transpose\n  [{:keys [db]} [_evt [path data-path]]]\n  (when (nil? (get-in db data-path))\n    {:http-xhrio {:method :get\n                  :uri path\n                  :timeout 8000\n                  :format          (ajax/text-request-format)\n                  :response-format (ajax/text-response-format)\n                  :on-success [::transpose-response-centres data-path]\n                  :on-failure [::bad-response data-path]}}))\n\n(rf/reg-event-fx\n ::load-and-transpose\n load-and-transpose\n #_(fn\n  [{:keys [db]} [_evt [path data-path]]]\n  (when (nil? (get-in db data-path))\n    {:http-xhrio {:method :get\n                  :uri path\n                  :timeout 8000\n                  :format          (ajax/text-request-format)\n                  :response-format (ajax/text-response-format)\n                  :on-success [::transpose-response data-path]\n                  :on-failure [::bad-response data-path]}})))\n\n(rf/reg-event-fx\n ::load-and-transpose-centres\n load-and-transpose)\n\n(rf/reg-event-fx\n ::load-and-transpose-always\n (fn\n  [{:keys [_db]} [_evt [path data-path]]]\n  {:http-xhrio {:method :get\n                :uri path\n                :timeout 8000\n                :format          (ajax/text-request-format)\n                :response-format (ajax/text-response-format)\n                :on-success [::transpose-response data-path]\n                :on-failure [::bad-response data-path]}}))\n"]}