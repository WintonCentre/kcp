{"version":3,"sources":["transplants/fx.cljs"],"mappings":"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","names":["re-frame.core/reg-fx","p__81411","vec__81412","cljs.core.nth","k","params","query","cljs.core.println","reitit.frontend.easy.push_state","p__81415","vec__81416","event-key","event-params","re-frame.core/dispatch","organs","seq__81419","cljs.core/seq","chunk__81420","count__81421","i__81422","temp__5753__auto__","cljs.core/chunked-seq?","c__4679__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","cljs.core/first","cljs.core/next","organ","transplants.paths/centres-path","transplants.fx/reg-factor","organ-k","factor-k","ref-k","cljs.core.keyword","cljs.core/name","re_frame.core.reg_sub","db","cljs.core.get_in","re_frame.core.reg_event_db","p__81423","vec__81424","_","v","cljs.core/assoc-in","p__81427","vec__81433","transplants.fx/reg-factors","fmaps","seq__81436","chunk__81437","count__81438","i__81439","fmap"],"sourcesContent":["(ns transplants.fx\n  (:require [re-frame.core :as rf]\n            [reitit.frontend.easy :as rfe]\n            [transplants.paths :as paths]\n            ;[shadow.debug :refer [?-> locals]]\n            ))\n\n\n\n;;; Effects ;;;\n\n;; Triggering navigation from events.\n;; k is the route :name as defined in routes/routes\n;; params are any url parameters\n;; query is any query parameters\n(rf/reg-fx\n ::navigate!\n (fn [[k params query]]\n   (println \"NAVIGATE!\" k params query)\n   (rfe/push-state k params query)))\n\n\n;; Loading edn files from the database\n(rf/reg-fx\n::dispatch\n(fn [[event-key event-params]]\n  (rf/dispatch [event-key event-params])))\n\n(rf/reg-fx\n ::load-organ-centres\n (fn [organs]\n   (doseq [organ organs]\n     ;(locals)\n     (rf/dispatch [:transplants.events/load-and-transpose-centres [(paths/centres-path organ) [:organ-centres organ]]]))))\n\n(comment\n  ; from predict code\n  #_(defn get-dictionary\n      \"read dictionary ops from a url.\n  USED IN PRODUCTION DICTIONARY LOAD\"\n      ([url {:keys [on-error handler]}]\n       (GET url {:error-handler file-error                      ;on-error\n                 :handler       handler\n                 :format        :transit                        ;:transit\n                 }))))\n  \n(defn reg-factor\n  \"Register simple db subscription and event on a factor. Duplicate registrations are possible and will cause a console warning\n   on startup. The final registration overwrites any previous ones. This function can be used to register db keys at run-time.\n   Both subscription and event are registered on the organ-namespaced factor.\n   Events happen when an input changes the value of a factor.\n   Subscriptions access input values by the factor key.\"\n  [organ-k factor-k]\n  (let [ref-k (keyword (name organ-k) (name factor-k))]\n    (rf/reg-sub ref-k (fn [db] (get-in db [:inputs organ-k factor-k])))\n    (rf/reg-event-db ref-k (fn [db [_ v]] (assoc-in db [:inputs organ-k factor-k] v)))))\n\n(defn reg-factors\n  \"Function which registers all organ factors given in a seq of factor maps\"\n  [[organ fmaps]]\n  (doseq [fmap fmaps]\n    (reg-factor organ (:factor fmap))))\n\n(rf/reg-fx :reg-factors reg-factors)\n  \n\n;;\n;; load translation state; Call this to set up the translation system\n;;\n#_(defn load-translations*\n  \"load the initial dictionary into the rtdb t-state.\n  local dictionary-url is the relative url to a txt file containing :upsert and :switch commands.\n  At runtime, the callback handler is usually a call to handle-dictionary with ref bound to the t-state-change cursor.\n  At test time this may be different.\n\n  USED IN PRODUCTION DICTIONARY LOAD\"\n  ([local-dictionary-url handler]\n   (get-dictionary\n    local-dictionary-url {:headers {\"Cache-Control\" \"no-store\"}\n                          :on-error file-error\n                          :handler  handler})))\n\n\n\n  \n\n"]}