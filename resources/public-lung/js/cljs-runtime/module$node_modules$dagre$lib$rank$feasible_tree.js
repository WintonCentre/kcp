shadow$provide.module$node_modules$dagre$lib$rank$feasible_tree=function(global,require,module,exports){function tightTree(t,g){function dfs(v){_.forEach(g.nodeEdges(v),function(e){var edgeV=e.v;edgeV=v===edgeV?e.w:edgeV;t.hasNode(edgeV)||slack(g,e)||(t.setNode(edgeV,{}),t.setEdge(v,edgeV,{}),dfs(edgeV))})}_.forEach(t.nodes(),dfs);return t.nodeCount()}function findMinSlackEdge(t,g){return _.minBy(g.edges(),function(e){if(t.hasNode(e.v)!==t.hasNode(e.w))return slack(g,e)})}function shiftRanks(t,g,
delta){_.forEach(t.nodes(),function(v){g.node(v).rank+=delta})}var _=require("module$node_modules$dagre$lib$lodash"),Graph=require("module$node_modules$dagre$lib$graphlib").Graph,slack=require("module$node_modules$dagre$lib$rank$util").slack;module.exports=function(g){var t=new Graph({directed:!1}),start=g.nodes()[0],size=g.nodeCount();for(t.setNode(start,{});tightTree(t,g)<size;)start=findMinSlackEdge(t,g),start=t.hasNode(start.v)?slack(g,start):-slack(g,start),shiftRanks(t,g,start);return t}}
//# sourceMappingURL=module$node_modules$dagre$lib$rank$feasible_tree.js.map
