{
"version":3,
"file":"module$node_modules$dagre$lib$greedy_fas.js",
"lineCount":5,
"mappings":"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",
"sources":["node_modules/dagre/lib/greedy-fas.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$dagre$lib$greedy_fas\"] = function(global,require,module,exports) {\nvar _ = require(\"./lodash\");\nvar Graph = require(\"./graphlib\").Graph;\nvar List = require(\"./data/list\");\n\n/*\n * A greedy heuristic for finding a feedback arc set for a graph. A feedback\n * arc set is a set of edges that can be removed to make a graph acyclic.\n * The algorithm comes from: P. Eades, X. Lin, and W. F. Smyth, \"A fast and\n * effective heuristic for the feedback arc set problem.\" This implementation\n * adjusts that from the paper to allow for weighted edges.\n */\nmodule.exports = greedyFAS;\n\nvar DEFAULT_WEIGHT_FN = _.constant(1);\n\nfunction greedyFAS(g, weightFn) {\n  if (g.nodeCount() <= 1) {\n    return [];\n  }\n  var state = buildState(g, weightFn || DEFAULT_WEIGHT_FN);\n  var results = doGreedyFAS(state.graph, state.buckets, state.zeroIdx);\n\n  // Expand multi-edges\n  return _.flatten(_.map(results, function(e) {\n    return g.outEdges(e.v, e.w);\n  }), true);\n}\n\nfunction doGreedyFAS(g, buckets, zeroIdx) {\n  var results = [];\n  var sources = buckets[buckets.length - 1];\n  var sinks = buckets[0];\n\n  var entry;\n  while (g.nodeCount()) {\n    while ((entry = sinks.dequeue()))   { removeNode(g, buckets, zeroIdx, entry); }\n    while ((entry = sources.dequeue())) { removeNode(g, buckets, zeroIdx, entry); }\n    if (g.nodeCount()) {\n      for (var i = buckets.length - 2; i > 0; --i) {\n        entry = buckets[i].dequeue();\n        if (entry) {\n          results = results.concat(removeNode(g, buckets, zeroIdx, entry, true));\n          break;\n        }\n      }\n    }\n  }\n\n  return results;\n}\n\nfunction removeNode(g, buckets, zeroIdx, entry, collectPredecessors) {\n  var results = collectPredecessors ? [] : undefined;\n\n  _.forEach(g.inEdges(entry.v), function(edge) {\n    var weight = g.edge(edge);\n    var uEntry = g.node(edge.v);\n\n    if (collectPredecessors) {\n      results.push({ v: edge.v, w: edge.w });\n    }\n\n    uEntry.out -= weight;\n    assignBucket(buckets, zeroIdx, uEntry);\n  });\n\n  _.forEach(g.outEdges(entry.v), function(edge) {\n    var weight = g.edge(edge);\n    var w = edge.w;\n    var wEntry = g.node(w);\n    wEntry[\"in\"] -= weight;\n    assignBucket(buckets, zeroIdx, wEntry);\n  });\n\n  g.removeNode(entry.v);\n\n  return results;\n}\n\nfunction buildState(g, weightFn) {\n  var fasGraph = new Graph();\n  var maxIn = 0;\n  var maxOut = 0;\n\n  _.forEach(g.nodes(), function(v) {\n    fasGraph.setNode(v, { v: v, \"in\": 0, out: 0 });\n  });\n\n  // Aggregate weights on nodes, but also sum the weights across multi-edges\n  // into a single edge for the fasGraph.\n  _.forEach(g.edges(), function(e) {\n    var prevWeight = fasGraph.edge(e.v, e.w) || 0;\n    var weight = weightFn(e);\n    var edgeWeight = prevWeight + weight;\n    fasGraph.setEdge(e.v, e.w, edgeWeight);\n    maxOut = Math.max(maxOut, fasGraph.node(e.v).out += weight);\n    maxIn  = Math.max(maxIn,  fasGraph.node(e.w)[\"in\"]  += weight);\n  });\n\n  var buckets = _.range(maxOut + maxIn + 3).map(function() { return new List(); });\n  var zeroIdx = maxIn + 1;\n\n  _.forEach(fasGraph.nodes(), function(v) {\n    assignBucket(buckets, zeroIdx, fasGraph.node(v));\n  });\n\n  return { graph: fasGraph, buckets: buckets, zeroIdx: zeroIdx };\n}\n\nfunction assignBucket(buckets, zeroIdx, entry) {\n  if (!entry.out) {\n    buckets[0].enqueue(entry);\n  } else if (!entry[\"in\"]) {\n    buckets[buckets.length - 1].enqueue(entry);\n  } else {\n    buckets[entry.out - entry[\"in\"] + zeroIdx].enqueue(entry);\n  }\n}\n\n};"],
"names":["shadow$provide","global","require","module","exports","doGreedyFAS","g","buckets","zeroIdx","results","sources","length","sinks","entry","nodeCount","dequeue","removeNode","i","concat","collectPredecessors","undefined","_","forEach","inEdges","v","edge","weight","uEntry","node","push","w","out","assignBucket","outEdges","wEntry","buildState","weightFn","fasGraph","Graph","maxIn","maxOut","nodes","setNode","edges","e","prevWeight","setEdge","Math","max","range","map","List","graph","enqueue","greedyFAS","state","DEFAULT_WEIGHT_FN","flatten","constant"]
}
