{"version":3,"sources":["transplants/routes.cljs"],"mappings":"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","names":["transplants.routes/routes","transplants.views/home-page","params","cljs.core.println","transplants.views/about-page","js/console.log","_params","transplants.views/legal-page","transplants.views/pubs-page","transplants.views/tech-page","transplants.views/organ-home","organ","cljs.core.keyword","cljs.core.get_in","re-frame.core/dispatch","transplants.paths/tools-path","transplants.views/organ-centre","_centre","transplants.views/organ-centre-tool","_tool","tab","cljs.core/tap>","cljs.core.pr_str","transplants.routes/on-navigate","new-match","old-match","re_frame.core.subscribe","cs","reitit.frontend.controllers/apply-controllers","cljs.core/deref","m","cljs.core.assoc","transplants.routes/router","reitit.frontend.router","reitit.coercion.spec/coercion","transplants.routes/init-routes!","reitit.frontend.easy/start!"],"sourcesContent":["(ns transplants.routes\n  (:require\n   [re-frame.core :as rf]\n   [reitit.core :as r]\n   [reitit.coercion.spec :as rss]\n   [reitit.frontend :as rfr]\n   [reitit.frontend.controllers :as rfc]\n   [reitit.frontend.easy :as rfe]\n   #_[transplants.ui :as ui]\n   [transplants.events :as events]\n   [transplants.views :as views]\n   [transplants.subs :as subs]\n   [transplants.paths :as paths]\n   ;[shadow.debug :refer [locals ?> ?-> ?->>]]\n   #_[\"react-bootstrap\" :as bs :refer [Navbar Navbar.Brand Navbar.Toggle Navbar.Collapse Navbar.Text\n                                       Nav Nav.Link]]))\n(comment\n  (paths/centres-path :lung))\n\n(def routes\n  \"Reitit nested route syntax can be tricky. Only the leaves are valid.\n   This example is helpful:\n   (def route\n     (r/router\n      [\\\"/api\\\"\n       [\\\"\\\" ::api] ; <-- necessary to make \\\"/api\\\" a valid leaf route\n       [\\\"/ping\\\" ::ping]\n       [\\\"/user/:id\\\" ::user]]))\n   as it defines valid routes for /api, /ping, and /user/fred\"\n  [\"/\"\n   [\"\"\n    {:name      ::views/home\n     :view      views/home-page\n     :link-text \"Transplant Risks\"\n     :controllers [{;; Do whatever initialization needed for home page\n       ;; I.e (re-frame/dispatch [::events/load-something-with-ajax])\n                    :start (fn [& params] (println ::routes \"Entering Home \" params))\n       ;; Teardown can be done here.\n                    :stop   (fn [& params] (println ::routes \"Leaving Home \" params))}]}]\n   [\"about\" {:name      ::views/about\n             :view      views/about-page\n             :link-text \"About\"\n             :conflicting true\n             :controllers [{:parameters {:path [:organ]}\n                            :start (fn [params]\n                                     (js/console.log \"Entering About:\" params))\n                            :stop  (fn [_params] (js/console.log (str \"Leaving About\")))}]}]\n   [\"legal\" {:name      ::views/legal\n             :view      views/legal-page\n             :link-text \"Legal\"\n             :conflicting true\n             :controllers [{:parameters {:path [:organ]}\n                            :start (fn [params]\n                                     (js/console.log \"Entering Legal:\" params))\n                            :stop  (fn [_params] (js/console.log (str \"Leaving Legal\")))}]}]\n   [\"pubs\" {:name      ::views/pubs\n             :view      views/pubs-page\n             :link-text \"Publications\"\n             :conflicting true\n             :controllers [{:parameters {:path [:organ]}\n                            :start (fn [params]\n                                     (js/console.log \"Entering Pubs:\" params))\n                            :stop  (fn [_params] (js/console.log (str \"Leaving Pubs\")))}]}]\n   [\"tech\" {:name      ::views/tech\n             :view      views/tech-page\n             :link-text \"Technical\"\n             :conflicting true\n             :controllers [{:parameters {:path [:organ]}\n                            :start (fn [params]\n                                     (js/console.log \"Entering Tech:\" params))\n                            :stop  (fn [_params] (js/console.log (str \"Leaving Tech\")))}]}]\n   [\":organ\" {:name      ::views/organ\n              :view      views/organ-home\n              :link-text \"organ\"\n              :conflicting true\n              :controllers [{:parameters {:path [:organ]}\n                             :start (fn [params]\n                                      (js/console.log \"Entering organ:\" params)\n                                      (let [organ (keyword (get-in params [:path :organ]))]\n                                        (rf/dispatch [::events/load-and-transpose-always [(paths/tools-path organ) [:tools]]])))\n                             :stop  (fn [_params] (js/console.log (str \"Leaving \" :organ \" Home\")))}]}\n    [\"\"] ; required to make [\":organ\"] a leaf route\n    [\"/:centre\" {:name ::views/organ-centre\n                 :view views/organ-centre\n                 :link-text \"organ-centre\"\n                 :controllers [{:parameters {:path [:organ :centre]}\n                                :start (fn [params]\n                                         (let [_centre (keyword (get-in params [:path :centre]))]))\n                                :stop (fn [params] (js/console.log \"Leaving \" (get-in params [:path :centre])))}]}\n     [\"\"] ; required to make [\":organ/:centre\"] a leaf route\n     [\"/:tool\" {:name ::views/organ-centre-tool\n                :view views/organ-centre-tool\n                :link-text \"organ-centre-tool\"\n                :controllers [{:parameters {:path [:organ :centre :tool]}\n                               :start (fn [params]\n                                        (let [_tool (keyword (get-in params [:path :tool]))]\n                                          (js/console.log \"Entering organ-centre-tool: \" params)))\n                               :stop (fn [params] (js/console.log \"Leaving \" (get-in params [:path :tool])))}]}\n      [\"\"] ; required to make [\":organ/:centre/:tool\"] a leaf route\n      [\"/:tab\" ; \n       {:name ::views/organ-centre-tool-tab\n        :view views/organ-centre-tool\n        :link-text \"organ-centre-tool\"\n        :controllers [{:parameters {:path [:organ :centre :tool :tab]}\n                       :start (fn [params]\n                                (let [_tool (keyword (get-in params [:path :tool]))\n                                      tab (keyword (get-in params [:path :tab]))]\n                                  (js/console.log \"Entering organ-centre-tool: \" params)\n                                  (tap> {:tab  tab\n                                         :params params})\n                                  (rf/dispatch [::events/selected-vis tab])))\n                       :stop (fn [params] (js/console.log \"Leaving \" (pr-str (:path params))))}]}]]]]])\n\n\n(comment\n  (paths/tools-path :lung)\n\n  (def m [[[:a 1] [:b 2]] [[:a 3] [:b 4]]])\n  m\n  (map (partial into {}) m)\n  (+ 1 1)\n  (def rts (r/router routes))\n  (r/match-by-path rts \"/lung\")\n  (r/route-names rts)\n\n  (get-in (r/match-by-path rts \"/lung\") [:data :link-text])\n  (get-in (r/match-by-path rts \"/kidney\") [:data :result])\n  (get-in (r/match-by-path rts \"/lung/centre\") [:data :name])\n  (get-in (r/match-by-name rts :transplants.views/lung-centre) [:data :link-text]))\n\n(defn on-navigate [new-match]\n  (let [old-match (rf/subscribe [::subs/current-route])]\n    (when new-match\n      (let [cs (rfc/apply-controllers (:controllers @old-match) new-match)\n            m  (assoc new-match :controllers cs)]\n        (rf/dispatch [::events/navigated m])))))\n\n(def router\n  (rfr/router\n   routes\n   {:data {:coercion rss/coercion}}))\n\n(defn init-routes! []\n  (js/console.log \"initializing routes\")\n  (rfe/start!\n   router\n   on-navigate\n   {:use-fragment true}))\n\n(comment\n  (routes [:lung :kidney]))"]}