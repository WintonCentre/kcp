{
"version":3,
"file":"module$node_modules$lodash$_memoizeCapped.js",
"lineCount":1,
"mappings":"AAAAA,cAAA,CAAA,yCAAA,CAA8D,QAAQ,CAACC,MAAD,CAAQC,OAAR,CAAgBC,MAAhB,CAAuBC,OAAvB,CAAgC,CACtG,IAAIC,QAAUH,OAAA,CAAQ,oCAAR,CAyBdC,OAAOC,CAAAA,OAAP,CAZAE,QAAsB,CAACC,IAAD,CAAO,CACvBC,IAAAA,CAASH,OAAA,CAAQE,IAAR,CAAc,QAAQ,CAACE,GAAD,CAAM,CAXpBC,GAYnB,GAAIC,KAAMC,CAAAA,IAAV,EACED,KAAME,CAAAA,KAAN,EAEF,OAAOJ,IAJgC,CAA5B,CAOb,KAAIE,MAAQH,IAAOG,CAAAA,KACnB,OAAOH,KAToB,CAdyE;",
"sources":["node_modules/lodash/_memoizeCapped.js"],
"sourcesContent":["shadow$provide[\"module$node_modules$lodash$_memoizeCapped\"] = function(global,require,module,exports) {\nvar memoize = require('./memoize');\n\n/** Used as the maximum memoize cache size. */\nvar MAX_MEMOIZE_SIZE = 500;\n\n/**\n * A specialized version of `_.memoize` which clears the memoized function's\n * cache when it exceeds `MAX_MEMOIZE_SIZE`.\n *\n * @private\n * @param {Function} func The function to have its output memoized.\n * @returns {Function} Returns the new memoized function.\n */\nfunction memoizeCapped(func) {\n  var result = memoize(func, function(key) {\n    if (cache.size === MAX_MEMOIZE_SIZE) {\n      cache.clear();\n    }\n    return key;\n  });\n\n  var cache = result.cache;\n  return result;\n}\n\nmodule.exports = memoizeCapped;\n\n};"],
"names":["shadow$provide","global","require","module","exports","memoize","memoizeCapped","func","result","key","MAX_MEMOIZE_SIZE","cache","size","clear"]
}
